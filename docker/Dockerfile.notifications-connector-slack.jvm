####
# This Dockerfile is used in order to build a container that runs the Quarkus application in JVM mode
###

# Build the project
FROM registry.access.redhat.com/ubi8/openjdk-17:latest AS build
USER root
COPY . /home/jboss
WORKDIR /home/jboss
RUN ./mvnw clean package -DskipTests --projects :checkstyle,:notifications-common,:notifications-connector-common,:notifications-connector-slack --no-transfer-progress

# Build the container
FROM registry.access.redhat.com/ubi8/ubi-minimal:latest

ARG JAVA_PACKAGE=java-17-openjdk-headless
ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'

# Install java
# Also set up permissions for user `1001`
RUN microdnf install openssl curl ca-certificates ${JAVA_PACKAGE} \
    && microdnf update \
    && microdnf clean all \
    && mkdir /deployments \
    && chown 1001 /deployments \
    && chmod "g+rwX" /deployments \
    && chown 1001:root /deployments \
    && echo "securerandom.source=file:/dev/urandom" >> /etc/alternatives/jre/lib/security/java.security

ENV JAVA_OPTIONS="-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -XX:+ExitOnOutOfMemoryError"

# Use four distinct layers so if there are application changes the library layers can be re-used
COPY --from=build --chown=1001 /home/jboss/connector-slack/target/quarkus-app/lib/ /deployments/lib/
COPY --from=build --chown=1001 /home/jboss/connector-slack/target/quarkus-app/*.jar /deployments/
COPY --from=build --chown=1001 /home/jboss/connector-slack/target/quarkus-app/app/ /deployments/app/
COPY --from=build --chown=1001 /home/jboss/connector-slack/target/quarkus-app/quarkus/ /deployments/quarkus/

EXPOSE 8080
USER 1001

ENTRYPOINT ["sh", "-c", "java $JAVA_OPTIONS -jar /deployments/quarkus-run.jar"]
