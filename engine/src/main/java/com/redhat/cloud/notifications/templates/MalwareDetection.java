package com.redhat.cloud.notifications.templates;

import com.redhat.cloud.notifications.config.FeatureFlipper;
import com.redhat.cloud.notifications.models.EmailSubscriptionType;
import io.quarkus.qute.CheckedTemplate;
import io.quarkus.qute.TemplateInstance;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;

@ApplicationScoped
public class MalwareDetection implements EmailTemplate {

    public static final String DETECTED_MALWARE = "detected-malware";
    @Inject
    FeatureFlipper featureFlipper;

    @Override
    public TemplateInstance getTitle(String eventType, EmailSubscriptionType type) {
        if (type == EmailSubscriptionType.INSTANT) {
            if (eventType.equals(DETECTED_MALWARE)) {
                return getDetectedMalwareInstantEmailTitle();
            }
        }

        throw new UnsupportedOperationException(String.format(
                "No email title template for Malware Detection event_type: %s and EmailSubscription: %s found.",
                eventType, type
        ));
    }

    @Override
    public TemplateInstance getBody(String eventType, EmailSubscriptionType type) {
        if (type == EmailSubscriptionType.INSTANT) {
            if (eventType.equals(DETECTED_MALWARE)) {
                return getDetectedMalwareInstantEmailBody();
            }
        }

        throw new UnsupportedOperationException(String.format(
            "No email body template for Malware Detection event_type: %s and EmailSubscription: %s found.",
            eventType, type
        ));
    }

    @Override
    public boolean isSupported(String eventType, EmailSubscriptionType type) {
        return eventType.equals(DETECTED_MALWARE) && type == EmailSubscriptionType.INSTANT;
    }

    @Override
    public boolean isEmailSubscriptionSupported(EmailSubscriptionType type) {
        return type == EmailSubscriptionType.INSTANT;
    }

    private TemplateInstance getDetectedMalwareInstantEmailTitle() {
        if (featureFlipper.isMalwareEmailTemplatesV2Enabled()) {
            return Templates.detectedMalwareInstantEmailTitleV2();
        }
        return Templates.detectedMalwareInstantEmailTitle();
    }

    private TemplateInstance getDetectedMalwareInstantEmailBody() {
        if (featureFlipper.isMalwareEmailTemplatesV2Enabled()) {
            return Templates.detectedMalwareInstantEmailBodyV2();
        }
        return Templates.detectedMalwareInstantEmailBody();
    }

    @CheckedTemplate(requireTypeSafeExpressions = false)
    public static class Templates {

        public static native TemplateInstance detectedMalwareInstantEmailTitle();

        public static native TemplateInstance detectedMalwareInstantEmailBody();

        public static native TemplateInstance detectedMalwareInstantEmailTitleV2();

        public static native TemplateInstance detectedMalwareInstantEmailBodyV2();
    }
}
