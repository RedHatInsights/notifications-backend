package com.redhat.cloud.notifications.templates;

import com.redhat.cloud.notifications.models.EmailSubscriptionType;
import io.quarkus.qute.CheckedTemplate;
import io.quarkus.qute.TemplateInstance;

public class Vulnerability implements EmailTemplate {

    private static final String NewCveHighCvssEvent = "new-cve-cvss";
    private static final String NewCveCritSeverityEvent = "new-cve-severity";
    private static final String NewCveSecurityRuleEvent = "new-cve-security-rule";
    private static final String AnyCveKnownExploitEvent = "any-cve-known-exploit";

    @Override
    public TemplateInstance getTitle(String eventType, EmailSubscriptionType type) {
        if (type == EmailSubscriptionType.INSTANT) {
            if (eventType.equals(Vulnerability.NewCveHighCvssEvent)) {
                return Templates.newCveHighCvssEmailTitle();
            } else if (eventType.equals(Vulnerability.NewCveCritSeverityEvent)) {
                return Templates.newCveCritSeverityEmailTitle();
            } else if (eventType.equals(Vulnerability.NewCveSecurityRuleEvent)) {
                return Templates.newCveSecurityRuleTitle();
            } else if (eventType.equals(Vulnerability.AnyCveKnownExploitEvent)) {
                return Templates.anyCveKnownExploitTitle();
            }
        }

        throw new UnsupportedOperationException(String.format(
        "No email title template for Vulnerability event_type: %s and EmailSubscription: %s found.",
        eventType, type));
    }

    @Override
    public TemplateInstance getBody(String eventType, EmailSubscriptionType type) {
        if (type == EmailSubscriptionType.INSTANT) {
            if (eventType.equals(Vulnerability.NewCveHighCvssEvent)) {
                return Templates.newCveHighCvssEmailBody();
            } else if (eventType.equals(Vulnerability.NewCveCritSeverityEvent)) {
                return Templates.newCveCritSeverityEmailBody();
            } else if (eventType.equals(Vulnerability.NewCveSecurityRuleEvent)) {
                return Templates.newCveSecurityRuleBody();
            } else if (eventType.equals(Vulnerability.AnyCveKnownExploitEvent)) {
                return Templates.anyCveKnownExploitBody();
            }
        }

        throw new UnsupportedOperationException(String.format(
        "No email body template for Vulnerability event_type: %s and EmailSubscription: %s found.",
        eventType, type));
    }

    @Override
    public boolean isSupported(String eventType, EmailSubscriptionType type) {
        return (type == EmailSubscriptionType.INSTANT &&
                (eventType.equals(Vulnerability.NewCveHighCvssEvent) ||
                 eventType.equals(Vulnerability.NewCveCritSeverityEvent) ||
                 eventType.equals(Vulnerability.NewCveSecurityRuleEvent) ||
                 eventType.equals(Vulnerability.AnyCveKnownExploitEvent)));
    }

    @Override
    public boolean isEmailSubscriptionSupported(EmailSubscriptionType type) {
        return type == EmailSubscriptionType.INSTANT;
    }

    @CheckedTemplate(requireTypeSafeExpressions = false)
    public static class Templates {

        public static native TemplateInstance newCveHighCvssEmailTitle();

        public static native TemplateInstance newCveHighCvssEmailBody();

        public static native TemplateInstance newCveCritSeverityEmailTitle();

        public static native TemplateInstance newCveCritSeverityEmailBody();

        public static native TemplateInstance newCveSecurityRuleTitle();

        public static native TemplateInstance newCveSecurityRuleBody();

        public static native TemplateInstance anyCveKnownExploitTitle();

        public static native TemplateInstance anyCveKnownExploitBody();
    }
}
