package com.redhat.cloud.notifications.templates;

import com.redhat.cloud.notifications.config.FeatureFlipper;
import com.redhat.cloud.notifications.models.EmailSubscriptionType;
import io.quarkus.qute.CheckedTemplate;
import io.quarkus.qute.TemplateInstance;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;

@ApplicationScoped
public class Vulnerability implements EmailTemplate {

    protected static final String NEW_CVE_HIGH_CVSS_EVENT = "new-cve-cvss";
    protected static final String NEW_CVE_CRIT_SEVERITY_EVENT = "new-cve-severity";
    protected static final String NEW_CVE_SECURITY_RULE_EVENT = "new-cve-security-rule";
    protected static final String ANY_CVE_KNOWN_EXPLOIT_EVENT = "any-cve-known-exploit";

    @Inject
    FeatureFlipper featureFlipper;

    @Override
    public TemplateInstance getTitle(String eventType, EmailSubscriptionType type) {
        if (type == EmailSubscriptionType.INSTANT) {
            if (eventType.equals(Vulnerability.NEW_CVE_HIGH_CVSS_EVENT)) {
                return getNewCveHighCvssEmailTitle();
            } else if (eventType.equals(Vulnerability.NEW_CVE_CRIT_SEVERITY_EVENT)) {
                return getNewCveCritSeverityEmailTitle();
            } else if (eventType.equals(Vulnerability.NEW_CVE_SECURITY_RULE_EVENT)) {
                return getNewCveSecurityRuleTitle();
            } else if (eventType.equals(Vulnerability.ANY_CVE_KNOWN_EXPLOIT_EVENT)) {
                return getAnyCveKnownExploitTitle();
            }
        } else if (type == EmailSubscriptionType.DAILY) {
            return getDailyEmailTitle();
        }

        throw new UnsupportedOperationException(String.format(
        "No email title template for Vulnerability event_type: %s and EmailSubscription: %s found.",
        eventType, type));
    }

    @Override
    public TemplateInstance getBody(String eventType, EmailSubscriptionType type) {
        if (type == EmailSubscriptionType.INSTANT) {
            if (eventType.equals(Vulnerability.NEW_CVE_HIGH_CVSS_EVENT)) {
                return getNewCveHighCvssEmailBody();
            } else if (eventType.equals(Vulnerability.NEW_CVE_CRIT_SEVERITY_EVENT)) {
                return getNewCveCritSeverityEmailBody();
            } else if (eventType.equals(Vulnerability.NEW_CVE_SECURITY_RULE_EVENT)) {
                return getNewCveSecurityRuleBody();
            } else if (eventType.equals(Vulnerability.ANY_CVE_KNOWN_EXPLOIT_EVENT)) {
                return getAnyCveKnownExploitBody();
            }
        } else if (type == EmailSubscriptionType.DAILY) {
            return getDailyEmailBody();
        }

        throw new UnsupportedOperationException(String.format(
        "No email body template for Vulnerability event_type: %s and EmailSubscription: %s found.",
        eventType, type));
    }

    @Override
    public boolean isSupported(String eventType, EmailSubscriptionType type) {
        return (type == EmailSubscriptionType.INSTANT &&
                (eventType.equals(Vulnerability.NEW_CVE_HIGH_CVSS_EVENT) ||
                 eventType.equals(Vulnerability.NEW_CVE_CRIT_SEVERITY_EVENT) ||
                 eventType.equals(Vulnerability.NEW_CVE_SECURITY_RULE_EVENT) ||
                 eventType.equals(Vulnerability.ANY_CVE_KNOWN_EXPLOIT_EVENT))) ||
               (type == EmailSubscriptionType.DAILY);
    }

    @Override
    public boolean isEmailSubscriptionSupported(EmailSubscriptionType type) {
        return type == EmailSubscriptionType.INSTANT || type == EmailSubscriptionType.DAILY;
    }

    private TemplateInstance getNewCveHighCvssEmailBody() {
        if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
            return Templates.newCveHighCvssEmailBodyV2();
        }
        return Templates.newCveHighCvssEmailBody();
    }

    private TemplateInstance getNewCveCritSeverityEmailBody() {
        if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
            return Templates.newCveCritSeverityEmailBodyV2();
        }
        return Templates.newCveCritSeverityEmailBody();
    }

    private TemplateInstance getNewCveSecurityRuleBody() {
        if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
            return Templates.newCveSecurityRuleBodyV2();
        }
        return Templates.newCveSecurityRuleBody();
    }

    private TemplateInstance getAnyCveKnownExploitBody() {
        if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
            return Templates.anyCveKnownExploitBodyV2();
        }
        return Templates.anyCveKnownExploitBody();
    }

    private TemplateInstance getDailyEmailBody() {
        if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
            return Templates.dailyEmailBodyV2();
        }
        return Templates.dailyEmailBody();
    }

    private TemplateInstance getNewCveHighCvssEmailTitle() {
        if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
            return Templates.newCveHighCvssEmailTitleV2();
        }
        return Templates.newCveHighCvssEmailTitle();
    }

    private TemplateInstance getNewCveCritSeverityEmailTitle() {
        if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
            return Templates.newCveCritSeverityEmailTitleV2();
        }
        return Templates.newCveCritSeverityEmailTitle();
    }

    private TemplateInstance getNewCveSecurityRuleTitle() {
        if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
            return Templates.newCveSecurityRuleTitleV2();
        }
        return Templates.newCveSecurityRuleTitle();
    }

    private TemplateInstance getAnyCveKnownExploitTitle() {
        if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
            return Templates.anyCveKnownExploitTitleV2();
        }
        return Templates.anyCveKnownExploitTitle();
    }

    private TemplateInstance getDailyEmailTitle() {
        if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
            return Templates.dailyEmailTitleV2();
        }
        return Templates.dailyEmailTitle();
    }

    @CheckedTemplate(requireTypeSafeExpressions = false)
    public static class Templates {

        public static native TemplateInstance newCveHighCvssEmailTitle();

        public static native TemplateInstance newCveHighCvssEmailBody();

        public static native TemplateInstance newCveCritSeverityEmailTitle();

        public static native TemplateInstance newCveCritSeverityEmailBody();

        public static native TemplateInstance newCveSecurityRuleTitle();

        public static native TemplateInstance newCveSecurityRuleBody();

        public static native TemplateInstance anyCveKnownExploitTitle();

        public static native TemplateInstance anyCveKnownExploitBody();

        public static native TemplateInstance dailyEmailTitle();

        public static native TemplateInstance dailyEmailBody();

        public static native TemplateInstance newCveHighCvssEmailTitleV2();

        public static native TemplateInstance newCveHighCvssEmailBodyV2();

        public static native TemplateInstance newCveCritSeverityEmailTitleV2();

        public static native TemplateInstance newCveCritSeverityEmailBodyV2();

        public static native TemplateInstance newCveSecurityRuleTitleV2();

        public static native TemplateInstance newCveSecurityRuleBodyV2();

        public static native TemplateInstance anyCveKnownExploitTitleV2();

        public static native TemplateInstance anyCveKnownExploitBodyV2();

        public static native TemplateInstance dailyEmailTitleV2();

        public static native TemplateInstance dailyEmailBodyV2();
    }
}
