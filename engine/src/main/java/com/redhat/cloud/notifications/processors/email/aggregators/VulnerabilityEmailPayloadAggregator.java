package com.redhat.cloud.notifications.processors.email.aggregators;

import com.redhat.cloud.notifications.models.EmailAggregation;
import io.vertx.core.json.JsonObject;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class VulnerabilityEmailPayloadAggregator extends AbstractEmailPayloadAggregator {

    // Notification common
    private static final String EVENT_TYPE_KEY = "event_type";
    private static final String EVENTS_KEY = "events";
    private static final String PAYLOAD_KEY = "payload";

    // Vulnerability event payload
    private static final String REPORTED_CVE = "reported_cve";

    // Vulnerability aggregator
    private static final String VULNERABILITY_KEY = "vulnerability";
    private static final String REPORTED_CVES = "reported_cves";

    // Vulnerability event types
    private static final String CVSS_EVENT = "new-cve-cvss";
    private static final String SEVERITY_EVENT = "new-cve-severity";
    private static final String RULE_EVENT = "new-cve-security-rule";
    private static final String EXPLOITS_EVENT = "any-cve-known-exploit";
    private static final Set<String> EVENT_TYPES = new HashSet<>(
            Arrays.asList(CVSS_EVENT, SEVERITY_EVENT, RULE_EVENT, EXPLOITS_EVENT));

    // Vulnerability final payload helpers
    private final Set<String> uniqueCves = new HashSet<>();

    public VulnerabilityEmailPayloadAggregator() {
        JsonObject vulnerability = new JsonObject();

        context.put(VULNERABILITY_KEY, vulnerability);
    }

    @Override
    void processEmailAggregation(EmailAggregation notification) {
        JsonObject notifPayload = notification.getPayload();
        JsonObject vulnerability = context.getJsonObject(VULNERABILITY_KEY);
        String eventType = notifPayload.getString(EVENT_TYPE_KEY);

        if (!EVENT_TYPES.contains(eventType)) {
            return;
        }

        notifPayload.getJsonArray(EVENTS_KEY).stream().forEach(eventObject -> {
            JsonObject event = (JsonObject) eventObject;
            JsonObject payload = event.getJsonObject(PAYLOAD_KEY);

            String cve = payload.getString(REPORTED_CVE);
            uniqueCves.add(cve);
        });
        vulnerability.put(REPORTED_CVES, uniqueCves);
    }
}
