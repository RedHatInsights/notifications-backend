# Kafka bootstrap applies to all topics
kafka.bootstrap.servers=localhost:9092

quarkus.http.port=8087

# Change port for tests to avoid messing with local Kafka instance
%test.quarkus.http.port=9087
%test.quarkus.http.test-port=9087

mp.messaging.incoming.aggregation.connector=smallrye-kafka
mp.messaging.incoming.aggregation.topic=platform.notifications.aggregation
mp.messaging.incoming.aggregation.group.id=integrations
mp.messaging.incoming.aggregation.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.aggregation.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Input queue
mp.messaging.incoming.ingress.connector=smallrye-kafka
mp.messaging.incoming.ingress.topic=platform.notifications.ingress
mp.messaging.incoming.ingress.group.id=integrations
mp.messaging.incoming.ingress.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.ingress.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Output queue
mp.messaging.outgoing.egress.connector=smallrye-kafka
mp.messaging.outgoing.egress.topic=platform.notifications.ingress
mp.messaging.outgoing.egress.group.id=integrations
mp.messaging.outgoing.egress.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.egress.value.serializer=org.apache.kafka.common.serialization.StringSerializer
# Messages can be emitted on this topic from multiple emitters in our app
mp.messaging.outgoing.egress.merge=true

# Output queue to Camel (notifications-sender)
mp.messaging.outgoing.toCamel.connector=smallrye-kafka
mp.messaging.outgoing.toCamel.topic=platform.notifications.tocamel
mp.messaging.outgoing.toCamel.group.id=integrations
mp.messaging.outgoing.toCamel.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.toCamel.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.toCamel.cloud-events-source=notifications
mp.messaging.outgoing.toCamel.cloud-events-mode=structured

# Input queue from camel senders
mp.messaging.incoming.fromCamel.connector=smallrye-kafka
mp.messaging.incoming.fromCamel.topic=platform.notifications.fromcamel
mp.messaging.incoming.fromCamel.group.id=integrations
mp.messaging.incoming.fromCamel.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.fromCamel.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# configure your datasource
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=postgres
quarkus.datasource.password=postgres
quarkus.datasource.jdbc.url=jdbc:otel:postgresql://127.0.0.1:5432/notifications
quarkus.datasource.jdbc.driver=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver
quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQLDialect

# Flyway must NOT migrate the DB when the 'prod' profile is active, this is the responsibility of notifications-backend.
%dev.quarkus.flyway.migrate-at-start=true
%test.quarkus.flyway.migrate-at-start=true

quarkus.hibernate-orm.physical-naming-strategy=com.redhat.cloud.notifications.db.naming.SnakeCasePhysicalNamingStrategy

# Uncomment to log Hibernate SQL statements
#quarkus.hibernate-orm.log.sql=true

quarkus.http.access-log.enabled=true
quarkus.http.access-log.category=access_log
quarkus.http.access-log.pattern=combined
quarkus.log.category."com.redhat.cloud.notifications".level=INFO

%test.quarkus.http.access-log.category=info

# RBAC configuration used to retrieve email recipients. It is used when an email notification is sent.
#quarkus.rest-client.rbac-s2s.url=http://ci.foo.redhat.com:1337
quarkus.rest-client.rbac-s2s.url=${clowder.endpoints.rbac-service:https://ci.cloud.redhat.com}
quarkus.rest-client.rbac-s2s.connect-timeout=2000
quarkus.rest-client.rbac-s2s.read-timeout=120000

# IT User service
# these entries are needed because of a bug in quarkus: https://github.com/quarkusio/quarkus/issues/8384
%prod.quarkus.rest-client.it-s2s.url=FILL_ME
%prod.quarkus.rest-client.it-s2s.key-store=file:${QUARKUS_HTTP_SSL_CERTIFICATE_KEY_STORE_FILE:FILL_ME}
%prod.quarkus.rest-client.it-s2s.key-store-password=${QUARKUS_HTTP_SSL_CERTIFICATE_KEY_STORE_PASSWORD:FILL_ME}

# Used for service to service communication
rbac.service-to-service.application=notifications
recipient-provider.rbac.elements-per-page=40

# Quarkus since 1.11 redirects non-apps to /q/. We need to prevent this
quarkus.http.non-application-root-path=/

# Sentry logging. Off by default, enabled on OpenShift
# See https://quarkus.io/guides/logging-sentry#in-app-packages
quarkus.log.sentry=false
quarkus.log.sentry.in-app-packages=*
quarkus.log.sentry.dsn=FILL_ME

# BOP properties
processor.email.bop_url=https://backoffice-proxy.apps.ext.spoke.preprod.us-west-2.aws.paas.redhat.com
processor.email.bop_apitoken=addme
processor.email.bop_client_id=policies
processor.email.bop_env=qa
processor.email.no_reply=no-reply@redhat.com

# qute
quarkus.qute.property-not-found-strategy=throw-exception

quarkus.log.level=INFO
quarkus.log.cloudwatch.enabled=false
quarkus.log.cloudwatch.region=us-east-1
quarkus.log.cloudwatch.log-group=notificationsLogGroup
quarkus.log.cloudwatch.log-stream-name=notifications-backend
quarkus.log.cloudwatch.level=INFO
quarkus.log.cloudwatch.access-key-id=placeholder
quarkus.log.cloudwatch.access-key-secret=placeholder

quarkus.cache.caffeine.rbac-recipient-users-provider-get-users.expire-after-write=PT10M
quarkus.cache.caffeine.rbac-recipient-users-provider-get-group-users.expire-after-write=PT10M

quarkus.log.category."com.redhat.cloud.notifications.health.KafkaConsumedTotalChecker".level=DEBUG

# Should messages about failed injections be delivered as new events (and thus emails to admins)
reinject.enabled=false

%test.ob.enabled=true
ob.bridge.name=<name-of-the-bridge instance>
ob.token.client.id=<id of the service account>
ob.token.client.secret=<secret of the service account>

quarkus.rest-client.ob.url=https://bridge.acme.org
quarkus.rest-client.kc.url=https://keycloak.acme.org
quarkus.cache.caffeine.kc-cache.expire-after-write=PT120s
quarkus.cache.caffeine.from-open-bridge-history-filler.expire-after-write=PT24H

# Use this property to load the templates from the DB. Temp, to be removed soon.
notifications.use-templates-from-db=false

# Sources integration URLs and details. It is used to store the secrets' data for the camel and webhook endpoints.
quarkus.rest-client.sources.read-timeout=1000
quarkus.rest-client.sources.url=${clowder.endpoints.sources-api-svc:http://localhost:8000}

quarkus.opentelemetry.enabled=false
quarkus.opentelemetry.tracer.exporter.otlp.endpoint=http://localhost:4317
