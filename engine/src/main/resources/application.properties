# Uncomment the following line to use a local Kafka instance.
#kafka.bootstrap.servers=localhost:9092
# Otherwise, the Kafka dev services from Quarkus will start a Kafka instance when the dev or test profiles are active.
quarkus.kafka.devservices.port=9092

quarkus.http.port=8087

# Change port for tests to avoid messing with local Kafka instance
%test.quarkus.http.port=9087
%test.quarkus.http.test-port=9087
%test.quarkus.devservices.enabled=true

# Input queue
mp.messaging.incoming.ingress.connector=smallrye-kafka
mp.messaging.incoming.ingress.topic=platform.notifications.ingress
mp.messaging.incoming.ingress.group.id=integrations
mp.messaging.incoming.ingress.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.ingress.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.ingress.cloud-events=false

# Output queue
mp.messaging.outgoing.egress.connector=smallrye-kafka
mp.messaging.outgoing.egress.topic=platform.notifications.ingress
mp.messaging.outgoing.egress.group.id=integrations
mp.messaging.outgoing.egress.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.egress.value.serializer=org.apache.kafka.common.serialization.StringSerializer
# Messages can be emitted on this topic from multiple emitters in our app
mp.messaging.outgoing.egress.merge=true

# Output queue to Camel (notifications-sender)
# The compression is enabled for the producers because some messages might end
# up being significantly big, like the ones for the email connector, which
# contain the fully rendered email.
mp.messaging.outgoing.tocamel.compression.type=snappy
mp.messaging.outgoing.tocamel.connector=smallrye-kafka
mp.messaging.outgoing.tocamel.topic=platform.notifications.tocamel
mp.messaging.outgoing.tocamel.group.id=integrations
mp.messaging.outgoing.tocamel.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.tocamel.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.tocamel.cloud-events-source=notifications
mp.messaging.outgoing.tocamel.cloud-events-mode=structured

# Output queue to the high volume topic (notifications-sender)
# The compression is enabled for the producers because some messages might end
# up being significantly big, like the ones for the email connector, which
# contain the fully rendered email.
mp.messaging.outgoing.highvolume.compression.type=snappy
mp.messaging.outgoing.highvolume.connector=smallrye-kafka
mp.messaging.outgoing.highvolume.topic=platform.notifications.connector.email.high.volume
mp.messaging.outgoing.highvolume.group.id=integrations
mp.messaging.outgoing.highvolume.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.highvolume.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.highvolume.cloud-events-source=notifications
mp.messaging.outgoing.highvolume.cloud-events-mode=structured

# Input queue from camel senders
mp.messaging.incoming.fromcamel.connector=smallrye-kafka
mp.messaging.incoming.fromcamel.topic=platform.notifications.fromcamel
mp.messaging.incoming.fromcamel.group.id=integrations
mp.messaging.incoming.fromcamel.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.fromcamel.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.fromcamel.cloud-events=false

# Input queue for the "export requests" coming from the export service.
mp.messaging.incoming.exportrequests.connector=smallrye-kafka
mp.messaging.incoming.exportrequests.enabled=false
mp.messaging.incoming.exportrequests.topic=platform.export.requests
mp.messaging.incoming.exportrequests.group.id=integrations
mp.messaging.incoming.exportrequests.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.exportrequests.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.exportrequests.cloud-events=false

feature-flags.expose-kafka-ssl-config-keys.enabled=true

# Enable the export request ingress in tests as otherwise they fail.
%test.mp.messaging.incoming.exportrequests.enabled=true

# configure your datasource
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=postgres
quarkus.datasource.password=postgres
quarkus.datasource.jdbc.url=jdbc:postgresql://127.0.0.1:5432/notifications
quarkus.datasource.jdbc.telemetry=false

# Flyway must NOT migrate the DB when the 'prod' profile is active, this is the responsibility of notifications-backend.
%dev.quarkus.flyway.migrate-at-start=true
%test.quarkus.flyway.migrate-at-start=true

quarkus.hibernate-orm.physical-naming-strategy=com.redhat.cloud.notifications.db.naming.SnakeCasePhysicalNamingStrategy

# Uncomment to log Hibernate SQL statements
#quarkus.hibernate-orm.log.sql=true

quarkus.http.access-log.enabled=true
quarkus.http.access-log.category=access_log
quarkus.http.access-log.pattern=combined
quarkus.log.category."com.redhat.cloud.notifications".level=INFO

%test.quarkus.http.access-log.category=info

# Quarkus since 1.11 redirects non-apps to /q/. We need to prevent this
quarkus.http.non-application-root-path=/

# Sentry logging. Off by default, enabled on OpenShift
# See https://quarkus.io/guides/logging-sentry#in-app-packages
quarkus.log.sentry=false
quarkus.log.sentry.in-app-packages=*
quarkus.log.sentry.dsn=FILL_ME

notifications.single.email.test.user=replace_me

# The URL for the recipients-resolver.
quarkus.rest-client.recipients-resolver.url=${clowder.endpoints.notifications-recipients-resolver-service.url:http://localhost:9008}
quarkus.rest-client.recipients-resolver.trust-store=${clowder.endpoints.notifications-recipients-resolver-service.trust-store-path}
quarkus.rest-client.recipients-resolver.trust-store-password=${clowder.endpoints.notifications-recipients-resolver-service.trust-store-password}
quarkus.rest-client.recipients-resolver.trust-store-type=${clowder.endpoints.notifications-recipients-resolver-service.trust-store-type}

# qute
quarkus.qute.property-not-found-strategy=throw-exception

quarkus.log.level=INFO
quarkus.log.cloudwatch.enabled=false
quarkus.log.cloudwatch.region=us-east-1
quarkus.log.cloudwatch.log-group=notificationsLogGroup
quarkus.log.cloudwatch.log-stream-name=${HOST_NAME:notifications-engine}
quarkus.log.cloudwatch.level=INFO
quarkus.log.cloudwatch.access-key-id=placeholder
quarkus.log.cloudwatch.access-key-secret=placeholder

quarkus.log.category."com.redhat.cloud.notifications.health.KafkaConsumedTotalChecker".level=DEBUG

# Use this property to load the templates from the DB. Temp, to be removed soon.
notifications.use-templates-from-db=false

quarkus.otel.exporter.otlp.traces.endpoint=http://localhost:4317
quarkus.otel.sdk.disabled=true
quarkus.otel.service.name=notifications-engine

%test.quarkus.mailer.auth-methods=DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 PLAIN LOGIN
%test.quarkus.mailer.host=smtp.gmail.com
%test.quarkus.mailer.port=587
%test.quarkus.mailer.start-tls=REQUIRED
%test.quarkus.mailer.username=REPLACE_ME
%test.quarkus.mailer.from=REPLACE_ME
%test.quarkus.mailer.password=REPLACE_ME
%test.quarkus.mailer.mock=false

# Rest client settings for the export service. When used locally, it should
# point to the private internal server.
# Export service's development PSK value. Specified here to avoid Quarkus from
# complaining that the configuration parameter is missing. In the case that you
# are using a real Export Service application to test the integration, you will
# need to set this PSK in the PSKS environment variable on that end.
export-service.psk=development-value-123
quarkus.rest-client.export-service.url=${clowder.optional-private-endpoints.export-service-service.url:http://localhost:10010}
quarkus.rest-client.export-service.trust-store=${clowder.optional-private-endpoints.export-service-service.trust-store-path}
quarkus.rest-client.export-service.trust-store-password=${clowder.optional-private-endpoints.export-service-service.trust-store-password}
quarkus.rest-client.export-service.trust-store-type=${clowder.optional-private-endpoints.export-service-service.trust-store-type}

# Quarkus caches
quarkus.cache.caffeine.drawer-template.expire-after-write=PT5M
quarkus.cache.caffeine.event-types-from-baet.expire-after-write=PT5M
quarkus.cache.caffeine.event-types-from-fqn.expire-after-write=PT5M
quarkus.cache.caffeine.instant-email-templates.expire-after-write=PT5M
quarkus.cache.caffeine.is-email-aggregation-supported.expire-after-write=PT5M
quarkus.cache.caffeine.recipients-resolver-results.expire-after-write=PT1M
quarkus.cache.caffeine.get-bundle-by-id.expire-after-write=PT15M
quarkus.cache.caffeine.get-app-by-name.expire-after-write=PT15M
quarkus.cache.caffeine.aggregation-target-email-subscription-endpoints.expire-after-write=PT5M

quarkus.unleash.active=false
quarkus.unleash.url=http://localhost:4242

%test.notifications.email.show.pendo.until.date=2000-01-01
