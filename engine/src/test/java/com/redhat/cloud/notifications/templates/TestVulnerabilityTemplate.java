package com.redhat.cloud.notifications.templates;

import com.redhat.cloud.notifications.TestHelpers;
import com.redhat.cloud.notifications.config.FeatureFlipper;
import com.redhat.cloud.notifications.ingress.Action;
import com.redhat.cloud.notifications.models.EmailSubscriptionType;
import com.redhat.cloud.notifications.templates.models.Environment;
import io.quarkus.qute.TemplateInstance;
import io.quarkus.test.junit.QuarkusTest;
import org.apache.commons.lang3.RandomStringUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import javax.inject.Inject;

import static com.redhat.cloud.notifications.templates.Vulnerability.ANY_CVE_KNOWN_EXPLOIT_EVENT;
import static com.redhat.cloud.notifications.templates.Vulnerability.NEW_CVE_CRIT_SEVERITY_EVENT;
import static com.redhat.cloud.notifications.templates.Vulnerability.NEW_CVE_HIGH_CVSS_EVENT;
import static com.redhat.cloud.notifications.templates.Vulnerability.NEW_CVE_SECURITY_RULE_EVENT;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

@QuarkusTest
public class TestVulnerabilityTemplate {

    private static final boolean SHOULD_WRITE_ON_FILE_FOR_DEBUG = false;

    private static final Action ACTION = TestHelpers.createVulnerabilityAction();

    @Inject
    Environment environment;

    @Inject
    FeatureFlipper featureFlipper;

    @Inject
    Vulnerability vulnerability;

    @BeforeEach
    void beforeEach() {
        featureFlipper.setVulnerabilityEmailTemplatesV2Enabled(false);
    }

    @Test
    public void testDailyDigestEmailTitle() {
        TemplateInstance templateInstance = vulnerability.getTitle(RandomStringUtils.randomAlphabetic(10), EmailSubscriptionType.DAILY);
        String result = generateEmail(templateInstance);
        writeEmailTemplate(result, templateInstance.getTemplate().getId());
        assertTrue(result.contains("Red Hat has published CVEs that require your attention"));

        // test template V2
        featureFlipper.setVulnerabilityEmailTemplatesV2Enabled(true);
        templateInstance = vulnerability.getTitle(RandomStringUtils.randomAlphabetic(10), EmailSubscriptionType.DAILY);
        result = generateEmail(templateInstance);
        writeEmailTemplate(result, templateInstance.getTemplate().getId());
        assertEquals("Daily digest - Vulnerability - Red Hat Enterprise Linux", result);
    }

    @Test
    public void testDailyDigestEmailBody() {
        TemplateInstance templateInstance = vulnerability.getBody(RandomStringUtils.randomAlphabetic(10), EmailSubscriptionType.DAILY);
        String result = generateEmail(templateInstance);
        writeEmailTemplate(result, templateInstance.getTemplate().getId());
        assertTrue(result.contains("Red Hat Insights has identified one or more CVEs that require your attention"));
        assertTrue(result.contains("CVE3"));

        // test template V2
        featureFlipper.setVulnerabilityEmailTemplatesV2Enabled(true);
        templateInstance = vulnerability.getBody(RandomStringUtils.randomAlphabetic(10), EmailSubscriptionType.DAILY);
        result = generateEmail(templateInstance);
        writeEmailTemplate(result, templateInstance.getTemplate().getId());
        assertTrue(result.contains("Red Hat Insights has identified one or more CVEs that require your attention"));
        assertTrue(result.contains("CVE3"));
        assertTrue(result.contains(TestHelpers.HCC_LOGO_TARGET));
    }

    @ValueSource(strings = { ANY_CVE_KNOWN_EXPLOIT_EVENT, NEW_CVE_CRIT_SEVERITY_EVENT, NEW_CVE_HIGH_CVSS_EVENT, NEW_CVE_SECURITY_RULE_EVENT })
    @ParameterizedTest
    public void testInstantEmailTitle(String eventType) {
        TemplateInstance templateInstance = vulnerability.getTitle(eventType, EmailSubscriptionType.INSTANT);
        String result = generateEmail(templateInstance);
        writeEmailTemplate(result, templateInstance.getTemplate().getId());
        testTitle(eventType, result);

        // test template V2
        featureFlipper.setVulnerabilityEmailTemplatesV2Enabled(true);
        templateInstance = vulnerability.getTitle(eventType, EmailSubscriptionType.INSTANT);
        result = generateEmail(templateInstance);
        writeEmailTemplate(result, templateInstance.getTemplate().getId());
        testTitle(eventType, result);
    }

    private void testTitle(String eventType, String result) {
        switch (eventType) {
            case ANY_CVE_KNOWN_EXPLOIT_EVENT:
                if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
                    assertEquals("Instant notification - CVE with the \"Known Exploit\" flag - Vulnerability - Red Hat Enterprise Linux", result);
                } else {
                    assertTrue(result.contains("Red Hat has recently identified a CVE with the “Known Exploit” flag"));
                }
                break;
            case NEW_CVE_CRIT_SEVERITY_EVENT:
                if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
                    assertEquals("Instant notification - CVE with Critical severity - Vulnerability - Red Hat Enterprise Linux", result);
                } else {
                    assertTrue(result.contains("Red Hat has published a CVE with Critical severity"));
                }
                break;
            case NEW_CVE_HIGH_CVSS_EVENT:
                if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
                    assertEquals("Instant notification - CVE with CVSS >= 7.0 - Vulnerability - Red Hat Enterprise Linux", result);
                } else {
                    assertTrue(result.contains("Red Hat has published a CVE with CVSS >= 7.0"));
                }
                break;
            case NEW_CVE_SECURITY_RULE_EVENT:
                if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
                    assertEquals("Instant notification - New Security rule - Vulnerability - Red Hat Enterprise Linux", result);
                } else {
                    assertTrue(result.contains("Red Hat has published a new Security rule that should be reviewed"));
                }
                break;
            default:
                fail();
                break;
        }
    }

    @ValueSource(strings = { ANY_CVE_KNOWN_EXPLOIT_EVENT, NEW_CVE_CRIT_SEVERITY_EVENT, NEW_CVE_HIGH_CVSS_EVENT, NEW_CVE_SECURITY_RULE_EVENT })
    @ParameterizedTest
    public void testInstantEmailBody(String eventType) {
        TemplateInstance templateInstance = vulnerability.getBody(eventType, EmailSubscriptionType.INSTANT);
        String result = generateEmail(templateInstance);
        writeEmailTemplate(result, templateInstance.getTemplate().getId());
        testBody(eventType, result);

        // test template V2
        featureFlipper.setVulnerabilityEmailTemplatesV2Enabled(true);
        templateInstance = vulnerability.getBody(eventType, EmailSubscriptionType.INSTANT);
        result = generateEmail(templateInstance);
        writeEmailTemplate(result, templateInstance.getTemplate().getId());
        testBody(eventType, result);
    }

    private void testBody(String eventType, String result) {
        assertTrue(result.contains(ACTION.getEvents().get(0).getPayload().getAdditionalProperties().get("reported_cve").toString()));
        switch (eventType) {
            case ANY_CVE_KNOWN_EXPLOIT_EVENT:
                assertTrue(result.contains("Red Hat Insights has just identified a CVE with the Known Exploit label"));
                if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
                    assertTrue(result.contains(TestHelpers.HCC_LOGO_TARGET));
                }
                break;
            case NEW_CVE_CRIT_SEVERITY_EVENT:
                assertTrue(result.contains("Red Hat Insights has just identified a CVE with a severity of Critical"));
                if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
                    assertTrue(result.contains(TestHelpers.HCC_LOGO_TARGET));
                }
                break;
            case NEW_CVE_HIGH_CVSS_EVENT:
                assertTrue(result.contains("Red Hat Insights has just identified a CVE with a CVSS score of >= 7"));
                if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
                    assertTrue(result.contains(TestHelpers.HCC_LOGO_TARGET));
                }
                break;
            case NEW_CVE_SECURITY_RULE_EVENT:
                assertTrue(result.contains("Red Hat Insights has just identified a newly published CVE with the Security rule label"));
                if (featureFlipper.isVulnerabilityEmailTemplatesV2Enabled()) {
                    assertTrue(result.contains(TestHelpers.HCC_LOGO_TARGET));
                }
                break;
            default:
                fail();
                break;
        }
    }

    private String generateEmail(TemplateInstance template) {
        return template
            .data("action", ACTION)
            .data("environment", environment)
            .render();
    }

    public void writeEmailTemplate(String result, String fileName) {
        if (SHOULD_WRITE_ON_FILE_FOR_DEBUG) {
            TestHelpers.writeEmailTemplate(result, fileName);
        }
    }
}
