package com.redhat.cloud.notifications.templates;

import com.redhat.cloud.notifications.EmailTemplatesInDbHelper;
import com.redhat.cloud.notifications.TestHelpers;
import com.redhat.cloud.notifications.ingress.Action;
import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

@QuarkusTest
public class TestVulnerabilityTemplate extends EmailTemplatesInDbHelper {

    private static final Action ACTION = TestHelpers.createVulnerabilityAction();

    static final String NEW_CVE_HIGH_CVSS_EVENT = "new-cve-cvss";
    static final String NEW_CVE_CRIT_SEVERITY_EVENT = "new-cve-severity";
    static final String NEW_CVE_SECURITY_RULE_EVENT = "new-cve-security-rule";
    static final String ANY_CVE_KNOWN_EXPLOIT_EVENT = "any-cve-known-exploit";

    @Override
    protected String getApp() {
        return "vulnerability";
    }

    @Override
    protected List<String> getUsedEventTypeNames() {
        return List.of(ANY_CVE_KNOWN_EXPLOIT_EVENT, NEW_CVE_CRIT_SEVERITY_EVENT, NEW_CVE_HIGH_CVSS_EVENT, NEW_CVE_SECURITY_RULE_EVENT);
    }

    @Test
    public void testDailyDigestEmailTitle() {
        String result = generateAggregatedEmailSubject(ACTION);
        assertEquals("Daily digest - Vulnerability - Red Hat Enterprise Linux", result);
    }

    @Test
    public void testDailyDigestEmailBody() {
        String result = generateAggregatedEmailBody(ACTION);
        assertTrue(result.contains("Red Hat Insights has identified one or more CVEs that require your attention"));
        assertTrue(result.contains("CVE3"));
        assertTrue(result.contains(TestHelpers.HCC_LOGO_TARGET));
    }

    @ValueSource(strings = { ANY_CVE_KNOWN_EXPLOIT_EVENT, NEW_CVE_CRIT_SEVERITY_EVENT, NEW_CVE_HIGH_CVSS_EVENT, NEW_CVE_SECURITY_RULE_EVENT })
    @ParameterizedTest
    public void testInstantEmailTitle(String eventType) {
        String result = generateEmailSubject(eventType, ACTION);
        testTitle(eventType, result);
    }

    private void testTitle(String eventType, String result) {
        switch (eventType) {
            case ANY_CVE_KNOWN_EXPLOIT_EVENT:
                assertEquals("Instant notification - CVE with the \"Known Exploit\" flag - Vulnerability - Red Hat Enterprise Linux", result);
                break;
            case NEW_CVE_CRIT_SEVERITY_EVENT:
                assertEquals("Instant notification - CVE with Critical severity - Vulnerability - Red Hat Enterprise Linux", result);
                break;
            case NEW_CVE_HIGH_CVSS_EVENT:
                assertEquals("Instant notification - CVE with CVSS >= 7.0 - Vulnerability - Red Hat Enterprise Linux", result);
                break;
            case NEW_CVE_SECURITY_RULE_EVENT:
                assertEquals("Instant notification - New Security rule - Vulnerability - Red Hat Enterprise Linux", result);
                break;
            default:
                fail();
                break;
        }
    }

    @ValueSource(strings = { ANY_CVE_KNOWN_EXPLOIT_EVENT, NEW_CVE_CRIT_SEVERITY_EVENT, NEW_CVE_HIGH_CVSS_EVENT, NEW_CVE_SECURITY_RULE_EVENT })
    @ParameterizedTest
    public void testInstantEmailBody(String eventType) {
        String result = generateEmailBody(eventType, ACTION);
        testBody(eventType, result);
    }

    private void testBody(String eventType, String result) {
        assertTrue(result.contains(ACTION.getEvents().get(0).getPayload().getAdditionalProperties().get("reported_cve").toString()));
        switch (eventType) {
            case ANY_CVE_KNOWN_EXPLOIT_EVENT:
                assertTrue(result.contains("Red Hat Insights has just identified a CVE with the Known Exploit label"));
                assertTrue(result.contains(TestHelpers.HCC_LOGO_TARGET));
                break;
            case NEW_CVE_CRIT_SEVERITY_EVENT:
                assertTrue(result.contains("Red Hat Insights has just identified a CVE with a severity of Critical"));
                assertTrue(result.contains(TestHelpers.HCC_LOGO_TARGET));
                break;
            case NEW_CVE_HIGH_CVSS_EVENT:
                assertTrue(result.contains("Red Hat Insights has just identified a CVE with a CVSS score of >= 7"));
                assertTrue(result.contains(TestHelpers.HCC_LOGO_TARGET));
                break;
            case NEW_CVE_SECURITY_RULE_EVENT:
                assertTrue(result.contains("Red Hat Insights has just identified a newly published CVE with the Security rule label"));
                assertTrue(result.contains(TestHelpers.HCC_LOGO_TARGET));
                break;
            default:
                fail();
                break;
        }
    }
}
