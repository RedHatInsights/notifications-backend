package com.redhat.cloud.notifications.templates;

import com.redhat.cloud.notifications.TestHelpers;
import com.redhat.cloud.notifications.config.FeatureFlipper;
import com.redhat.cloud.notifications.ingress.Action;
import com.redhat.cloud.notifications.models.EmailSubscriptionType;
import com.redhat.cloud.notifications.templates.models.Environment;
import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import javax.inject.Inject;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;


@QuarkusTest
public class TestMalwareDetectionTemplate {

    private static final boolean SHOULD_WRITE_ON_FILE_FOR_DEBUG = false;

    @Inject
    Environment environment;

    @Inject
    FeatureFlipper featureFlipper;

    @Inject
    MalwareDetection malwareDetection;

    @BeforeEach
    void beforeEach() {
        featureFlipper.setMalwareEmailTemplatesV2Enabled(false);
    }

    @Test
    public void testInstantEmailTitle() {
        Action action = TestHelpers.createMalwareDetectionAction();
        String result = malwareDetection.getTitle(MalwareDetection.DETECTED_MALWARE, EmailSubscriptionType.INSTANT)
            .data("action", action)
            .data("environment", environment)
            .render();
        writeEmailTemplate(result, malwareDetection.getTitle(MalwareDetection.DETECTED_MALWARE, EmailSubscriptionType.INSTANT).getTemplate().getId());

        assertTrue(result.startsWith("Malware Detection instant notification"));

        // test template V2
        featureFlipper.setMalwareEmailTemplatesV2Enabled(true);
        result =  malwareDetection.getTitle(MalwareDetection.DETECTED_MALWARE, EmailSubscriptionType.INSTANT)
            .data("action", action)
            .data("environment", environment)
            .render();
        writeEmailTemplate(result,  malwareDetection.getTitle(MalwareDetection.DETECTED_MALWARE, EmailSubscriptionType.INSTANT).getTemplate().getId());
        assertEquals("Instant notification - Malware Detection - Red Hat Enterprise Linux", result);
    }

    @Test
    public void testInstantEmailBody() {
        Action action = TestHelpers.createMalwareDetectionAction();
        String result = malwareDetection.getBody(MalwareDetection.DETECTED_MALWARE, EmailSubscriptionType.INSTANT)
            .data("action", action)
            .data("environment", environment)
            .data("user", Map.of("firstName", "Malware User", "lastName", "RHEL"))
            .render();
        writeEmailTemplate(result, malwareDetection.getBody(MalwareDetection.DETECTED_MALWARE, EmailSubscriptionType.INSTANT).getTemplate().getId());

        assertTrue(result.contains("Signature name"));
        assertTrue(result.contains("For more details, go to Malware Detection."));

        // test template V2
        featureFlipper.setMalwareEmailTemplatesV2Enabled(true);
        result = malwareDetection.getBody(MalwareDetection.DETECTED_MALWARE, EmailSubscriptionType.INSTANT)
            .data("action", action)
            .data("environment", environment)
            .data("user", Map.of("firstName", "Malware User", "lastName", "RHEL"))
            .render();
        writeEmailTemplate(result, malwareDetection.getBody(MalwareDetection.DETECTED_MALWARE, EmailSubscriptionType.INSTANT).getTemplate().getId());
        assertTrue(result.contains("Signature name"));
        assertTrue(result.contains("For more details, go to Malware Detection."));
        assertTrue(result.contains(TestHelpers.HCC_LOGO_TARGET));
    }

    public void writeEmailTemplate(String result, String fileName) {
        if (SHOULD_WRITE_ON_FILE_FOR_DEBUG) {
            TestHelpers.writeEmailTemplate(result, fileName);
        }
    }
}
