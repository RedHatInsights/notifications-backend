package com.redhat.cloud.notifications.processors.email.aggregators;

import com.redhat.cloud.notifications.VulnerabilityTestHelpers;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;

import static com.redhat.cloud.notifications.TestConstants.DEFAULT_ORG_ID;

public class VulnerabilityEmailPayloadAggregatorTest {

    private VulnerabilityEmailPayloadAggregator aggregator;

    private static final String CVSS_EVENT = "new-cve-cvss";
    private static final String SEVERITY_EVENT = "new-cve-severity";
    private static final String RULE_EVENT = "new-cve-security-rule";
    private static final String EXPLOITS_EVENT = "any-cve-known-exploit";

    private final String bundle = "rhel";
    private final String application = "vulnerability";

    @BeforeEach
    void setUp() {
        aggregator = new VulnerabilityEmailPayloadAggregator();
    }

    @Test
    void emptyAggregatorHasNoOrgId() {
        Assertions.assertNull(aggregator.getOrgId(), "Empty aggregator has no orgId");
    }

    @Test
    void shouldSetOrgId() {
        aggregator.aggregate(VulnerabilityTestHelpers.createEmailAggregation(bundle, application, CVSS_EVENT, "CVE-2021-0001"));
        Assertions.assertEquals(DEFAULT_ORG_ID, aggregator.getOrgId());
    }

    @Test
    void validatePayload() {
        List<String> testCves = List.of("CVE-2022-0001", "CVE-2022-0002", "CVE-2022-0003");

        // add a lot of cve events
        aggregator.aggregate(VulnerabilityTestHelpers.createEmailAggregation(bundle, application, CVSS_EVENT, testCves.get(0)));
        aggregator.aggregate(VulnerabilityTestHelpers.createEmailAggregation(bundle, application, EXPLOITS_EVENT, testCves.get(0)));
        aggregator.aggregate(VulnerabilityTestHelpers.createEmailAggregation(bundle, application, CVSS_EVENT, testCves.get(1)));
        aggregator.aggregate(VulnerabilityTestHelpers.createEmailAggregation(bundle, application, RULE_EVENT, testCves.get(1)));
        aggregator.aggregate(VulnerabilityTestHelpers.createEmailAggregation(bundle, application, EXPLOITS_EVENT, testCves.get(1)));
        aggregator.aggregate(VulnerabilityTestHelpers.createEmailAggregation(bundle, application, SEVERITY_EVENT, testCves.get(2)));

        List<String> uniqueCves = VulnerabilityTestHelpers.getReportedCves(aggregator);
        // we should get only unique CVEs
        Assertions.assertEquals(testCves.size(), uniqueCves.size());
        testCves.forEach(cve -> {
            Assertions.assertTrue(uniqueCves.contains(cve));
        });
    }
}
