---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: notifications-floorist
objects:
- apiVersion: metrics.console.redhat.com/v1alpha1
  kind: FloorPlan
  metadata:
    name: notifications
  spec:
    database:
      secretName: ${FLOORIST_DB_SECRET_NAME}
    objectStore:
      secretName: ${FLOORIST_BUCKET_SECRET_NAME}
    suspend: ${{FLOORIST_SUSPEND}}
    queries:
      # List the behavior groups and the event type they are associated with
      # of an organization. Includes the associated bundle and the application,
      # the organization the behavior groups belong to, the associated event
      # type the behavior groups are linked to, and whether they are being
      # actively used or not.
      - prefix: insights/notifications/behavior_groups_event_types
        query: >-
          SELECT
            bun.display_name::TEXT AS bundle,
            apps.display_name::TEXT AS application,
            et.display_name::TEXT AS event_type,
            bg.org_id::TEXT,
            EXISTS (
              SELECT
                1
              FROM
                behavior_group_action AS bga
              WHERE
                bga.behavior_group_id = etb.behavior_group_id
            )::BOOLEAN AS actively_used
          FROM
            event_type_behavior AS etb
          INNER JOIN
            event_type AS et
              ON et.id = etb.event_type_id
          INNER JOIN
            applications AS apps
              ON apps.id = et.application_id
          INNER JOIN
            behavior_group AS bg
              ON bg.id = etb.behavior_group_id
          INNER JOIN
            bundles AS bun
              ON bun.id = bg.bundle_id
        # Lists the email subscriptions. The associated bundle, application,
        # organization they belong to, the associated event type's name, the
        # type of the subscription, and whether the subscription is enabled or
        # not are returned.
      - prefix: insights/notifications/email_subscriptions
        query: >-
          SELECT
            bun.display_name::TEXT AS bundle,
            apps.display_name::TEXT AS application,
            es.org_id::TEXT,
            et.display_name::TEXT AS event_type,
            es.subscription_type::TEXT,
            es.subscribed::BOOLEAN
          FROM
            email_subscriptions AS es
          INNER JOIN
            event_type AS et
              ON et.id = es.event_type_id
          INNER JOIN
            applications AS apps
              ON apps.id = et.application_id
          INNER JOIN
            bundles AS bun
              ON bun.id = apps.bundle_id
      # List the endpoint types and whether they are being actively used or
      # not. We assume that an endpoint without any associated behavior groups
      # is not being used.
      #
      # We STRING_AGG all the potential event types in a single row, as
      # otherwise we would have stuff like:
      #
      # endpoint_id | event_type
      # a           | a
      # a           | b
      # a           | c
      #
      # And what we want is actually the following:
      #
      # endpoint_id | event_type
      # a           | a, b, c
      #
      # Also, the subqueries must go inside the parentheses so that the
      # "endpoints" table is the one that is left joined. This way, if there
      # are no behavior groups, behavior groups actions and consequently, event
      # types associated to the endpoint, the "event_type" column in the
      # selected results will simply be "null".
      #
      # Finally, we need to group the results by the endpoints' identifier so
      # that we can aggregate the multiple "event types" rows, as in this
      # particular query the main question to answer is "the number of
      # endpoints an organization has".
      - prefix: insights/notifications/endpoint_types
        query: >-
          SELECT
            CASE
              WHEN
                endpoint_type_v2 = 'CAMEL'
              THEN
                LOWER(endpoint_sub_type)::TEXT
              ELSE
                LOWER(endpoint_type_v2)::TEXT
            END AS endpoint_type,
            STRING_AGG(event_type.display_name, ', ') AS event_type,
            endpoints.org_id::TEXT,
            endpoints.enabled::TEXT AS enabled,
            EXISTS (
              SELECT
                1
              FROM
                behavior_group_action
              INNER JOIN
                event_type_behavior
                  ON event_type_behavior.behavior_group_id = behavior_group_action.behavior_group_id
              WHERE
                behavior_group_action.endpoint_id = endpoints.id
            )::BOOLEAN AS actively_used
          FROM
            endpoints
          LEFT JOIN (
            behavior_group_action
              INNER JOIN
                event_type_behavior
                  ON event_type_behavior.behavior_group_id = behavior_group_action.behavior_group_id
              INNER JOIN
                event_type
                  ON event_type_behavior.event_type_id  = event_type.id
          ) ON behavior_group_action.endpoint_id = endpoints.id
          GROUP BY
            endpoints.id
      # List the attempted notification deliveries. It shows the associated
      # bundle, the application, the endpoint type, the event type and the
      # delivery status.
      - prefix: insights/notifications/notifications_deliveries
        query: >-
          SELECT
            bun.display_name::TEXT AS bundle,
            apps.display_name::TEXT AS application,
            e.org_id::TEXT,
            CASE
              WHEN
                nh.endpoint_type_v2 = 'CAMEL'
              THEN
                LOWER(nh.endpoint_sub_type)
              ELSE
                LOWER(nh.endpoint_type_v2)
            END AS endpoint_type,
            et.display_name::TEXT AS event_type,
            nh.status::TEXT
          FROM
            notification_history AS nh
          INNER JOIN
            "event" AS e
              ON e.id = nh.event_id
          INNER JOIN
            event_type AS et
              ON et.id = e.event_type_id
          INNER JOIN
            applications AS apps
              ON apps.id = e.application_id
          INNER JOIN
            bundles AS bun
              ON bun.id = apps.bundle_id
      # List the events received from the integrated applications, as well as
      # the bundle and application the event is associated to, plus the event
      # type's name.
      - prefix: insights/notifications/received_events_from_applications
        query: >-
          SELECT
            bundles.display_name AS bundle,
            applications.display_name AS application,
            e.event_type_display_name AS event_type,
            e.org_id
          FROM
            "event" AS e
          INNER JOIN
            applications
              ON applications.id = e.application_id
          INNER JOIN
            bundles AS bundles
              ON bundles.id = e.bundle_id
      # Lists the event types that are currently being used. It also returns
      # the associated bundle, the application and the organization in which
      # those event types are being used.
      - prefix: insights/notifications/event_types_per_organization
        query: >-
          SELECT
            bundles.display_name::TEXT AS bundle,
            applications.display_name::TEXT AS application,
            event_type.display_name::TEXT AS event_type,
            behavior_group.org_id::TEXT
          FROM
            event_type
          INNER JOIN
            event_type_behavior AS etb
              ON etb.event_type_id = event_type.id
          INNER JOIN
            behavior_group_action AS bga
              ON bga.behavior_group_id = etb.behavior_group_id
          INNER JOIN
            behavior_group
              ON behavior_group.id = bga.behavior_group_id
          INNER JOIN
            applications
              ON applications.id = event_type.application_id
          INNER JOIN
            bundles
              ON bundles.id = applications.bundle_id
parameters:
- name: FLOORIST_BUCKET_SECRET_NAME
  description: Floorist's S3 bucket's secret name
  required: true
  value: dummy-secret
- name: FLOORIST_DB_SECRET_NAME
  description: The database's secret name specification for the Floorist operator.
  value: notifications-backend-db
- name: FLOORIST_LOGLEVEL
  description: Floorist loglevel config
  value: 'INFO'
- name: FLOORIST_SUSPEND
  description: Disable Floorist cronjob execution
  required: true
  value: 'true'
