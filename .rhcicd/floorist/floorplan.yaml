---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: notifications-floorist
objects:
- apiVersion: metrics.console.redhat.com/v1alpha1
  kind: FloorPlan
  metadata:
    name: notifications
  spec:
    database:
      secretName: ${FLOORIST_DB_SECRET_NAME}
    objectStore:
      secretName: ${FLOORIST_BUCKET_SECRET_NAME}
    resources:
      limits:
        cpu: ${FLOORIST_CPU_LIMIT}
        memory: ${FLOORIST_MEMORY_LIMIT}
      requests:
        cpu: ${FLOORIST_CPU_REQUEST}
        memory: ${FLOORIST_MEMORY_REQUEST}
    suspend: ${{FLOORIST_SUSPEND}}
    queries:
        # Lists the email subscriptions. The associated bundle, application,
        # organization they belong to, the associated event type's name, the
        # type of the subscription, and whether the subscription is enabled or
        # not are returned.
        #
        # The main information is in the email subscriptions table, and the
        # other joins just provide extra information.
      - prefix: insights/notifications/email_subscriptions
        query: >-
          SELECT
            bundles.display_name::TEXT AS bundle,
            applications.display_name::TEXT AS application,
            email_subscriptions.org_id::TEXT,
            event_type.display_name::TEXT AS event_type,
            email_subscriptions.subscription_type::TEXT,
            email_subscriptions.subscribed::BOOLEAN
          FROM
            email_subscriptions
          INNER JOIN
            event_type ON event_type.id = email_subscriptions.event_type_id
          INNER JOIN
            applications ON applications.id = event_type.application_id
          INNER JOIN
            bundles ON bundles.id = applications.bundle_id
      # List the integration types, whether they are being actively used or
      # not, and to which event types are associated to.

      # In order to know whether an integration is being used or not, we need
      # to check the "endpoint_event_type" table. As long as there is a record,
      # we know that the integration is being used to deliver notifications.
      #
      # The left joins help in the case that the integration has no event type
      # associated, so that we still can count those integrations.
      - prefix: insights/notifications/integration_types
        query: >-
          SELECT
            endpoints.id::TEXT AS integration_id,
            bundles.display_name::TEXT AS bundle,
            applications.display_name::TEXT AS application,
            CASE
              WHEN
                endpoint_type_v2 = 'CAMEL'
              THEN
                LOWER(endpoint_sub_type)::TEXT
              ELSE
                LOWER(endpoint_type_v2)::TEXT
            END AS integration_type,
            event_type.display_name AS event_type,
            endpoints.org_id::TEXT,
            endpoints.enabled::TEXT AS enabled,
            EXISTS (
              SELECT
                1
              FROM
                endpoint_event_type
              WHERE
                endpoint_event_type.endpoint_id = endpoints.id
            )::BOOLEAN AS active
          FROM
            endpoints
          LEFT JOIN
            endpoint_event_type
              ON endpoint_event_type.endpoint_id = endpoints.id
          LEFT JOIN
            event_type
              ON event_type.id = endpoint_event_type.event_type_id
          LEFT JOIN
            applications
              ON applications.id = event_type.application_id
          LEFT JOIN
            bundles
              ON bundles.id = applications.bundle_id

      # List the attempted notification deliveries. It shows the associated
      # bundle, the application, the endpoint type, the event type and the
      # delivery status.
      #
      # The "notification_history" table gathers all the delivery attempts made
      # by Notifications. Since it might be useful for tenants to know which
      # customers are sending the events, we need to join the "event" table for
      # that, which is the one that has that data.
      #
      # Then, the rest of the joins are just necessary to be able to provide
      # the extra information about the source bundle and application.
      - prefix: insights/notifications/notification_deliveries
        query: >-
          SELECT
            bundles.display_name::TEXT AS bundle,
            applications.display_name::TEXT AS application,
            ev.org_id::TEXT,
          CASE
            WHEN
              notification_history.endpoint_type_v2 = 'CAMEL'
            THEN
              LOWER(notification_history.endpoint_sub_type)
            ELSE
              LOWER(notification_history.endpoint_type_v2)
          END AS integration_type,
          event_type.display_name::TEXT AS event_type,
          notification_history.status::TEXT
          FROM
            notification_history
          INNER JOIN
            "event" AS ev ON ev.id = notification_history.event_id
          INNER JOIN
            event_type ON event_type.id = ev.event_type_id
          INNER JOIN
            applications ON applications.id = ev.application_id
          INNER JOIN
            bundles ON bundles.id = applications.bundle_id
      # List the events received from the integrated applications, as well as
      # the bundle and application the event is associated to, plus the event
      # type's name.
      #
      # Since we keep all the received events in the "event" table, we only
      # have to look that up to know which events we have been receiving and
      # from which source.
      - prefix: insights/notifications/received_events_from_applications
        query: >-
          SELECT
            bundles.display_name AS bundle,
            applications.display_name AS application,
            ev.event_type_display_name AS event_type,
            ev.org_id
          FROM
            "event" AS ev
          INNER JOIN
            applications ON applications.id = ev.application_id
          INNER JOIN
            bundles ON bundles.id = ev.bundle_id
      # Lists the event types that are currently being used. It also returns
      # the associated bundle, the application and the organization in which
      # those event types are being used.
      #
      # The way to know that an event type is being used is by checking if it
      # is associated to an integration. The "endpoint_event_type" table
      # gathers the integrations that are associated with an event type, so
      # that is why it is key to check it for the query.
      - prefix: insights/notifications/event_types_per_organization
        query: >-
          SELECT
            bundles.display_name::TEXT AS bundle,
            applications.display_name::TEXT AS application,
            event_type.display_name::TEXT AS event_type,
            endpoints.org_id::TEXT
          FROM
            event_type
          INNER JOIN
            endpoint_event_type ON endpoint_event_type.event_type_id = event_type.id
          INNER JOIN
            endpoints ON endpoints.id = endpoint_event_type.endpoint_id
          INNER JOIN
            applications ON applications.id = event_type.application_id
          INNER JOIN
            bundles ON bundles.id = applications.bundle_id
- apiVersion: metrics.console.redhat.com/v1alpha1
  kind: FloorPlan
  metadata:
    name: notifications-hms
  spec:
    database:
      secretName: ${FLOORIST_DB_SECRET_NAME}
    objectStore:
      secretName: ${FLOORIST_HMS_BUCKET_SECRET_NAME}
    resources:
      limits:
        cpu: ${FLOORIST_CPU_LIMIT}
        memory: ${FLOORIST_MEMORY_LIMIT}
      requests:
        cpu: ${FLOORIST_CPU_REQUEST}
        memory: ${FLOORIST_MEMORY_REQUEST}
    logLevel: ${FLOORIST_LOGLEVEL}
    suspend: ${{FLOORIST_SUSPEND}}
    queries:
    - prefix: hms_analytics/notifications/${FLOORIST_ENV_PREFIX}/notifications_deliveries
      chunksize: 1000
      query: >-
        SELECT
          bun.display_name::TEXT AS bundle,
          apps.display_name::TEXT AS application,
          e.org_id::TEXT,
          CASE
            WHEN
              nh.endpoint_type_v2 = 'CAMEL'
            THEN
              LOWER(nh.endpoint_sub_type)
            ELSE
              LOWER(nh.endpoint_type_v2)
          END AS endpoint_type,
          et.name::TEXT AS event_type,
          nh.status::TEXT,
          e.created::DATE,
          COUNT(*) AS count
        FROM
          notification_history AS nh
        INNER JOIN
          "event" AS e
            ON e.id = nh.event_id
        INNER JOIN
          event_type AS et
            ON et.id = e.event_type_id
        INNER JOIN
          applications AS apps
            ON apps.id = e.application_id
        INNER JOIN
          bundles AS bun
            ON bun.id = apps.bundle_id
        WHERE e.created > (CURRENT_DATE - INTERVAL '7 days')
        GROUP BY
          bun.display_name, apps.display_name, e.org_id, nh.endpoint_type_v2,
          nh.endpoint_sub_type, et.name, nh.status, e.created::DATE

parameters:
- name: FLOORIST_BUCKET_SECRET_NAME
  description: Floorist's S3 bucket's secret name
  required: true
  value: dummy-secret
- name: FLOORIST_CPU_REQUEST
  description: The amount of minimum CPU requested for running the FloorPlan.
  value: 50m
- name: FLOORIST_CPU_LIMIT
  description: The maximum amount of CPU that the FloorPlan is allowed to use before it gets throttled.
  value: 100m
- name: FLOORIST_DB_SECRET_NAME
  description: The database's secret name specification for the Floorist operator.
  value: notifications-backend-db
- name: FLOORIST_ENV_PREFIX
  description: Used to split data across environments on a single (HMS) bucket.
  value: stage
- name: FLOORIST_HMS_BUCKET_SECRET_NAME
  description: HMS bucket secret name
  value: floorist-bucket
- name: FLOORIST_LOGLEVEL
  description: Floorist loglevel config
  value: 'INFO'
- name: FLOORIST_MEMORY_REQUEST
  description: The amount of minimum memory requested for running the FloorPlan.
  value: 250Mi
- name: FLOORIST_MEMORY_LIMIT
  description: The maximum amount of memory that the FloorPlan is allowed to use before getting "out of memory" errors.
  value: 500Mi
- name: FLOORIST_SUSPEND
  description: Disable Floorist cronjob execution
  required: true
  value: 'true'
