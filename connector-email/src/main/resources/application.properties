# Email Connector Configuration - Quarkus-based

notifications.connector.http.client-error.log-level=ERROR
notifications.connector.http.server-error.log-level=ERROR
notifications.connector.kafka.incoming.group-id=notifications-connector-email
notifications.connector.kafka.incoming.high-volume.topic=${mp.messaging.high-volume.topic}
notifications.connector.kafka.incoming.topic=${mp.messaging.tocamel.topic}
notifications.connector.kafka.outgoing.topic=${mp.messaging.fromcamel.topic}
notifications.connector.name=email_subscription
notifications.connector.redelivery.counter-name=camel.email.retry.counter
# The following value matches the default value of the `connectionsPerRoute` option from the Camel `http` component.
notifications.connector.seda.concurrent-consumers=20
# The following value matches the default value of the `connectionsPerRoute` option from the Camel `http` component.
notifications.connector.seda.queue-size=20
notifications.connector.supported-connector-headers=${notifications.connector.name}
# Re-injections should not be enabled for this connector
notifications.connector.kafka.maximum-reinjections=0

quarkus.http.port=9003

quarkus.log.cloudwatch.enabled=false
quarkus.log.cloudwatch.level=INFO
quarkus.log.cloudwatch.log-stream-name=${HOST_NAME:notifications-connector-email}

quarkus.log.sentry.enabled=false
quarkus.log.sentry.in-app-packages=com.redhat.cloud.notifications

quarkus.kafka.devservices.port=9092

# Kafka messaging configuration
mp.messaging.incoming.incoming-notifications.connector=smallrye-kafka
mp.messaging.incoming.incoming-notifications.topic=${CONNECTOR_INCOMING_TOPIC:platform.notifications.tocamel}
mp.messaging.incoming.incoming-notifications.group.id=${CONNECTOR_GROUP_ID:integrations}
mp.messaging.incoming.incoming-notifications.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.incoming-notifications.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.incoming-notifications.cloud-events=true
mp.messaging.incoming.incoming-notifications.auto.offset.reset=earliest
mp.messaging.incoming.incoming-notifications.enable.auto.commit=true

# Outgoing Kafka configuration
mp.messaging.outgoing.outgoing-notifications.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-notifications.topic=${CONNECTOR_OUTGOING_TOPIC:platform.notifications.fromcamel}
mp.messaging.outgoing.outgoing-notifications.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-notifications.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-notifications.cloud-events=true

# BOP REST client configuration
quarkus.rest-client.bop-client.url=${BOP_URL:http://localhost:8080}
quarkus.rest-client.bop-client.connection-pool-size=20
quarkus.rest-client.bop-client.connection-ttl=30s
quarkus.rest-client.bop-client.max-redirects=3

# Recipients Resolver REST client configuration
quarkus.rest-client.recipients-resolver-client.url=${RECIPIENTS_RESOLVER_URL:http://localhost:9008}
quarkus.rest-client.recipients-resolver-client.connection-pool-size=20
quarkus.rest-client.recipients-resolver-client.connection-ttl=30s
quarkus.rest-client.recipients-resolver-client.max-redirects=3

# Fault tolerance configuration
quarkus.smallrye-fault-tolerance.timeout=30s
quarkus.smallrye-fault-tolerance.retry.max-retries=3
quarkus.smallrye-fault-tolerance.retry.delay=1s
quarkus.smallrye-fault-tolerance.retry.max-duration=10s
quarkus.smallrye-fault-tolerance.circuit-breaker.failure-threshold=5
quarkus.smallrye-fault-tolerance.circuit-breaker.delay=5s

# Metrics configuration
quarkus.micrometer.export.prometheus.enabled=true
quarkus.micrometer.export.prometheus.path=/q/metrics

# Logging configuration
quarkus.log.level=INFO
quarkus.log.category."com.redhat.cloud.notifications.connector.email".level=DEBUG

# Health check configuration
quarkus.smallrye-health.ui.enable=true

# Email connector specific configuration
email.connector.simplified-management.enabled=${EMAIL_SIMPLIFIED_MANAGEMENT_ENABLED:false}
email.connector.bop.timeout=${EMAIL_BOP_TIMEOUT:30s}
email.connector.recipients-resolver.timeout=${EMAIL_RECIPIENTS_RESOLVER_TIMEOUT:10s}

camel.context.name=notifications-connector-email

mp.messaging.high-volume.topic=platform.notifications.connector.email.high.volume
mp.messaging.tocamel.topic=platform.notifications.tocamel
mp.messaging.fromcamel.topic=platform.notifications.fromcamel

# Bop configuration
notifications.connector.user-provider.bop.url=https://backoffice-proxy.apps.ext.spoke.preprod.us-west-2.aws.paas.redhat.com
quarkus.rest-client.bop.url=https://backoffice-proxy.apps.ext.spoke.preprod.us-west-2.aws.paas.redhat.com
# For some environments, bop uses same certificates as recipients-resolver because they are hosted in the same cluster.
quarkus.rest-client.bop.trust-store=${clowder.endpoints.notifications-recipients-resolver-service.trust-store-path}
quarkus.rest-client.bop.trust-store-password=${clowder.endpoints.notifications-recipients-resolver-service.trust-store-password}
quarkus.rest-client.bop.trust-store-type=${clowder.endpoints.notifications-recipients-resolver-service.trust-store-type}
notifications.connector.user-provider.bop.api_token=changeme
notifications.connector.user-provider.bop.client_id=changeme
notifications.connector.user-provider.bop.env=changeme

# The URL for the recipients-resolver using camel integration
notifications.connector.recipients-resolver.url=${clowder.endpoints.notifications-recipients-resolver-service.url:http://localhost:9008}
# The URL for the recipients-resolver using rest client integration
quarkus.rest-client.recipients-resolver.url=${clowder.endpoints.notifications-recipients-resolver-service.url:http://localhost:9008}
quarkus.rest-client.recipients-resolver.trust-store=${clowder.endpoints.notifications-recipients-resolver-service.trust-store-path}
quarkus.rest-client.recipients-resolver.trust-store-password=${clowder.endpoints.notifications-recipients-resolver-service.trust-store-password}
quarkus.rest-client.recipients-resolver.trust-store-type=${clowder.endpoints.notifications-recipients-resolver-service.trust-store-type}

quarkus.unleash.active=false
quarkus.unleash.url=http://localhost:4242

# The engine's hostname in order to be able to fetch the event's payloads from it.
quarkus.rest-client.engine.url=${clowder.endpoints.notifications-engine-service.url:http://localhost:8087}
