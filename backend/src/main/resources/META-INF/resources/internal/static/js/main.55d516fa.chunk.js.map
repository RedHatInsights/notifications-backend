{"version":3,"sources":["generated/OpenapiInternal.ts","pages/AggregationPage.tsx","app/PermissionContext.ts","components/EmailTemplates/EmailTemplateCard.tsx","services/EmailTemplates/GetTemplates.tsx","components/EmailTemplates/ViewEmailTemplateModal.tsx","components/EmailTemplates/EmailTemplateTable.tsx","components/EventTypes/CreateEditModal.tsx","components/EventTypes/DeleteModal.tsx","components/EventTypes/Table/EventTypeExpandableRow.tsx","components/EventTypes/Table/InstantEmailCell.tsx","components/EventTypes/EventTypeTable.tsx","components/Wrappers/LinkAdapter.tsx","components/Wrappers/BreadCrumbLinkItem.tsx","services/EmailTemplates/GetAggregationTemplates.tsx","services/EventTypes/CreateEventTypes.ts","services/EventTypes/DeleteEventType.ts","services/EventTypes/GetApplication.ts","services/EventTypes/GetBundleAction.ts","services/EventTypes/GetEventTypes.ts","components/Applications/CreateEditApplicationModal.tsx","components/Applications/DeleteApplicationModal.tsx","components/EventTypes/ListEventTypes.tsx","services/Applications/CreateApplication.ts","services/Applications/DeleteApplication.ts","services/Applications/GetApplicationById.ts","services/Applications/GetBundleById.ts","pages/EmailTemplatePage.tsx","pages/MessageValidatorPage.tsx","services/RenderEmailRequest.ts","pages/RenderEmailPage.tsx","Routes.tsx","pages/ApplicationPage.tsx","pages/ApplicationPage/useEventTypes.ts","pages/BundlePage.tsx","app/Navigation.tsx","app/redhat-logo.svg","app/App.tsx","services/EventTypes/GetBundles.ts","services/ServerInfo.ts","services/Permissions.ts","index.tsx"],"names":["aggregationTemplate","trimLeft","PermissionContext","React","isAdmin","applications","roles","refresh","Error","useUserPermissions","permission","useContext","hasPermission","useCallback","appId","undefined","find","a","id","AggregationTemplateCard","props","PageSection","Title","headingLevel","Breadcrumb","BreadcrumbItem","target","applicationName","Card","CardHeader","CardBody","bundleName","templateName","z","application_id","zodSchemaUUID","optional","nullable","role","nonstrict","bundle_id","display_name","name","owner_role","application","zodSchemaApplication1","body_template","zodSchemaTemplate","body_template_id","created","subject_template","subject_template_id","subscription_type","zodSchemaEmailSubscriptionType","updated","zodSchemaApplication","zodSchemaBasicAuthentication","actions","zodSchemaBehaviorGroupAction","bundle","zodSchemaBundle","default_behavior","zodSchemaBehaviorGroupActionId","zodSchemaCamelProperties","end_time","start_time","status","zodSchemaStatus","zodSchemaEmailSubscriptionProperties","zodSchemaEndpoint","data","links","meta","zodSchemaMeta","zodSchemaEndpointType","zodSchemaEnvironment","zodSchemaEventLogEntry","zodSchemaEventLogEntryAction","zodSchemaEventType","zodSchemaFacet","children","displayName","zodSchemaHttpType","event_type","event_type_id","application_display_name","is_admin","errors","details","endpointId","endpointSubType","endpointType","invocationResult","invocationTime","int","payload","ignore_preferences","only_admins","group_id","environment","zodSchemaWebhookProperties","max","password","username","endpoint","behaviorGroupId","basic_authentication","disable_ssl_verification","extras","secret_token","sub_type","url","description","enabled","properties","type","endpoint_id","endpoint_sub_type","endpoint_type","invocation_result","count","method","Schemas","InternalResourceHttpRoot","actionBuilder","queryParams","config","rules","ValidateRule","__Empty","build","Response200","InternalApplicationUserPermission","InternalPermissionResourceGetAccessList","InternalPermissionResourceAddAccess","params","body","InternalRoleAccess","InternalPermissionResourceGetPermissions","InternalUserPermissions","InternalPermissionResourceDeleteAccess","path","replace","internalRoleAccessId","toString","AdminResourceDebugRbac","query","rhid","AdminResourceSetAdminDown","AdminResourceMigrate","AdminResourceDeleteAllTemplates","InternalResourceCreateApplication","Application1","InternalResourceGetApplication","InternalResourceUpdateApplication","InternalResourceDeleteApplication","EventType","InternalResourceGetEventTypes","BehaviorGroup","InternalResourceGetDefaultBehaviorGroups","InternalResourceCreateDefaultBehaviorGroup","RequestDefaultBehaviorGroupPropertyList","InternalResourceUpdateDefaultBehaviorGroupActions","eventTypeId","InternalResourceLinkDefaultBehaviorToEventType","InternalResourceUnlinkDefaultBehaviorToEventType","InternalResourceUpdateDefaultBehaviorGroup","InternalResourceDeleteDefaultBehaviorGroup","Bundle","InternalResourceGetBundles","InternalResourceCreateBundle","InternalResourceGetBundle","bundleId","InternalResourceUpdateBundle","InternalResourceDeleteBundle","InternalResourceGetApplications","InternalResourceCreateEventType","InternalResourceUpdateEventType","InternalResourceDeleteEventType","InternalResourceGetServerInfo","ServerInfo","InternalResourceSetCurrentStatus","Template","TemplateResourceGetAllTemplates","TemplateResourceCreateTemplate","AggregationEmailTemplate","TemplateResourceGetAllAggregationEmailTemplates","TemplateResourceCreateAggregationEmailTemplate","TemplateResourceGetAggregationEmailTemplatesByApplication","TemplateResourceGetAggregationemailTemplate","templateId","TemplateResourceUpdateAggregationEmailTemplate","TemplateResourceDeleteAggregationEmailTemplate","InstantEmailTemplate","applicationId","TemplateResourceGetAllInstantEmailTemplates","TemplateResourceCreateInstantEmailTemplate","Response404","TemplateResourceGetInstantEmailTemplateByEventType","TemplateResourceGetInstantEmailTemplate","TemplateResourceUpdateInstantEmailTemplate","TemplateResourceDeleteInstantEmailTemplate","subject","Response400","message","TemplateResourceRenderEmailTemplate","TemplateResourceGetTemplate","TemplateResourceUpdateTemplate","TemplateResourceDeleteTemplate","ValidationResourceValidate","eventType","ValidationResourceValidateMessage","MessageValidationResponse","InternalResourceGetVersion","Operations","validateResponse","validationResponseTransformer","emailTemplates","value","map","validatedResponse","ViewTemplateModal","Fragment","Modal","variant","ModalVariant","medium","title","isOpen","showModal","onClose","Form","isHorizontal","ActionGroup","Button","onClick","InstantEmailTemplateTable","getAllTemplates","useQuery","actionCreator","queryPayload","useMemo","useGetTemplates","showViewModal","setShowViewModal","viewModal","loading","Spinner","errorObject","TableComposable","aria-label","Thead","Toolbar","ToolbarContent","ToolbarItem","isDisabled","component","to","linkTo","Tr","column","columnIndex","Th","Tbody","e","Td","className","CreateEditModal","useState","initialEventType","setEventType","handleChange","event","prev","onSubmitLocal","onSubmit","useEffect","isEdit","FormGroup","label","fieldId","isRequired","helperText","HelperText","HelperTextItem","hasIcon","TextInput","onChange","TextArea","isLoading","DeleteModal","setErrors","onDelete","onDeleteImpl","alert","small","titleIconVariant","eventTypeName","EventTypeExpandableRow","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","InstantEmailCell","instantEmail","EventTypeTableLayout","createEventTypeButton","EventTypeTableImpl","eventTypes","length","colSpan","EmptyState","EmptyStateBody","rowIndex","expand","isExpanded","tableData","onToggle","onExpandToggle","ActionList","isIconList","ActionListItem","ButtonVariant","plain","hasPermissions","onEditEventType","onDeleteEventTypeModal","ExpandableRowContent","EventTypeTableSkeleton","Array","from","_","colIndex","Skeleton","EventTypeTable","setTableData","primary","onCreateEventType","Object","fromEntries","onExpandedToggle","_event","produce","draft","LinkAdapter","href","restProps","BreadcrumbLinkItem","aggregationTemplates","deleteEventTypeActionCreator","applicationTypes","getBundleAction","useEventTypes","CreateEditApplicationModal","permissions","initialApplication","setApplication","ownerRole","FormSelect","r","FormSelectOption","DeleteApplicationModal","ListEventTypes","getEventTypes","ChipGroup","Chip","isReadOnly","deleteApplicationActionCreator","bundleTypes","defaultSubjectTemplate","defaultBodyTemplate","defaultPayload","JSON","stringify","timestamp","account_id","context","events","metadata","renderErrors","sortedKeys","keys","sort","flatErrors","forEach","key","error","push","List","index","ListItem","RenderedTemplate","succeeded","StackItem","width","srcDoc","aggregation","email","messageValidator","pathRoutes","onEditorDidMount","editor","monaco","layout","focus","getModels","updateOptions","tabSize","_value","controls","CodeEditorControl","icon","toolTipText","console","log","isVisible","CodeEditor","isDownloadEnabled","isUploadEnabled","customControls","isLineNumbersVisible","isLanguageLabelVisible","isMinimapVisible","language","Language","javascript","code","height","useParams","eventTypesQuery","eventTypeRows","setEventTypeRows","useGetEventTypes","useClient","row","then","result","originalValue","original","findIndex","reload","applicationTypesQuery","useApplicationTypes","deleteEventTypeMutation","useMutation","newEvent","useAggregationTemplates","setEventTypes","setShowModal","setIsEdit","showDeleteModal","setShowDeleteModal","getBundleId","bundleNameQuery","useParameterizedQuery","aggregationEmailTemplates","handleSubmit","mutate","handleDelete","deleteEventType","isActive","getBundles","useBundleTypes","getApplications","useApplications","newApplication","deleteApplicationMutation","deleteApplication","editApplication","deleteApplicationModal","renderedProps","emailTemplate","subjectTemplate","setSubjectTemplate","bodyTemplate","setBodyTemplate","setPayload","onRender","Split","SplitItem","isFilled","Stack","json","handleBackClick","history","back","hasGutter","validationStatus","validationMessage","validateService","setMessage","validationResult","setValidationResult","runValidation","jsonMessage","parse","$","response","validatePayloadButton","color","global_palette_green_400","AlertVariant","success","danger","warning","Alert","isInline","showEditor","isCopyEnabled","Routes","_props","pathRoute","EnhancedNavItem","match","useRouteMatch","exact","NavItem","Navigation","Nav","NavList","NavExpandable","bundles","b","brandClassName","style","App","isNavOpen","setNavOpen","onNavToggle","client","mounted","useUnmountPromise","setBundles","setLoading","cQuery","bundleResponse","applicationsPromises","Promise","all","applicationResponses","reducedBundles","reduce","draftBundles","draftBundle","resolve","useBundles","serverInfo","show","content","permissionQuery","appHeader","PageHeader","showNavToggle","logo","Brand","src","alt","logoProps","Page","header","appSidebar","PageSidebar","nav","Provider","sidebar","createClient","responseInterceptors","validateSchemaResponseInterceptor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55d516fa.chunk.js","sourcesContent":["/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const AddAccessRequest = zodSchemaAddAccessRequest();\n  export type AddAccessRequest = {\n    application_id?: UUID | undefined | null;\n    role?: string | undefined | null;\n  };\n\n  export const AddApplicationRequest = zodSchemaAddApplicationRequest();\n  export type AddApplicationRequest = {\n    bundle_id: UUID;\n    display_name: string;\n    name: string;\n    owner_role?: string | undefined | null;\n  };\n\n  export const AggregationEmailTemplate = zodSchemaAggregationEmailTemplate();\n  export type AggregationEmailTemplate = {\n    application?: Application1 | undefined | null;\n    application_id?: UUID | undefined | null;\n    body_template?: Template | undefined | null;\n    body_template_id: UUID;\n    created?: string | undefined | null;\n    id?: UUID | undefined | null;\n    subject_template?: Template | undefined | null;\n    subject_template_id: UUID;\n    subscription_type: EmailSubscriptionType;\n    updated?: string | undefined | null;\n  };\n\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    display_name: string;\n    id: UUID;\n  };\n\n  export const Application1 = zodSchemaApplication1();\n  export type Application1 = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const BehaviorGroup = zodSchemaBehaviorGroup();\n  export type BehaviorGroup = {\n    actions?: Array<BehaviorGroupAction> | undefined | null;\n    bundle?: Bundle | undefined | null;\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    default_behavior?: boolean | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    updated?: string | undefined | null;\n  };\n\n  export const BehaviorGroupAction = zodSchemaBehaviorGroupAction();\n  export type BehaviorGroupAction = {\n    created?: string | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    id?: BehaviorGroupActionId | undefined | null;\n  };\n\n  export const BehaviorGroupActionId = zodSchemaBehaviorGroupActionId();\n  export type BehaviorGroupActionId = {\n    behaviorGroupId: UUID;\n    endpointId: UUID;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const CamelProperties = zodSchemaCamelProperties();\n  export type CamelProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    extras?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    secret_token?: string | undefined | null;\n    sub_type?: string | undefined | null;\n    url: string;\n  };\n\n  export const CurrentStatus = zodSchemaCurrentStatus();\n  export type CurrentStatus = {\n    end_time?: string | undefined | null;\n    start_time?: string | undefined | null;\n    status: Status;\n  };\n\n  export const EmailSubscriptionProperties =\n    zodSchemaEmailSubscriptionProperties();\n  export type EmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'INSTANT' | 'DAILY';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookProperties | EmailSubscriptionProperties | CamelProperties)\n      | undefined\n      | null;\n    sub_type?: string | undefined | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointProperties = zodSchemaEndpointProperties();\n  export type EndpointProperties = unknown;\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType =\n    | 'webhook'\n    | 'email_subscription'\n    | 'default'\n    | 'camel';\n\n  export const Environment = zodSchemaEnvironment();\n  export type Environment = 'PROD' | 'STAGE' | 'EPHEMERAL' | 'LOCAL_SERVER';\n\n  export const EventLogEntry = zodSchemaEventLogEntry();\n  export type EventLogEntry = {\n    actions: Array<EventLogEntryAction>;\n    application: string;\n    bundle: string;\n    created: string;\n    event_type: string;\n    id: UUID;\n    payload?: string | undefined | null;\n  };\n\n  export const EventLogEntryAction = zodSchemaEventLogEntryAction();\n  export type EventLogEntryAction = {\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpoint_id?: UUID | undefined | null;\n    endpoint_sub_type?: string | undefined | null;\n    endpoint_type: EndpointType;\n    id: UUID;\n    invocation_result: boolean;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application1 | undefined | null;\n    application_id: UUID;\n    description?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    children?: Array<Facet> | undefined | null;\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const InstantEmailTemplate = zodSchemaInstantEmailTemplate();\n  export type InstantEmailTemplate = {\n    body_template?: Template | undefined | null;\n    body_template_id: UUID;\n    created?: string | undefined | null;\n    event_type?: EventType | undefined | null;\n    event_type_id?: UUID | undefined | null;\n    id?: UUID | undefined | null;\n    subject_template?: Template | undefined | null;\n    subject_template_id: UUID;\n    updated?: string | undefined | null;\n  };\n\n  export const InternalApplicationUserPermission =\n    zodSchemaInternalApplicationUserPermission();\n  export type InternalApplicationUserPermission = {\n    application_display_name: string;\n    application_id: UUID;\n    role: string;\n  };\n\n  export const InternalRoleAccess = zodSchemaInternalRoleAccess();\n  export type InternalRoleAccess = {\n    application_id: UUID;\n    id?: UUID | undefined | null;\n    role: string;\n  };\n\n  export const InternalUserPermissions = zodSchemaInternalUserPermissions();\n  export type InternalUserPermissions = {\n    applications: Array<Application>;\n    is_admin: boolean;\n    roles: Array<string>;\n  };\n\n  export const MessageValidationResponse = zodSchemaMessageValidationResponse();\n  export type MessageValidationResponse = {\n    errors: {\n      [x: string]: Array<string>;\n    };\n  };\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    endpointSubType?: string | undefined | null;\n    endpointType?: EndpointType | undefined | null;\n    id?: UUID | undefined | null;\n    invocationResult: boolean;\n    invocationTime: number;\n  };\n\n  export const PageEventLogEntry = zodSchemaPageEventLogEntry();\n  export type PageEventLogEntry = {\n    data: Array<EventLogEntry>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const PageEventType = zodSchemaPageEventType();\n  export type PageEventType = {\n    data: Array<EventType>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const RenderEmailTemplateRequest =\n    zodSchemaRenderEmailTemplateRequest();\n  export type RenderEmailTemplateRequest = {\n    body_template: string;\n    payload: string;\n    subject_template: string;\n  };\n\n  export const RequestDefaultBehaviorGroupPropertyList =\n    zodSchemaRequestDefaultBehaviorGroupPropertyList();\n  export type RequestDefaultBehaviorGroupPropertyList = {\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const RequestEmailSubscriptionProperties =\n    zodSchemaRequestEmailSubscriptionProperties();\n  export type RequestEmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    only_admins: boolean;\n  };\n\n  export const ServerInfo = zodSchemaServerInfo();\n  export type ServerInfo = {\n    environment?: Environment | undefined | null;\n  };\n\n  export const Status = zodSchemaStatus();\n  export type Status = 'UP' | 'MAINTENANCE';\n\n  export const Template = zodSchemaTemplate();\n  export type Template = {\n    created?: string | undefined | null;\n    data: string;\n    description: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const WebhookProperties = zodSchemaWebhookProperties();\n  export type WebhookProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  export const __Empty = zodSchema__Empty();\n  export type __Empty = string | undefined;\n\n  function zodSchemaAddAccessRequest() {\n      return z\n      .object({\n          application_id: zodSchemaUUID().optional().nullable(),\n          role: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAddApplicationRequest() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          display_name: z.string(),\n          name: z.string(),\n          owner_role: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAggregationEmailTemplate() {\n      return z\n      .object({\n          application: zodSchemaApplication1().optional().nullable(),\n          application_id: zodSchemaUUID().optional().nullable(),\n          body_template: zodSchemaTemplate().optional().nullable(),\n          body_template_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          subject_template: zodSchemaTemplate().optional().nullable(),\n          subject_template_id: zodSchemaUUID(),\n          subscription_type: zodSchemaEmailSubscriptionType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          display_name: z.string(),\n          id: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplication1() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroup() {\n      return z\n      .object({\n          actions: z.array(zodSchemaBehaviorGroupAction()).optional().nullable(),\n          bundle: zodSchemaBundle().optional().nullable(),\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          default_behavior: z.boolean().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupAction() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          id: zodSchemaBehaviorGroupActionId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupActionId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          endpointId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCamelProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          extras: z.record(z.string()).optional().nullable(),\n          secret_token: z.string().optional().nullable(),\n          sub_type: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCurrentStatus() {\n      return z\n      .object({\n          end_time: z.string().optional().nullable(),\n          start_time: z.string().optional().nullable(),\n          status: zodSchemaStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'INSTANT', 'DAILY' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookProperties(),\n              zodSchemaEmailSubscriptionProperties(),\n              zodSchemaCamelProperties()\n          ])\n          .optional()\n          .nullable(),\n          sub_type: z.string().optional().nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default', 'camel' ]);\n  }\n\n  function zodSchemaEnvironment() {\n      return z.enum([ 'PROD', 'STAGE', 'EPHEMERAL', 'LOCAL_SERVER' ]);\n  }\n\n  function zodSchemaEventLogEntry() {\n      return z\n      .object({\n          actions: z.array(zodSchemaEventLogEntryAction()),\n          application: z.string(),\n          bundle: z.string(),\n          created: z.string(),\n          event_type: z.string(),\n          id: zodSchemaUUID(),\n          payload: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventLogEntryAction() {\n      return z\n      .object({\n          details: z.record(z.unknown()).optional().nullable(),\n          endpoint_id: zodSchemaUUID().optional().nullable(),\n          endpoint_sub_type: z.string().optional().nullable(),\n          endpoint_type: zodSchemaEndpointType(),\n          id: zodSchemaUUID(),\n          invocation_result: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication1().optional().nullable(),\n          application_id: zodSchemaUUID(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          children: z\n          .array(z.lazy(() => zodSchemaFacet()))\n          .optional()\n          .nullable(),\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaInstantEmailTemplate() {\n      return z\n      .object({\n          body_template: zodSchemaTemplate().optional().nullable(),\n          body_template_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          event_type: zodSchemaEventType().optional().nullable(),\n          event_type_id: zodSchemaUUID().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          subject_template: zodSchemaTemplate().optional().nullable(),\n          subject_template_id: zodSchemaUUID(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalApplicationUserPermission() {\n      return z\n      .object({\n          application_display_name: z.string(),\n          application_id: zodSchemaUUID(),\n          role: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalRoleAccess() {\n      return z\n      .object({\n          application_id: zodSchemaUUID(),\n          id: zodSchemaUUID().optional().nullable(),\n          role: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalUserPermissions() {\n      return z\n      .object({\n          applications: z.array(zodSchemaApplication()),\n          is_admin: z.boolean(),\n          roles: z.array(z.string())\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMessageValidationResponse() {\n      return z\n      .object({\n          errors: z.record(z.array(z.string()))\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          endpointSubType: z.string().optional().nullable(),\n          endpointType: zodSchemaEndpointType().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          invocationResult: z.boolean(),\n          invocationTime: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventLogEntry() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventLogEntry()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventType() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventType()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRenderEmailTemplateRequest() {\n      return z\n      .object({\n          body_template: z.string(),\n          payload: z.string(),\n          subject_template: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestDefaultBehaviorGroupPropertyList() {\n      return z\n      .object({\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaServerInfo() {\n      return z\n      .object({\n          environment: zodSchemaEnvironment().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatus() {\n      return z.enum([ 'UP', 'MAINTENANCE' ]);\n  }\n\n  function zodSchemaTemplate() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          data: z.string(),\n          description: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaWebhookProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchema__Empty() {\n      return z.string().max(0).optional();\n  }\n}\n\nexport namespace Operations {\n  // GET /\n  export namespace InternalResourceHttpRoot {\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /access\n  export namespace InternalPermissionResourceGetAccessList {\n    const Response200 = z.array(Schemas.InternalApplicationUserPermission);\n    type Response200 = Array<Schemas.InternalApplicationUserPermission>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './access';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /access\n  export namespace InternalPermissionResourceAddAccess {\n    export interface Params {\n      body: Schemas.AddAccessRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'InternalRoleAccess', 200, Schemas.InternalRoleAccess>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './access';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InternalRoleAccess,\n                    'InternalRoleAccess',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /access/me\n  export namespace InternalPermissionResourceGetPermissions {\n    export type Payload =\n      | ValidatedResponse<\n          'InternalUserPermissions',\n          200,\n          Schemas.InternalUserPermissions\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './access/me';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InternalUserPermissions,\n                    'InternalUserPermissions',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /access/{internalRoleAccessId}\n  export namespace InternalPermissionResourceDeleteAccess {\n    export interface Params {\n      internalRoleAccessId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './access/{internalRoleAccessId}'.replace(\n            '{internalRoleAccessId}',\n            params.internalRoleAccessId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /admin\n  export namespace AdminResourceDebugRbac {\n    const Rhid = z.string();\n    type Rhid = string;\n    export interface Params {\n      rhid?: Rhid;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './admin';\n        const query = {} as Record<string, any>;\n        if (params.rhid !== undefined) {\n            query.rhid = params.rhid;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /admin/status\n  export namespace AdminResourceSetAdminDown {\n    const Status = z.string();\n    type Status = string;\n    export interface Params {\n      status?: Status;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './admin/status';\n        const query = {} as Record<string, any>;\n        if (params.status !== undefined) {\n            query.status = params.status;\n        }\n\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /admin/templates/migrate\n  export namespace AdminResourceMigrate {\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './admin/templates/migrate';\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /admin/templates/migrate\n  export namespace AdminResourceDeleteAllTemplates {\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './admin/templates/migrate';\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /applications\n  export namespace InternalResourceCreateApplication {\n    export interface Params {\n      body: Schemas.AddApplicationRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Application1', 200, Schemas.Application1>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Application1, 'Application1', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /applications/{appId}\n  export namespace InternalResourceGetApplication {\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Application1', 200, Schemas.Application1>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Application1, 'Application1', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /applications/{appId}\n  export namespace InternalResourceUpdateApplication {\n    export interface Params {\n      appId: Schemas.UUID;\n      body: Schemas.Application1;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /applications/{appId}\n  export namespace InternalResourceDeleteApplication {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /applications/{appId}/eventTypes\n  export namespace InternalResourceGetEventTypes {\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}/eventTypes'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /behaviorGroups/default\n  export namespace InternalResourceGetDefaultBehaviorGroups {\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './behaviorGroups/default';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /behaviorGroups/default\n  export namespace InternalResourceCreateDefaultBehaviorGroup {\n    export interface Params {\n      body: Schemas.BehaviorGroup;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'BehaviorGroup', 200, Schemas.BehaviorGroup>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.BehaviorGroup, 'BehaviorGroup', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /behaviorGroups/default/{behaviorGroupId}/actions\n  // Update the list of actions of a default behavior group.\n  export namespace InternalResourceUpdateDefaultBehaviorGroupActions {\n    const Body = z.array(Schemas.RequestDefaultBehaviorGroupPropertyList);\n    type Body = Array<Schemas.RequestDefaultBehaviorGroupPropertyList>;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default/{behaviorGroupId}/actions'.replace(\n            '{behaviorGroupId}',\n            params.behaviorGroupId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}\n  // Links the default behavior group to the event type.\n  export namespace InternalResourceLinkDefaultBehaviorToEventType {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        './behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}'\n        .replace('{behaviorGroupId}', params.behaviorGroupId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}\n  // Unlinks the default behavior group from the event type.\n  export namespace InternalResourceUnlinkDefaultBehaviorToEventType {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        './behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}'\n        .replace('{behaviorGroupId}', params.behaviorGroupId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /behaviorGroups/default/{id}\n  // Update a default behavior group.\n  export namespace InternalResourceUpdateDefaultBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      id: Schemas.UUID;\n      body: Schemas.BehaviorGroup;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /behaviorGroups/default/{id}\n  // Deletes a default behavior group.\n  export namespace InternalResourceDeleteDefaultBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles\n  export namespace InternalResourceGetBundles {\n    const Response200 = z.array(Schemas.Bundle);\n    type Response200 = Array<Schemas.Bundle>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /bundles\n  export namespace InternalResourceCreateBundle {\n    export interface Params {\n      body: Schemas.Bundle;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Bundle', 200, Schemas.Bundle>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Bundle, 'Bundle', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles/{bundleId}\n  export namespace InternalResourceGetBundle {\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Bundle', 200, Schemas.Bundle>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Bundle, 'Bundle', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /bundles/{bundleId}\n  export namespace InternalResourceUpdateBundle {\n    export interface Params {\n      bundleId: Schemas.UUID;\n      body: Schemas.Bundle;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /bundles/{bundleId}\n  export namespace InternalResourceDeleteBundle {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles/{bundleId}/applications\n  export namespace InternalResourceGetApplications {\n    const Response200 = z.array(Schemas.Application1);\n    type Response200 = Array<Schemas.Application1>;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}/applications'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /eventTypes\n  export namespace InternalResourceCreateEventType {\n    export interface Params {\n      body: Schemas.EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'EventType', 200, Schemas.EventType>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.EventType, 'EventType', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /eventTypes/{eventTypeId}\n  export namespace InternalResourceUpdateEventType {\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      body: Schemas.EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /eventTypes/{eventTypeId}\n  export namespace InternalResourceDeleteEventType {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /serverInfo\n  export namespace InternalResourceGetServerInfo {\n    export type Payload =\n      | ValidatedResponse<'ServerInfo', 200, Schemas.ServerInfo>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './serverInfo';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.ServerInfo, 'ServerInfo', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /status\n  export namespace InternalResourceSetCurrentStatus {\n    export interface Params {\n      body: Schemas.CurrentStatus;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './status';\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates\n  export namespace TemplateResourceGetAllTemplates {\n    const Response200 = z.array(Schemas.Template);\n    type Response200 = Array<Schemas.Template>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './templates';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /templates\n  export namespace TemplateResourceCreateTemplate {\n    export interface Params {\n      body: Schemas.Template;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Template', 200, Schemas.Template>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Template, 'Template', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/aggregation\n  export namespace TemplateResourceGetAllAggregationEmailTemplates {\n    const Response200 = z.array(Schemas.AggregationEmailTemplate);\n    type Response200 = Array<Schemas.AggregationEmailTemplate>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './templates/email/aggregation';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /templates/email/aggregation\n  export namespace TemplateResourceCreateAggregationEmailTemplate {\n    export interface Params {\n      body: Schemas.AggregationEmailTemplate;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'AggregationEmailTemplate',\n          200,\n          Schemas.AggregationEmailTemplate\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.AggregationEmailTemplate,\n                    'AggregationEmailTemplate',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/aggregation/application/{appId}\n  export namespace TemplateResourceGetAggregationEmailTemplatesByApplication {\n    const Response200 = z.array(Schemas.AggregationEmailTemplate);\n    type Response200 = Array<Schemas.AggregationEmailTemplate>;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation/application/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/aggregation/{templateId}\n  export namespace TemplateResourceGetAggregationemailTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'AggregationEmailTemplate',\n          200,\n          Schemas.AggregationEmailTemplate\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.AggregationEmailTemplate,\n                    'AggregationEmailTemplate',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /templates/email/aggregation/{templateId}\n  export namespace TemplateResourceUpdateAggregationEmailTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n      body: Schemas.AggregationEmailTemplate;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /templates/email/aggregation/{templateId}\n  export namespace TemplateResourceDeleteAggregationEmailTemplate {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/instant\n  export namespace TemplateResourceGetAllInstantEmailTemplates {\n    const Response200 = z.array(Schemas.InstantEmailTemplate);\n    type Response200 = Array<Schemas.InstantEmailTemplate>;\n    export interface Params {\n      applicationId?: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant';\n        const query = {} as Record<string, any>;\n        if (params.applicationId !== undefined) {\n            query.applicationId = params.applicationId;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /templates/email/instant\n  export namespace TemplateResourceCreateInstantEmailTemplate {\n    export interface Params {\n      body: Schemas.InstantEmailTemplate;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'InstantEmailTemplate',\n          200,\n          Schemas.InstantEmailTemplate\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InstantEmailTemplate,\n                    'InstantEmailTemplate',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/instant/eventType/{eventTypeId}\n  export namespace TemplateResourceGetInstantEmailTemplateByEventType {\n    const Response404 = z.string();\n    type Response404 = string;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'InstantEmailTemplate',\n          200,\n          Schemas.InstantEmailTemplate\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', 404, Response404>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant/eventType/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InstantEmailTemplate,\n                    'InstantEmailTemplate',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403),\n                new ValidateRule(Response404, 'unknown', 404)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/instant/{templateId}\n  export namespace TemplateResourceGetInstantEmailTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'InstantEmailTemplate',\n          200,\n          Schemas.InstantEmailTemplate\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InstantEmailTemplate,\n                    'InstantEmailTemplate',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /templates/email/instant/{templateId}\n  export namespace TemplateResourceUpdateInstantEmailTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n      body: Schemas.InstantEmailTemplate;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /templates/email/instant/{templateId}\n  export namespace TemplateResourceDeleteInstantEmailTemplate {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /templates/email/render\n  export namespace TemplateResourceRenderEmailTemplate {\n    const Response200 = z\n    .object({\n        body: z.string().optional().nullable(),\n        subject: z.string().optional().nullable()\n    })\n    .nonstrict();\n    type Response200 = {\n      body?: string | undefined | null;\n      subject?: string | undefined | null;\n    };\n    const Response400 = z\n    .object({\n        message: z.string().optional().nullable()\n    })\n    .nonstrict();\n    type Response400 = {\n      message?: string | undefined | null;\n    };\n    export interface Params {\n      body: Schemas.RenderEmailTemplateRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', 400, Response400>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/render';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Response400, 'unknown', 400),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/{templateId}\n  export namespace TemplateResourceGetTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Template', 200, Schemas.Template>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Template, 'Template', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /templates/{templateId}\n  export namespace TemplateResourceUpdateTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n      body: Schemas.Template;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /templates/{templateId}\n  export namespace TemplateResourceDeleteTemplate {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /validation/baet\n  export namespace ValidationResourceValidate {\n    const Application = z.string();\n    type Application = string;\n    const Bundle = z.string();\n    type Bundle = string;\n    const EventType = z.string();\n    type EventType = string;\n    export interface Params {\n      application?: Application;\n      bundle?: Bundle;\n      eventType?: EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './validation/baet';\n        const query = {} as Record<string, any>;\n        if (params.application !== undefined) {\n            query.application = params.application;\n        }\n\n        if (params.bundle !== undefined) {\n            query.bundle = params.bundle;\n        }\n\n        if (params.eventType !== undefined) {\n            query.eventType = params.eventType;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /validation/message\n  export namespace ValidationResourceValidateMessage {\n    const Body = z.string();\n    type Body = string;\n    export interface Params {\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<\n          'MessageValidationResponse',\n          400,\n          Schemas.MessageValidationResponse\n        >\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './validation/message';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(\n                    Schemas.MessageValidationResponse,\n                    'MessageValidationResponse',\n                    400\n                )\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /version\n  export namespace InternalResourceGetVersion {\n    const Response200 = z.string();\n    type Response200 = string;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './version';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n}\n","import '@patternfly/react-core/dist/styles/base.css';\n\nimport { CodeEditor, CodeEditorControl, Language } from '@patternfly/react-code-editor';\nimport { PageSection, Title } from '@patternfly/react-core';\nimport { PlayIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\nimport { useMemo } from 'react';\n\nconst aggregationTemplate = `\n// Here we can initialize the value of the Aggregation result.\nconst result = {\n};\n\n// This function will be called by every action that was sent to notification server\n// to update the result with its values.\nconst aggregate = (action) => {\n\n    return result;\n};\n`.trimLeft();\n\nexport const AggregationPage: React.FunctionComponent<unknown> = () => {\n\n    const onEditorDidMount = React.useCallback((editor, monaco) => {\n        editor.layout();\n        editor.focus();\n        monaco.editor.getModels()[0].updateOptions({ tabSize: 5 });\n    }, []);\n\n    const onChange = React.useCallback((_value) => {\n        // does not do anything yet\n    }, []);\n\n    const controls = useMemo(() => [\n        <CodeEditorControl\n            key=\"test\"\n            icon={ <PlayIcon /> }\n            toolTipText=\"Test aggregation\"\n            onClick={ () => console.log('testing') }\n            isVisible={ true }\n        />\n    ], []);\n\n    return <>\n        <PageSection>\n            <Title headingLevel=\"h1\">Aggregation templates</Title>\n        </PageSection>\n        <PageSection>\n            <CodeEditor\n                isDownloadEnabled\n                isUploadEnabled\n                customControls={ controls }\n                isLineNumbersVisible\n                isLanguageLabelVisible\n                isMinimapVisible={ false }\n                language={ Language.javascript }\n                onEditorDidMount={ onEditorDidMount }\n                onChange={ onChange }\n                code={ aggregationTemplate }\n                height=\"300px\"\n            />\n        </PageSection>\n    </>;\n};\n","import * as React from 'react';\nimport { useCallback, useContext } from 'react';\n\nimport { Schemas } from '../generated/OpenapiInternal';\n\nexport interface PermissionContext {\n    isAdmin: boolean;\n    applications: ReadonlyArray<{\n        id: string;\n        displayName: string;\n    }>;\n    roles: ReadonlyArray<string>;\n    refresh: () => void;\n}\n\nexport const PermissionContext = React.createContext<PermissionContext>({\n    isAdmin: false,\n    applications: [],\n    roles: [],\n    refresh: () => {\n        throw new Error('Invalid use of refresh');\n    }\n});\n\nexport const useUserPermissions = () => {\n    const permission = useContext(PermissionContext);\n\n    const hasPermission = useCallback((appId: Schemas.UUID) => {\n        if (permission.isAdmin) {\n            return true;\n        }\n\n        return permission.applications.find(a => a.id === appId) !== undefined;\n    }, [ permission ]);\n\n    return {\n        ...permission,\n        hasPermission\n    };\n};\n","import { Breadcrumb, BreadcrumbItem, Card, CardBody, CardHeader, PageSection, Title } from '@patternfly/react-core';\nimport * as React from 'react';\n\ninterface AggregationEmailCardProps {\n    applicationName?: string;\n    bundleName?: string;\n    templateName: (string | undefined)[] | undefined;\n}\n\nexport const AggregationTemplateCard: React.FunctionComponent<AggregationEmailCardProps> = (props) => {\n\n    return (\n        <PageSection>\n            <Title headingLevel=\"h1\">\n                <Breadcrumb>\n                    <BreadcrumbItem target='#'>Aggregation Email Template for { props.applicationName }</BreadcrumbItem>\n                </Breadcrumb></Title>\n            <Card>\n                <CardHeader>\n                    {`Application: ${ props.applicationName } `}\n                </CardHeader>\n                <CardBody>\n                    {`Bundle: ${ props.bundleName }`}\n                </CardBody>\n                <CardBody>\n                    {`Aggregation Template: ${ props.templateName } `}\n                </CardBody>\n            </Card>\n        </PageSection>\n    );\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Template } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.TemplateResourceGetAllTemplates.Payload) => {\n        if (payload.status === 200) {\n            const emailTemplates: ReadonlyArray<Template> = payload.value.map(value => ({\n                id: value.id,\n                name: value.name,\n                description: value.description,\n                data: value.data\n            }));\n\n            return validatedResponse(\n                'emailTemplates',\n                200,\n                emailTemplates,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useGetTemplates = () => {\n    const query = useQuery(Operations.TemplateResourceGetAllTemplates.actionCreator());\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { ActionGroup, Button, Form, Modal, ModalVariant } from '@patternfly/react-core';\nimport React from 'react';\n\ninterface ViewTemplateModalProps {\n    showModal: boolean;\n    applicationName: string;\n    onClose: () => void;\n}\n\nexport const ViewTemplateModal: React.FunctionComponent<ViewTemplateModalProps> = (props) => {\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant={ ModalVariant.medium }\n                title={ ` Email Template for ${ props.applicationName }` }\n                isOpen={ props.showModal }\n                onClose={ props.onClose }\n            ><Form isHorizontal>\n                    Viewing modal for existing templates\n                    <ActionGroup>\n                        <Button variant='primary' type='reset'\n                            onClick={ props.onClose }>Close</Button>\n                    </ActionGroup>\n                </Form>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\n","import { Breadcrumb, BreadcrumbItem, Button, PageSection, Spinner, Title, Toolbar,\n    ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { EyeIcon, PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport {\n    TableComposable,\n    Tbody,\n    Td,  Th,   Thead,\n    Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useUserPermissions } from '../../app/PermissionContext';\nimport { linkTo } from '../../Routes';\nimport { useGetTemplates } from '../../services/EmailTemplates/GetTemplates';\nimport { Application } from '../../types/Notifications';\nimport { ViewTemplateModal } from './ViewEmailTemplateModal';\n\ninterface InstantEmailTemplateTableProps {\n    application: Application;\n}\n\nexport const InstantEmailTemplateTable: React.FunctionComponent<InstantEmailTemplateTableProps> = props => {\n    const { hasPermission } = useUserPermissions();\n    const getAllTemplates = useGetTemplates();\n\n    const [ showViewModal, setShowViewModal ] = React.useState(false);\n    const viewModal = () => {\n        setShowViewModal(true);\n    };\n\n    const onClose = () => {\n        setShowViewModal(false);\n    };\n\n    const columns = [ 'Email Templates' ];\n\n    if (getAllTemplates.loading) {\n        return <Spinner />;\n    }\n\n    if (getAllTemplates.payload?.status !== 200) {\n        return <span>Error while loading templates: {getAllTemplates.errorObject.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel=\"h1\">\n                    <Breadcrumb>\n                        <BreadcrumbItem target='#'>Email Templates</BreadcrumbItem>\n                    </Breadcrumb></Title>\n                <TableComposable aria-label=\"Email Template table\">\n                    <Thead>\n                        <Toolbar>\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <Button variant=\"primary\" isDisabled={ !hasPermission(props.application.id) }\n                                        component={ (props: any) =>\n                                            <Link { ...props } to={ linkTo.emailTemplates } /> }>Create Email Template</Button>\n                                    <ViewTemplateModal\n                                        showModal={ showViewModal }\n                                        applicationName={ props.application.displayName }\n                                        onClose={ onClose }\n                                    />\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Tr>\n                            {columns.map((column, columnIndex) => (\n                                <Th key={ columnIndex }>{column}</Th>\n                            ))}\n                        </Tr>\n                    </Thead>\n                    <Tbody>\n                        { getAllTemplates.payload.value.map(e => (\n                            <Tr key={ e.id }>\n                                <Td>{ e.name }</Td>\n                                <Td>\n                                    <Button className='view' type='button' variant='plain' onClick={ viewModal }\n                                    > { <EyeIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='edit' type='button' variant='plain'\n                                        isDisabled> { <PencilAltIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='delete' type='button' variant='plain'\n                                        isDisabled>{ <TrashIcon /> } </Button></Td>\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </TableComposable>\n            </PageSection>\n        </React.Fragment>\n\n    );\n};\n\n","import { ActionGroup, Button, Form, FormGroup, HelperText, HelperTextItem, Modal, ModalVariant, TextArea, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { EventType } from '../../types/Notifications';\n\ninterface CreateEditModalProps {\n    isEdit: boolean;\n    showModal: boolean;\n    applicationName?: string;\n    initialEventType?: Partial<EventType>;\n    isLoading: boolean;\n    onClose: () => void;\n    onSubmit: (eventType: Partial<EventType>) => void;\n}\n\nexport const CreateEditModal: React.FunctionComponent<CreateEditModalProps> = (props) => {\n\n    const [ eventType, setEventType ] = React.useState<Partial<EventType>>(props.initialEventType ?? {});\n\n    const handleChange = (value: string, event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>) => {\n        const target = event.target as HTMLInputElement;\n        setEventType(prev => ({ ...prev, [target.name]: target.value }));\n    };\n\n    const onSubmitLocal = React.useCallback(() => {\n        props.onSubmit(eventType);\n    }, [ eventType, props ]);\n\n    React.useEffect(() => {\n        setEventType(props.initialEventType ?? {});\n    }, [ props.initialEventType ]);\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant={ ModalVariant.medium }\n                title={ `${ props.isEdit ? 'Update' : 'Create'} Event Type for ${ props.applicationName }` }\n                isOpen={ props.showModal }\n                onClose={ props.onClose }\n            ><Form isHorizontal>\n                    <FormGroup label='Name' fieldId='name' isRequired\n                        helperText={ props.isEdit ? <HelperText><HelperTextItem variant=\"warning\" hasIcon>\n                                                    If this field is modified it may affect exisiting behavior.\n                        </HelperTextItem></HelperText> : 'This is a short name, only composed of a-z 0-9 and - characters.' }>\n                        <TextInput\n                            type='text'\n                            value={ eventType.name }\n                            onChange={ handleChange }\n                            id='name'\n                            name=\"name\"\n                        /></FormGroup>\n                    <FormGroup label='Display name' fieldId='display-name' isRequired\n                        helperText='This is the name you want to display on the UI'>\n                        <TextInput\n                            type='text'\n                            value={ eventType.displayName }\n                            onChange={ handleChange }\n                            id='display-name'\n                            name=\"displayName\"\n                        /></FormGroup>\n                    <FormGroup label='Description' fieldId='description'\n                        helperText='Optional short description that appears in the UI\n                                                to help admin decide how to notify users.'>\n                        <TextArea\n                            type='text'\n                            value={ eventType.description }\n                            onChange={ handleChange }\n                            id='description'\n                            name=\"description\"\n                        /></FormGroup>\n                    <ActionGroup>\n                        <Button variant='primary' type='submit'\n                            isLoading={ props.isLoading } isDisabled={ props.isLoading }\n                            onClick={ onSubmitLocal }>{ props.isEdit ? 'Update' : 'Submit' }</Button>\n                        <Button variant='link' type='reset'\n                            onClick={ props.onClose }>Cancel</Button>\n                    </ActionGroup>\n                </Form>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\n","import { ActionGroup, Button, Modal, ModalVariant, Spinner, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { EventType } from '../../types/Notifications';\n\ninterface DeleteModalProps {\n    eventTypeName?: string;\n    onDelete: (eventType?: EventType) => Promise<boolean>;\n    bundleName?: string;\n    applicationName?: string;\n    isOpen: boolean;\n    onClose: () => void;\n\n}\nexport const DeleteModal: React.FunctionComponent<DeleteModalProps> = (props) => {\n    const [ errors, setErrors ] = React.useState(true);\n\n    const onDelete = React.useCallback(async () => {\n        const onDeleteImpl = props.onDelete;\n        const response = await onDeleteImpl();\n        if (response) {\n            props.onClose();\n        } else {\n            alert('Could not delete event type, please try again.');\n        }\n    }, [ props ]);\n\n    const handleDeleteChange = (value: string, event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        if (target.value !== props.eventTypeName) {\n            return setErrors(true);\n        } else if (target.value === props.eventTypeName) {\n            return setErrors(false);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Modal variant={ ModalVariant.small } titleIconVariant=\"warning\" isOpen={ props.isOpen }\n                onClose={ props.onClose }\n                title={ `Permanently delete ${ props.eventTypeName }` }>\n                { <b>{ props.eventTypeName }</b> } {`from  ${ props.applicationName }/${ props.bundleName ? props.bundleName :\n                    <Spinner /> } will be deleted. \n                        If an application is currently sending this event, it will no longer be processed.`}\n                <br />\n                <br />\n                        Type <b>{ props.eventTypeName }</b> to confirm:\n                <br />\n                <TextInput type='text' onChange={ handleDeleteChange } id='name' name=\"name\" isRequired />\n                <br />\n                <br />\n                <ActionGroup>\n                    <Button variant='danger' type='button' isDisabled = { errors }\n                        onClick={ onDelete }>Delete</Button>\n                    <Button variant='link' type='button' onClick={ props.onClose }>Cancel</Button>\n                </ActionGroup>\n            </Modal>\n        </React.Fragment>\n    );\n};\n","import {\n    DescriptionList,\n    DescriptionListDescription,\n    DescriptionListGroup,\n    DescriptionListTerm\n} from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { EventType } from '../../../types/Notifications';\n\ninterface EventTypeExpandableRowProps {\n    eventType: EventType;\n}\n\nexport const EventTypeExpandableRow: React.FunctionComponent<EventTypeExpandableRowProps> = props => {\n    return <DescriptionList isHorizontal>\n        <DescriptionListGroup>\n            <DescriptionListTerm>Event type id</DescriptionListTerm>\n            <DescriptionListDescription>{ props.eventType.id }</DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n            <DescriptionListTerm>Description</DescriptionListTerm>\n            <DescriptionListDescription>{ props.eventType.description }</DescriptionListDescription>\n        </DescriptionListGroup>\n    </DescriptionList>;\n};\n","import { Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { EventTypeRow } from '../../../types/Notifications';\n\ninterface InstantEmailCellProps {\n    eventType: EventTypeRow;\n}\n\nexport const InstantEmailCell: React.FunctionComponent<InstantEmailCellProps> = props => {\n    const { eventType } = props;\n\n    if (eventType.instantEmail.isLoading) {\n        return <Spinner />;\n    }\n\n    return <>\n        { eventType.instantEmail.id ? 'Template found' : 'No template' }\n    </>;\n};\n","import {\n    ActionList, ActionListItem,\n    Button,\n    ButtonVariant,\n    EmptyState, EmptyStateBody,\n    Skeleton,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from '@patternfly/react-core';\nimport { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { ExpandableRowContent, OnCollapse, TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport produce from 'immer';\nimport * as React from 'react';\nimport { useEffect } from 'react';\n\nimport { EventType, EventTypeRow } from '../../types/Notifications';\nimport { EventTypeExpandableRow } from './Table/EventTypeExpandableRow';\nimport { InstantEmailCell } from './Table/InstantEmailCell';\n\ninterface EventTypeTableBaseProps {\n    eventTypes: ReadonlyArray<EventTypeRow>;\n    hasPermissions: boolean;\n    onCreateEventType: () => void;\n    onEditEventType: (eventType: EventType) => void;\n    onDeleteEventTypeModal: (eventType: EventType) => void;\n}\n\ntype CreateEventTypeButtonProp = {\n    createEventTypeButton: React.ReactNode;\n}\n\ntype EventTypeTableImplProps = EventTypeTableBaseProps & CreateEventTypeButtonProp & {\n    tableData: Record<string, TableData | undefined>;\n    onExpandToggle: OnCollapse;\n}\n\ninterface TableData {\n    isExpanded: boolean;\n}\n\ntype EventTypeTableLayoutProps = Pick<EventTypeTableBaseProps, 'hasPermissions' | 'onCreateEventType'> & CreateEventTypeButtonProp;\n\nexport type EventTypeTableProps = Omit<EventTypeTableBaseProps, 'eventTypes'> & Partial<Pick<EventTypeTableBaseProps, 'eventTypes'>>;\n\nconst numberOfColumns = 5;\nconst skeletonRows = 5;\n\n/**\n * Implements the outer look and feel of a EventType table - Wraps the actual implementation and the skeleton component\n * It connects the events that are outside of the rows (i.e. toolbar)\n */\nconst EventTypeTableLayout: React.FunctionComponent<EventTypeTableLayoutProps> = props => {\n    return <>\n        <Toolbar>\n            <ToolbarContent>\n                <ToolbarItem>\n                    { props.createEventTypeButton }\n                </ToolbarItem>\n            </ToolbarContent>\n        </Toolbar>\n        <TableComposable aria-label=\"Event types table\">\n            <Thead>\n                <Th />\n                <Th>Event Type</Th>\n                <Th>Name</Th>\n                <Th>Instant email</Th>\n                <Th />\n            </Thead>\n            <Tbody>\n                { props.children }\n            </Tbody>\n        </TableComposable>\n    </>;\n};\n\n/**\n * Implements the inner workings of the EventType - shows the rows and connects the function to the rows.\n */\nconst EventTypeTableImpl: React.FunctionComponent<EventTypeTableImplProps> = props => {\n    return <>\n        { props.eventTypes.length === 0 && <Tr>\n            <Td colSpan={ numberOfColumns }>\n                <EmptyState>\n                    <EmptyStateBody>\n                        There are no event types found for this application\n                    </EmptyStateBody>\n                    { props.createEventTypeButton }\n                </EmptyState>\n            </Td>\n        </Tr> }\n        { props.eventTypes.map((eventType, rowIndex) => (\n            <React.Fragment key={ eventType.id }>\n                <Tr>\n                    <Td\n                        expand={ {\n                            rowIndex,\n                            isExpanded: !!props.tableData[eventType.id]?.isExpanded,\n                            onToggle: props.onExpandToggle\n                        } }\n                    />\n                    <Td>{ eventType.displayName }</Td>\n                    <Td>{ eventType.name }</Td>\n                    <Td><InstantEmailCell eventType={ eventType } /></Td>\n                    <Td>\n                        <ActionList isIconList>\n                            <ActionListItem>\n                                <Button\n                                    className='edit'\n                                    variant={ ButtonVariant.plain }\n                                    isDisabled={ !props.hasPermissions }\n                                    onClick={ () => props.onEditEventType(eventType) }\n                                >\n                                    <PencilAltIcon />\n                                </Button>\n                            </ActionListItem>\n                            <ActionListItem>\n                                <Button\n                                    className='delete'\n                                    variant={ ButtonVariant.plain }\n                                    isDisabled={ !props.hasPermissions }\n                                    onClick={ () => props.onDeleteEventTypeModal(eventType) }\n                                >\n                                    <TrashIcon />\n                                </Button>\n                            </ActionListItem>\n                        </ActionList>\n                    </Td>\n                </Tr>\n                <Tr key={ `${eventType.id}-expanded-row` } isExpanded={ props.tableData[eventType.id]?.isExpanded }>\n                    <Td />\n                    <Td colSpan={ 4 }>\n                        <ExpandableRowContent>\n                            <EventTypeExpandableRow eventType={ eventType } />\n                        </ExpandableRowContent>\n                    </Td>\n                </Tr>\n            </React.Fragment>\n        )) }\n    </>;\n};\n\n/**\n * Provides skeleton rows\n */\nconst EventTypeTableSkeleton: React.FunctionComponent<EventTypeTableProps> = () => {\n    return <>\n        { Array.from(new Array(skeletonRows)).map((_, rowIndex) => <Tr key={ `skeleton-row-${rowIndex}` }>\n            { Array.from(new Array(numberOfColumns)).map((_, colIndex) => <Td key={ `skeleton-cell-${rowIndex}-${colIndex}` }><Skeleton /></Td>) }\n        </Tr>) }\n    </>;\n};\n\n/**\n * Public component of the EventTable, in charge of deciding if showing the skeleton or the full view according to the eventTypes sent\n */\nexport const EventTypeTable: React.FunctionComponent<EventTypeTableProps> = props => {\n    const { eventTypes } = props;\n    const [ tableData, setTableData ] = React.useState<Record<string, TableData | undefined>>({});\n\n    const createEventTypeButton = <Button\n        variant={ ButtonVariant.primary }\n        isDisabled={ !props.hasPermissions }\n        onClick={ props.onCreateEventType }\n    >\n        Create Event Type\n    </Button>;\n\n    useEffect(() => {\n        setTableData(prev => {\n            if (!eventTypes) {\n                return prev;\n            }\n\n            return Object.fromEntries(\n                eventTypes.map(e => {\n                    const data: TableData = {\n                        isExpanded: false,\n                        ...prev[e.id]\n                    };\n\n                    return [ e.id, data ];\n                })\n            );\n        });\n    }, [ eventTypes ]);\n\n    const onExpandedToggle = React.useCallback<OnCollapse>((_event, rowIndex, isOpen) => {\n        setTableData(produce(draft => {\n            const eventType = eventTypes ? eventTypes[rowIndex] : undefined;\n            if (eventType) {\n                const data = draft[eventType.id];\n                if (data) {\n                    data.isExpanded = isOpen;\n                }\n            }\n        }));\n    }, [ eventTypes ]);\n\n    return <EventTypeTableLayout { ...props } createEventTypeButton={ createEventTypeButton }>\n        { eventTypes ? <EventTypeTableImpl\n            { ...props }\n            eventTypes={ eventTypes }\n            onExpandToggle={ onExpandedToggle }\n            tableData={ tableData }\n            createEventTypeButton={ createEventTypeButton }\n        /> : <EventTypeTableSkeleton { ...props } />}\n    </EventTypeTableLayout>;\n};\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\n\ntype LinkAdapterProps = any & {\n    href: string;\n};\n\nexport const LinkAdapter: React.FunctionComponent<LinkAdapterProps> = (props) => {\n    const { href, ...restProps } = props;\n    return (\n        <Link to={ href } { ...restProps }>{ props.children }</Link>\n    );\n};\n","import { BreadcrumbItem, BreadcrumbItemProps } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { LinkAdapter } from './LinkAdapter';\n\ntype BreadcrumbLinkItemProps = Omit<BreadcrumbItemProps, 'component'>\n\nexport const BreadcrumbLinkItem: React.FunctionComponent<BreadcrumbLinkItemProps> = (props) => {\n    return (\n        <BreadcrumbItem\n            { ...props }\n            component={ LinkAdapter }\n        >\n            { props.children }\n        </BreadcrumbItem>\n    );\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { AggregationTemplate } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.TemplateResourceGetAggregationEmailTemplatesByApplication.Payload) => {\n        if (payload.status === 200) {\n            const aggregationTemplates: ReadonlyArray<AggregationTemplate> = payload.value.map(value => ({\n                id: value.id ?? '',\n                application: value.application,\n                applicationId: value.application_id,\n                body_template: value.body_template,\n                body_template_id: value.body_template_id,\n                subject_template: value.subject_template,\n                subject_template_id: value.subject_template_id\n            }));\n\n            return validatedResponse(\n                'AggregationEmailTemplates',\n                200,\n                aggregationTemplates,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useAggregationTemplates = (applicationId: string) => {\n    const query = useQuery(Operations.TemplateResourceGetAggregationEmailTemplatesByApplication.actionCreator({\n        appId: applicationId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport type CreateEventType = {\n    id?: string;\n    displayName: string;\n    description: string;\n    applicationId: string;\n    name: string;\n\n}\n\nconst actionCreator =  (params: CreateEventType) => {\n    if (params.id === undefined) {\n        return Operations.InternalResourceCreateEventType.actionCreator({\n            body: {\n                id: params.id,\n                application_id: params.applicationId,\n                description: params.description,\n                display_name: params.displayName,\n                name: params.name\n\n            }\n        });\n    }\n\n    return Operations.InternalResourceUpdateEventType.actionCreator({\n        eventTypeId: params.id,\n        body: {\n            id: params.id,\n            application_id: params.applicationId,\n            description: params.description,\n            display_name: params.displayName,\n            name: params.name\n\n        }\n    });\n};\n\nexport const useCreateEventType = () => {\n    return useMutation(actionCreator);\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport const deleteEventTypeActionCreator = (eventTypeId: string) => {\n    return Operations.InternalResourceDeleteEventType.actionCreator({\n        eventTypeId\n    });\n};\n\nexport const useDeleteEventType = () => useMutation<boolean>(deleteEventTypeActionCreator);\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Application } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalResourceGetApplication.Payload) => {\n        if (payload.status === 200) {\n            const applicationTypes: Application = {\n                id: payload.value.id ?? '',\n                displayName: payload.value.display_name,\n                name: payload.value.name,\n                bundleId: payload.value.bundle_id };\n\n            return validatedResponse(\n                'Application',\n                200,\n                applicationTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useApplicationTypes = (applicationId: string) => {\n    const query = useQuery(Operations.InternalResourceGetApplication.actionCreator({\n        appId: applicationId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { Operations } from '../../generated/OpenapiInternal';\n\nexport const getBundleAction = (bundleId: string) => {\n    return Operations.InternalResourceGetBundle.actionCreator({\n        bundleId\n    });\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { EventType } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalResourceGetEventTypes.Payload) => {\n        if (payload.status === 200) {\n            const eventTypes: ReadonlyArray<EventType> = payload.value.map(value => ({\n                id: value.id ?? '',\n                name: value.name,\n                displayName: value.display_name,\n                description: value.description ?? '',\n                applicationId: value.application_id\n            }));\n\n            return validatedResponse(\n                'EventTypes',\n                200,\n                eventTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useEventTypes = (applicationId: string) => {\n    const query = useQuery(Operations.InternalResourceGetEventTypes.actionCreator({\n        appId: applicationId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import {\n    ActionGroup,\n    Button,\n    Form,\n    FormGroup,\n    FormSelect, FormSelectOption,\n    HelperText,\n    HelperTextItem,\n    Modal,\n    ModalVariant,\n    TextInput\n} from '@patternfly/react-core';\nimport React from 'react';\n\nimport { useUserPermissions } from '../../app/PermissionContext';\nimport { Application, RoleOwnedApplication } from '../../types/Notifications';\n\ninterface CreateEditApplicationModalProps {\n    isEdit: boolean;\n    showModal: boolean;\n    applicationName?: string;\n    bundleName?: string;\n    initialApplication?: Partial<Application>;\n    isLoading: boolean;\n    onClose: () => void;\n    onSubmit: (application: Partial<RoleOwnedApplication>) => void;\n}\n\nexport const CreateEditApplicationModal: React.FunctionComponent<CreateEditApplicationModalProps> = (props) => {\n\n    const permissions = useUserPermissions();\n    const [ application, setApplication ] = React.useState<Partial<RoleOwnedApplication>>({\n        ...props.initialApplication\n    });\n\n    const handleChange = (\n        value: string,\n        event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement> | React.FormEvent<HTMLSelectElement>) => {\n        const target = event.target as HTMLInputElement;\n        setApplication(prev => ({ ...prev, [target.name]: target.value }));\n    };\n\n    const onSubmitLocal = React.useCallback(() => {\n        props.onSubmit(application);\n    }, [ application, props ]);\n\n    React.useEffect(() => {\n        if (application.ownerRole === undefined && permissions.roles.length > 0) {\n            setApplication(prev => ({\n                ...prev,\n                ownerRole: permissions.roles[0]\n            }));\n        }\n    }, [ permissions.roles, application.ownerRole ]);\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant={ ModalVariant.medium }\n                title={ `${ props.isEdit ? `Update ${ props.applicationName }` : 'Create Application'} for ${ props.bundleName }` }\n                isOpen={ props.showModal }\n                onClose={ props.onClose }\n            ><Form isHorizontal>\n                    <FormGroup label='Name' fieldId='name' isRequired\n                        helperText={ props.isEdit ? <HelperText><HelperTextItem variant=\"warning\" hasIcon>\n                                                    If this field is modified it may affect exisiting behavior.\n                        </HelperTextItem></HelperText> : 'This is a short name, only composed of a-z 0-9 and - characters.' }>\n                        <TextInput\n                            type='text'\n                            value={ application.name }\n                            onChange={ handleChange }\n                            id='name'\n                            name=\"name\"\n                        /></FormGroup>\n                    <FormGroup label='Display name' fieldId='display-name' isRequired\n                        helperText='This is the name you want to display on the UI'>\n                        <TextInput\n                            type='text'\n                            value={ application.displayName }\n                            onChange={ handleChange }\n                            id='display-name'\n                            name=\"displayName\"\n                        /></FormGroup>\n                    { !props.isEdit && <FormGroup\n                        fieldId=\"role-name\"\n                        label=\"Role admin\"\n                        helperText=\"Role of users who will manage the application\"\n                    >\n                        { permissions.isAdmin ? (\n                            <TextInput\n                                type='text'\n                                onChange={ handleChange }\n                                value={ application.ownerRole }\n                                id='owner-role'\n                                name=\"ownerRole\"\n                            />\n                        ) : (\n                            <FormSelect\n                                isRequired\n                                value={ application.ownerRole }\n                                onChange={ handleChange }\n                                id='owner-role'\n                                name=\"ownerRole\"\n                            >\n                                { permissions.roles.map(r => <FormSelectOption key={ r } label={ r } value={ r } />) }\n                            </FormSelect>\n                        )}\n                    </FormGroup>\n                    }\n                    <ActionGroup>\n                        <Button variant='primary' type='submit'\n                            isLoading={ props.isLoading } isDisabled={ props.isLoading }\n                            onClick={ onSubmitLocal }>{ props.isEdit ? 'Update' : 'Submit' }</Button>\n                        <Button variant='link' type='reset'\n                            onClick={ props.onClose }>Cancel</Button>\n                    </ActionGroup>\n                </Form>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\n","import { ActionGroup, Button, Modal, ModalVariant, Spinner, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { EventType } from '../../types/Notifications';\n\ninterface DeleteApplicationModalProps {\n    onDelete: (eventType?: EventType) => Promise<boolean>;\n    bundleName?: string;\n    applicationName?: string;\n    isOpen: boolean;\n    onClose: () => void;\n\n}\nexport const DeleteApplicationModal: React.FunctionComponent<DeleteApplicationModalProps> = (props) => {\n    const [ errors, setErrors ] = React.useState(true);\n\n    const onDelete = React.useCallback(async () => {\n        const onDeleteImpl = props.onDelete;\n        const response = await onDeleteImpl();\n        if (response) {\n            props.onClose();\n        } else {\n            alert('Could not delete application, please try again.');\n        }\n    }, [ props ]);\n\n    const handleDeleteChange = (value: string, event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        if (target.value !== props.applicationName) {\n            return setErrors(true);\n        } else if (target.value === props.applicationName) {\n            return setErrors(false);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Modal variant={ ModalVariant.small } titleIconVariant=\"warning\" isOpen={ props.isOpen }\n                onClose={ props.onClose }\n                title={ `Permanently delete ${ props.applicationName }` }>\n                { <b>{ props.applicationName }</b> } {`from ${ props.bundleName ? props.bundleName :\n                    <Spinner /> } will be deleted. \n                        By deleting this application all associated event types will be deleted and no longer processed. `}\n                <br />\n                <br />\n                        Type <b>{ props.applicationName }</b> to confirm:\n                <br />\n                <TextInput type='text' onChange={ handleDeleteChange } id='name' name=\"name\" isRequired />\n                <br />\n                <br />\n                <ActionGroup>\n                    <Button variant='danger' type='button' isDisabled = { errors }\n                        onClick={ onDelete }>Delete</Button>\n                    <Button variant='link' type='button' onClick={ props.onClose }>Cancel</Button>\n                </ActionGroup>\n            </Modal>\n        </React.Fragment>\n    );\n};\n","import { Chip, ChipGroup, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { useEventTypes } from '../../services/EventTypes/GetEventTypes';\n\ntype EventTypeListProps = {\n    appId: string;\n}\n\nexport const ListEventTypes: React.FunctionComponent<EventTypeListProps> = (props) => {\n    const getEventTypes = useEventTypes(props.appId);\n\n    if (getEventTypes.loading) {\n        return <Spinner />;\n    }\n\n    if (getEventTypes.payload?.status !== 200) {\n        return <span>Error while loading eventtypes: {getEventTypes.errorObject.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <ChipGroup>\n                { getEventTypes.payload.value.length === 0 ? 'No event types' : '' }\n            </ChipGroup>\n            <ChipGroup>\n                { getEventTypes.payload.value.map(e => (\n                    <Chip isReadOnly key={ e.id }>{ e.displayName}</Chip>\n                ))}\n            </ChipGroup>\n        </React.Fragment>\n    );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport type CreateApplication = {\n    id?: string;\n    displayName: string;\n    bundleId: string;\n    name: string;\n    ownerRole?: string;\n}\n\nconst actionCreator =  (params: CreateApplication) => {\n    if (params.id === undefined) {\n        return Operations.InternalResourceCreateApplication.actionCreator({\n            body: {\n                bundle_id: params.bundleId,\n                display_name: params.displayName,\n                name: params.name,\n                owner_role: params.ownerRole\n            }\n        });\n    }\n\n    return Operations.InternalResourceUpdateApplication.actionCreator({\n        appId: params.id,\n        body: {\n            id: params.id,\n            bundle_id: params.bundleId,\n            display_name: params.displayName,\n            name: params.name\n        }\n    });\n};\n\nexport const useCreateApplication = () => {\n    return useMutation(actionCreator);\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport const deleteApplicationActionCreator = (appId: string) => {\n    return Operations.InternalResourceDeleteApplication.actionCreator({\n        appId\n    });\n};\n\nexport const useDeleteApplication = () => useMutation<boolean>(deleteApplicationActionCreator);\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Application } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalResourceGetApplications.Payload) => {\n        if (payload.status === 200) {\n            const applications: ReadonlyArray<Application> = payload.value.map(value => ({\n                id: value.id ?? '',\n                displayName: value.display_name,\n                bundleId: value.bundle_id,\n                name: value.name\n            }));\n\n            return validatedResponse(\n                'Applications',\n                200,\n                applications,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useApplications = (bundleId: string) => {\n    const query = useQuery(Operations.InternalResourceGetApplications.actionCreator({\n        bundleId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Bundle } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalResourceGetBundle.Payload) => {\n        if (payload.status === 200) {\n            const bundleTypes: Bundle = {\n                id: payload.value.id ?? '',\n                displayName: payload.value.display_name,\n                applications: []\n            };\n\n            return validatedResponse(\n                'Bundle',\n                200,\n                bundleTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useBundleTypes = (bundleId: string) => {\n    const query = useQuery(Operations.InternalResourceGetBundle.actionCreator({\n        bundleId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { CodeEditor, Language } from '@patternfly/react-code-editor';\nimport {\n    ActionGroup,\n    Button,\n    PageSection,\n    Split,\n    SplitItem,\n    Title\n} from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { useUserPermissions } from '../app/PermissionContext';\n\nconst defaultSubjectTemplate = `\nImportant email to {user.firstName} from MyCoolApp!\n`.trimLeft();\n\nconst defaultBodyTemplate = `\n<div>Hello {user.firstName} {user.lastName},</div>\n<div>We have some important news for you, MyApp has a notification for you</div>\n<div>As a reminder, current user: {user.username}: is active? {user.isActive}; is admin? {user.isAdmin}</div>\n<div>\n    System with name <strong>{action.context.display_name}</strong> (<strong>{action.context.inventory_id}</strong>) \n    did a check in at {action.context.system_check_in.toUtcFormat()}. \n    It was about {action.context.system_check_in.toTimeAgo()}\n</div>\n<div>This is a loop:</div>\n{#if action.events.size() > 0}\n<ul>\n    {#each action.events}\n        <li>\n            <a href=\"http://google.com?q={it.payload.my_id}\" target=\"_blank\">{it.payload.my_name}</a>\n        </li>\n    {/each}\n</ul>\n<div>Have a nice day!</div>\n{/if}\n`.trimLeft();\n\nconst defaultPayload = JSON.stringify({\n    bundle: 'rhel',\n    application: 'policies',\n    event_type: 'policy-triggered',\n    timestamp: '2021-08-05T16:21:14.243',\n    account_id: '5758117',\n    // eslint-disable-next-line max-len\n    context: '{\"inventory_id\":\"80f7e57d-a16a-4189-82af-1d68a747c8b3\",\"system_check_in\":\"2021-08-05T16:21:12.953036\",\"display_name\":\"cool display name\"}',\n    events: [\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"3df53241-3e09-481b-a322-4892caaaaadc\",\"my_name\":\"Red color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"6c5e8451-a40a-4bb7-ab9a-0cb10a4c577d\",\"my_name\":\"Green color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"b4c6378a-c1fb-4d3e-8e9b-7e5bdfc09dd3\",\"my_name\":\"Blue color\"}'\n        }\n    ]\n}, null, 2);\n\nexport const EmailTemplatePage: React.FunctionComponent = () => {\n    const { isAdmin } = useUserPermissions();\n    const handleBackClick = React.useCallback(() => {\n        history.back();\n    }, []);\n\n    return (\n        <>{ isAdmin &&\n            <><PageSection>\n                <Split>\n                    <SplitItem isFilled>\n                        <Title headingLevel=\"h1\">Create an Email Template</Title>\n                    </SplitItem>\n                </Split>\n            </PageSection><PageSection>\n                <Title headingLevel=\"h2\">Subject template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    code={ defaultSubjectTemplate }\n                    isMinimapVisible={ false }\n                    height=\"50px\" />\n            </PageSection><PageSection>\n                <Title headingLevel=\"h2\">Body template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    code={ defaultBodyTemplate }\n                    isMinimapVisible={ false }\n                    height=\"300px\" />\n            </PageSection><PageSection>\n                <Title headingLevel=\"h2\">Payload</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultPayload }\n                    height=\"300px\"\n                    isLanguageLabelVisible\n                    language={ Language.json } />\n            </PageSection>\n            <PageSection>\n                <ActionGroup>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button variant='primary' type='submit'>Submit</Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button variant='secondary' type='reset' onClick={ handleBackClick }>Back</Button>\n                        </SplitItem>\n                    </Split>\n                </ActionGroup>\n            </PageSection>\n            </>\n        }\n        </>\n    );\n};\n","import { CodeEditor, CodeEditorControl, Language } from '@patternfly/react-code-editor';\nimport {\n    Alert,\n    AlertVariant,\n    List,\n    ListItem,\n    PageSection,\n    Stack, StackItem,\n    Title\n} from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { global_palette_green_400 } from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { useParameterizedQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nconst defaultPayload = JSON.stringify({}, null, 2);\n\ntype ValidationResult = {\n    code: string;\n    errors: Record<string, Array<string>>;\n}\n\nconst renderErrors = (errors: Record<string, Array<string>>) => {\n    const sortedKeys = Object.keys(errors).sort();\n    const flatErrors: Array<string> = [];\n    sortedKeys.forEach(key => {\n        errors[key].forEach(error => flatErrors.push(error));\n    });\n\n    return <List>\n        { flatErrors.map((value, index) => (<ListItem key={ index }>{ value }</ListItem>)) }\n    </List>;\n};\n\nexport const MessageValidatorPage: React.FunctionComponent = () => {\n\n    const validateService = useParameterizedQuery(Operations.ValidationResourceValidateMessage.actionCreator);\n\n    const [ message, setMessage ] = React.useState<string>(defaultPayload);\n    const [ validationResult, setValidationResult ] = React.useState<ValidationResult>();\n\n    const runValidation = React.useCallback(async () => {\n\n        let jsonMessage;\n        try {\n            jsonMessage = JSON.parse(message);\n        } catch (e: any) {\n            console.log(e);\n            setValidationResult({\n                errors: {\n                    $: [\n                        'Not a valid json: ' + e.message\n                    ]\n                },\n                code: message\n            });\n            return;\n        }\n\n        const response = await validateService.query({\n            body: jsonMessage\n        });\n\n        if (response.payload?.status === 200) {\n            setValidationResult({\n                errors: {},\n                code: message\n            });\n        } else if (response.payload?.status === 400) {\n            setValidationResult({\n                errors: response.payload.value.errors,\n                code: message\n            });\n        }\n\n    }, [ validateService, message ]);\n\n    const validatePayloadButton = <CodeEditorControl\n        icon={ <CheckCircleIcon color={ global_palette_green_400.value } /> }\n        toolTipText=\"Validates the message\"\n        onClick={ runValidation }\n    />;\n\n    let validationStatus: AlertVariant;\n    let validationMessage;\n\n    if (validationResult?.code === message) {\n        if (Object.keys(validationResult.errors).length === 0) {\n            validationStatus = AlertVariant.success;\n            validationMessage = 'Message is valid';\n        } else {\n            validationStatus = AlertVariant.danger;\n            validationMessage = <>\n                <div>Message is invalid:</div>\n                {renderErrors(validationResult.errors)}\n            </>;\n        }\n    } else {\n        validationStatus = AlertVariant.warning;\n        validationMessage = <>\n            <div>Message has not been validated. Use the validation button</div>\n            { validationResult?.errors && Object.keys(validationResult.errors).length > 0 && (\n                <>\n                    <div>Previous errors:</div>\n                    { renderErrors(validationResult.errors) }\n                </>\n            ) }\n        </>;\n    }\n\n    return  (\n        <>\n            <PageSection>\n                <Stack>\n                    <StackItem isFilled>\n                        <Title headingLevel=\"h1\" >Notification validator</Title>\n                    </StackItem>\n                    <StackItem>\n                        <span>You can use this utility to verify the notification you are sending is valid and tweak as needed.</span>\n                    </StackItem>\n                </Stack>\n            </PageSection>\n            <PageSection>\n                <Alert isInline title={ validationMessage } variant={ validationStatus }  />\n                <CodeEditor\n                    showEditor={ true }\n                    isUploadEnabled\n                    isDownloadEnabled\n                    isCopyEnabled\n                    isMinimapVisible={ false }\n                    customControls={ validatePayloadButton }\n                    code={ message }\n                    height=\"500px\"\n                    isLanguageLabelVisible\n                    language={ Language.json }\n                    onChange={ setMessage }\n                />\n            </PageSection>\n        </>\n    );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport type RenderEmailRequest = {\n    subject: string;\n    body: string;\n    payload: string;\n}\n\nconst actionCreator = (params: RenderEmailRequest) => Operations.TemplateResourceRenderEmailTemplate.actionCreator({\n    body: {\n        subject_template: params.subject,\n        body_template: params.body,\n        payload: params.payload\n    }\n});\n\nexport const useRenderEmailRequest = () => {\n    return useMutation(actionCreator);\n};\n","import { CodeEditor, Language } from '@patternfly/react-code-editor';\nimport {\n    HelperText,\n    HelperTextItem,\n    PageSection,\n    Spinner,\n    Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Title\n} from '@patternfly/react-core';\nimport { Button } from '@patternfly/react-core/';\nimport * as React from 'react';\n\nimport { useRenderEmailRequest } from '../services/RenderEmailRequest';\n\nconst defaultSubjectTemplate = `\nImportant email to {user.firstName} from MyCoolApp!\n`.trimLeft();\n\nconst defaultBodyTemplate = `\n<div>Hello {user.firstName} {user.lastName},</div>\n<div>We have some important news for you, MyApp has a notification for you</div>\n<div>As a reminder, current user: {user.username}: is active? {user.isActive}; is admin? {user.isAdmin}</div>\n<div>\n    System with name <strong>{action.context.display_name}</strong> (<strong>{action.context.inventory_id}</strong>) \n    did a check in at {action.context.system_check_in.toUtcFormat()}. \n    It was about {action.context.system_check_in.toTimeAgo()}\n</div>\n<div>This is a loop:</div>\n{#if action.events.size() > 0}\n<ul>\n    {#each action.events}\n        <li>\n            <a href=\"http://google.com?q={it.payload.my_id}\" target=\"_blank\">{it.payload.my_name}</a>\n        </li>\n    {/each}\n</ul>\n<div>Have a nice day!</div>\n{/if}\n`.trimLeft();\n\nconst defaultPayload = JSON.stringify({\n    bundle: 'rhel',\n    application: 'policies',\n    event_type: 'policy-triggered',\n    timestamp: '2021-08-05T16:21:14.243',\n    account_id: '5758117',\n    // eslint-disable-next-line max-len\n    context: '{\"inventory_id\":\"80f7e57d-a16a-4189-82af-1d68a747c8b3\",\"system_check_in\":\"2021-08-05T16:21:12.953036\",\"display_name\":\"cool display name\"}',\n    events: [\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"3df53241-3e09-481b-a322-4892caaaaadc\",\"my_name\":\"Red color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"6c5e8451-a40a-4bb7-ab9a-0cb10a4c577d\",\"my_name\":\"Green color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"b4c6378a-c1fb-4d3e-8e9b-7e5bdfc09dd3\",\"my_name\":\"Blue color\"}'\n        }\n    ]\n}, null, 2);\n\ntype RenderedTemplateProps = {\n    isLoading: true;\n} | {\n   isLoading: false;\n   succeeded: true;\n   subject: string;\n   body: string;\n} | {\n    isLoading: false;\n    succeeded: false;\n    error: string;\n};\n\nconst RenderedTemplate: React.FunctionComponent<RenderedTemplateProps> = props => {\n    if (props.isLoading) {\n        return <Spinner />;\n    }\n\n    if (props.succeeded) {\n        return (\n            <>\n                <StackItem>\n                    <span><strong>Subject:</strong> { props.subject }</span>\n                </StackItem>\n                <StackItem>\n                    <strong>Body:</strong>\n                </StackItem>\n                <StackItem>\n                    <iframe width=\"100%\" srcDoc={ props.body } />\n                </StackItem>\n            </>\n        );\n    }\n\n    return (\n        <StackItem>\n            <HelperText>\n                <HelperTextItem variant=\"error\">{ props.error }</HelperTextItem>\n            </HelperText>\n        </StackItem>\n    );\n};\n\nexport const RenderEmailPage: React.FunctionComponent = () => {\n    const emailTemplate = useRenderEmailRequest();\n    const [ subjectTemplate, setSubjectTemplate ] = React.useState<string | undefined>(defaultSubjectTemplate);\n    const [ bodyTemplate, setBodyTemplate ] = React.useState<string | undefined>(defaultBodyTemplate);\n    const [ payload, setPayload ] = React.useState<string | undefined>(defaultPayload);\n\n    React.useEffect(() => {\n        const mutate = emailTemplate.mutate;\n        mutate({\n            subject: subjectTemplate ?? '',\n            body: bodyTemplate ?? '',\n            payload: payload ?? ''\n        });\n        // We only want to activate this once\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ ]);\n\n    let renderedProps: RenderedTemplateProps;\n\n    if (emailTemplate.loading) {\n        renderedProps = {\n            isLoading: true\n        };\n    } else if (emailTemplate.payload?.status === 200) {\n        renderedProps = {\n            isLoading: false,\n            succeeded: true,\n            subject: emailTemplate.payload.value.subject ?? '',\n            body: emailTemplate.payload.value.body ?? ''\n        };\n    } else if (emailTemplate.payload?.status === 400) {\n        renderedProps = {\n            isLoading: false,\n            succeeded: false,\n            error: emailTemplate.payload.value.message ?? 'Unknown error'\n        };\n    } else {\n        renderedProps = {\n            isLoading: false,\n            succeeded: false,\n            error: 'Unknown error'\n        };\n    }\n\n    const onRender = React.useCallback(() => {\n        const mutate = emailTemplate.mutate;\n        mutate({\n            subject: subjectTemplate ?? '',\n            body: bodyTemplate ?? '',\n            payload: payload ?? ''\n        });\n    }, [ emailTemplate.mutate, subjectTemplate, bodyTemplate, payload ]);\n\n    return (\n        <>\n            <PageSection>\n                <Split>\n                    <SplitItem isFilled>\n                        <Title headingLevel=\"h1\" >Email templates</Title>\n                    </SplitItem>\n                    <SplitItem>\n                        <Button onClick={ onRender }>Render</Button>\n                    </SplitItem>\n                </Split>\n            </PageSection>\n            <PageSection>\n                <Stack>\n                    <StackItem>\n                        <Title headingLevel=\"h2\">Result</Title>\n                    </StackItem>\n                    <RenderedTemplate { ...renderedProps }  />\n                </Stack>\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Subject template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultSubjectTemplate }\n                    height=\"50px\"\n                    onChange={ setSubjectTemplate }\n                />\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Body template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultBodyTemplate }\n                    height=\"300px\"\n                    onChange={ setBodyTemplate }\n                />\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Payload</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultPayload }\n                    height=\"300px\"\n                    isLanguageLabelVisible\n                    language={ Language.json }\n                    onChange={ setPayload }\n                />\n            </PageSection>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\n\nimport { AggregationPage } from './pages/AggregationPage';\nimport { ApplicationPage } from './pages/ApplicationPage';\nimport { BundlePage } from './pages/BundlePage';\nimport { EmailTemplatePage } from './pages/EmailTemplatePage';\nimport { MessageValidatorPage } from './pages/MessageValidatorPage';\nimport { RenderEmailPage } from './pages/RenderEmailPage';\n\ninterface Path {\n    readonly path: string;\n    readonly component: React.ComponentType;\n}\n\nexport const linkTo = {\n    bundle: (bundleId: string) => `/bundle/${bundleId}`,\n    application: (applicationId: string) => `/application/${applicationId}`,\n    aggregation: () => '/aggregation',\n    email: () => '/email',\n    emailTemplates: () => `/emailTemplates`,\n    messageValidator: () => '/utils/message-validator'\n};\n\nconst pathRoutes: Path[] = [\n    {\n        path: linkTo.aggregation(),\n        component: AggregationPage\n    },\n    {\n        path: linkTo.application(':applicationId'),\n        component: ApplicationPage\n    },\n    {\n        path: linkTo.bundle(':bundleId'),\n        component: BundlePage\n    },\n    {\n        path: linkTo.email(),\n        component: RenderEmailPage\n    },\n    {\n        path: linkTo.emailTemplates(),\n        component: EmailTemplatePage\n    },\n    {\n        path: linkTo.messageValidator(),\n        component: MessageValidatorPage\n    }\n];\n\nexport const Routes: React.FunctionComponent<unknown> = _props => {\n    return (\n        <Switch>\n            { pathRoutes.map(pathRoute => (\n                <Route\n                    key={ pathRoute.path }\n                    component={ pathRoute.component }\n                    path={ pathRoute.path }\n                />\n            )) }\n            <Redirect to={ linkTo.aggregation() } />\n        </Switch>\n    );\n};\n","import { Breadcrumb, BreadcrumbItem, PageSection, Spinner, Title } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useParameterizedQuery } from 'react-fetching-library';\nimport { useParams } from 'react-router';\n\nimport { useUserPermissions } from '../app/PermissionContext';\nimport { AggregationTemplateCard } from '../components/EmailTemplates/EmailTemplateCard';\nimport { InstantEmailTemplateTable } from '../components/EmailTemplates/EmailTemplateTable';\nimport { CreateEditModal } from '../components/EventTypes/CreateEditModal';\nimport { DeleteModal } from '../components/EventTypes/DeleteModal';\nimport { EventTypeTable } from '../components/EventTypes/EventTypeTable';\nimport { BreadcrumbLinkItem } from '../components/Wrappers/BreadCrumbLinkItem';\nimport { linkTo } from '../Routes';\nimport { useAggregationTemplates } from '../services/EmailTemplates/GetAggregationTemplates';\nimport { useCreateEventType } from '../services/EventTypes/CreateEventTypes';\nimport { useDeleteEventType } from '../services/EventTypes/DeleteEventType';\nimport { useApplicationTypes } from '../services/EventTypes/GetApplication';\nimport { getBundleAction  } from '../services/EventTypes/GetBundleAction';\nimport { EventType } from '../types/Notifications';\nimport { useEventTypes } from './ApplicationPage/useEventTypes';\n\ntype ApplicationPageParams = {\n    applicationId: string;\n}\n\nexport const ApplicationPage: React.FunctionComponent = () => {\n    const { hasPermission, isAdmin } = useUserPermissions();\n    const { applicationId } = useParams<ApplicationPageParams>();\n    const eventTypesQuery = useEventTypes(applicationId);\n    const applicationTypesQuery = useApplicationTypes(applicationId);\n    const deleteEventTypeMutation = useDeleteEventType();\n    const newEvent = useCreateEventType();\n    const aggregationTemplates = useAggregationTemplates(applicationId);\n\n    const [ eventTypes, setEventTypes ] = React.useState<Partial<EventType>>({});\n    const [ showModal, setShowModal ] = React.useState(false);\n    const [ isEdit, setIsEdit ] = React.useState(false);\n    const [ showDeleteModal, setShowDeleteModal ] = React.useState(false);\n\n    const getBundleId = React.useMemo(() => {\n        if (applicationTypesQuery.payload?.type === 'Application') {\n            return applicationTypesQuery.payload.value.bundleId;\n        }\n\n        return undefined;\n    }, [ applicationTypesQuery.payload ]);\n\n    const bundleNameQuery = useParameterizedQuery(getBundleAction);\n\n    React.useEffect(() => {\n        const query = bundleNameQuery.query;\n        if (getBundleId) {\n            query(getBundleId);\n        }\n    }, [ getBundleId, bundleNameQuery.query ]);\n\n    const bundle = React.useMemo(() => {\n        if (bundleNameQuery.payload?.status === 200) {\n            return bundleNameQuery.payload.value;\n        }\n\n        return undefined;\n    }, [ bundleNameQuery.payload?.status, bundleNameQuery.payload?.value ]);\n\n    const application = useMemo(() => {\n        if (applicationTypesQuery.payload?.status === 200) {\n            return applicationTypesQuery.payload.value;\n        }\n\n        return undefined;\n    }, [ applicationTypesQuery.payload?.status, applicationTypesQuery.payload?.value ]);\n\n    const aggregationEmailTemplates = useMemo(() => {\n        if (aggregationTemplates.payload?.status === 200) {\n            return aggregationTemplates.payload.value;\n        }\n\n        return undefined;\n    }, [ aggregationTemplates.payload?.status, aggregationTemplates.payload?.value ]);\n\n    const createEventType = () => {\n        setShowModal(true);\n        setIsEdit(false);\n        setEventTypes({});\n    };\n\n    const handleSubmit = React.useCallback((eventType) => {\n        setShowModal(false);\n        const mutate = newEvent.mutate;\n        mutate({\n            id: eventType.id,\n            displayName: eventType.displayName ?? '',\n            name: eventType.name ?? '',\n            description: eventType.description ?? '',\n            applicationId\n\n        })\n        .then (eventTypesQuery.reload);\n\n    }, [ applicationId, eventTypesQuery.reload, newEvent.mutate ]);\n\n    const editEventType = (e: EventType) => {\n        setShowModal(true);\n        setIsEdit(true);\n        setEventTypes(e);\n    };\n\n    const handleDelete = React.useCallback(async () => {\n        setShowDeleteModal(false);\n        const deleteEventType = deleteEventTypeMutation.mutate;\n        const response = await deleteEventType(eventTypes.id);\n        if (response.error) {\n            return false;\n        }\n\n        return true;\n    }, [ deleteEventTypeMutation.mutate, eventTypes.id ]);\n\n    const deleteEventTypeModal = (e: EventType) => {\n        setShowDeleteModal(true);\n        setEventTypes(e);\n    };\n\n    const onClose = () => {\n        setShowModal(false);\n        eventTypesQuery.reload();\n    };\n\n    const onDeleteClose = () => {\n        setShowDeleteModal(false);\n        eventTypesQuery.reload();\n    };\n\n    if (eventTypesQuery.error) {\n        return <span>Error while loading eventtypes: {eventTypesQuery.error.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel=\"h1\">\n                    <Breadcrumb>\n                        <BreadcrumbItem target='#'> Bundles </BreadcrumbItem>\n                        <BreadcrumbLinkItem to={ linkTo.bundle(getBundleId ?? '') }>\n                            { bundle ? bundle.display_name : <Spinner /> }\n                        </BreadcrumbLinkItem>\n                        <BreadcrumbItem to='#' isActive> { (applicationTypesQuery.loading\n                        || applicationTypesQuery.payload?.status !== 200) ? <Spinner /> : applicationTypesQuery.payload.value.displayName }\n                        </BreadcrumbItem>\n                    </Breadcrumb></Title>\n                <EventTypeTable\n                    hasPermissions={ application ? hasPermission(application.id) : false }\n                    eventTypes={ eventTypesQuery.data }\n                    onCreateEventType={ createEventType }\n                    onEditEventType={ editEventType }\n                    onDeleteEventTypeModal={ deleteEventTypeModal }\n                />\n            </PageSection>\n            <AggregationTemplateCard\n                applicationName={ application?.displayName }\n                bundleName={ bundle?.display_name }\n                templateName={ aggregationEmailTemplates?.map(a => a.body_template?.name) } />\n            { isAdmin && application && <InstantEmailTemplateTable application={ application } /> }\n            <CreateEditModal\n                isEdit={ isEdit }\n                initialEventType= { eventTypes }\n                showModal={ showModal }\n                applicationName={ application?.displayName }\n                onClose={ onClose }\n                onSubmit={ handleSubmit }\n                isLoading={ eventTypesQuery.loading }\n            />\n            <DeleteModal\n                onDelete={ handleDelete }\n                isOpen={ showDeleteModal }\n                onClose={ onDeleteClose }\n                eventTypeName={ eventTypes.name }\n                applicationName={ application?.displayName }\n                bundleName={ bundle?.display_name }\n            />\n        </React.Fragment>\n\n    );\n};\n","import produce, { original } from 'immer';\nimport { useEffect, useState } from 'react';\nimport { useClient } from 'react-fetching-library';\n\nimport {\n    Operations\n} from '../../generated/OpenapiInternal';\nimport { useEventTypes as useGetEventTypes } from '../../services/EventTypes/GetEventTypes';\nimport { EventTypeRow } from '../../types/Notifications';\n\ninterface EventTypesController {\n    data: ReadonlyArray<EventTypeRow> | undefined;\n    loading: boolean;\n    reload: () => void;\n    error: any;\n}\n\nexport const useEventTypes = (applicationId: string): EventTypesController => {\n    const [ eventTypeRows, setEventTypeRows ] = useState<ReadonlyArray<EventTypeRow>>();\n    const eventTypesQuery = useGetEventTypes(applicationId);\n\n    const { query } = useClient();\n\n    useEffect(() => {\n        setEventTypeRows(undefined);\n    }, [ applicationId ]);\n\n    useEffect(() => {\n        if (eventTypesQuery.payload?.status === 200) {\n            const eventTypes = eventTypesQuery.payload.value.map<EventTypeRow>(e => ({\n                ...e,\n                instantEmail: {\n                    isLoading: true\n                }\n            }));\n\n            setEventTypeRows(eventTypes);\n\n            eventTypes.forEach(row => {\n                query(Operations.TemplateResourceGetInstantEmailTemplateByEventType.actionCreator({\n                    eventTypeId: row.id\n                }))\n                .then(result => {\n                    if (result.payload?.status === 200 || result.payload?.status === 404) {\n                        const value = result.payload.status === 200 ? result.payload.value.id : undefined;\n                        setEventTypeRows(produce(draft => {\n                            const originalValue = original(draft);\n                            if (draft && originalValue) {\n                                const index = originalValue.findIndex(r => r.id === row.id);\n                                if (index !== -1) {\n                                    draft[index].instantEmail = {\n                                        isLoading: false,\n                                        id: value === null ? undefined : value\n                                    };\n                                }\n                            }\n                        }));\n                    }\n                });\n            });\n        }\n    }, [ eventTypesQuery.payload, eventTypesQuery.loading, query ]);\n\n    return {\n        data: eventTypeRows,\n        loading: eventTypesQuery.loading,\n        reload: eventTypesQuery.query,\n        error: eventTypesQuery.errorObject\n    };\n};\n","import { Breadcrumb, BreadcrumbItem, Button, PageSection, Spinner,\n    Title, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { useUserPermissions } from '../app/PermissionContext';\nimport { CreateEditApplicationModal } from '../components/Applications/CreateEditApplicationModal';\nimport { DeleteApplicationModal } from '../components/Applications/DeleteApplicationModal';\nimport { ListEventTypes } from '../components/EventTypes/ListEventTypes';\nimport { linkTo } from '../Routes';\nimport { useCreateApplication } from '../services/Applications/CreateApplication';\nimport { useDeleteApplication } from '../services/Applications/DeleteApplication';\nimport { useApplications } from '../services/Applications/GetApplicationById';\nimport { useBundleTypes } from '../services/Applications/GetBundleById';\nimport { Application, RoleOwnedApplication } from '../types/Notifications';\n\ntype BundlePageParams = {\n    bundleId: string;\n}\n\nexport const BundlePage: React.FunctionComponent = () => {\n    const { hasPermission, refresh, isAdmin } = useUserPermissions();\n    const { bundleId } = useParams<BundlePageParams>();\n    const getBundles = useBundleTypes(bundleId);\n    const getApplications = useApplications(bundleId);\n    const newApplication = useCreateApplication();\n    const deleteApplicationMutation = useDeleteApplication();\n\n    const columns = [ 'Application', 'Name', 'Event Types', 'Application Id' ];\n\n    const [ application, setApplication ] = React.useState<Partial<Application>>({});\n    const [ showModal, setShowModal ] = React.useState(false);\n    const [ showDeleteModal, setShowDeleteModal ] = React.useState(false);\n    const [ isEdit, setIsEdit ] = React.useState(false);\n\n    const bundle = React.useMemo(() => {\n        if (getBundles.payload?.status === 200) {\n            return getBundles.payload.value;\n        }\n\n        return undefined;\n    }, [ getBundles.payload?.status, getBundles.payload?.value ]);\n\n    const createApplication = () => {\n        setShowModal(true);\n        setIsEdit(false);\n        setApplication({});\n    };\n\n    const editApplication = (a: Application) => {\n        setShowModal(true);\n        setIsEdit(true);\n        setApplication(a);\n\n    };\n\n    const handleSubmit = React.useCallback((application: Partial<RoleOwnedApplication>) => {\n        setShowModal(false);\n        const mutate = newApplication.mutate;\n        mutate({\n            id: application.id,\n            displayName: application.displayName ?? '',\n            name: application.name ?? '',\n            bundleId,\n            ownerRole: application.ownerRole\n        })\n        .then(r => {\n            if (r.payload?.status === 200 && !isAdmin) {\n                refresh();\n            }\n\n            return r;\n        })\n        .then(getApplications.query);\n\n    }, [ bundleId, getApplications.query, newApplication.mutate, isAdmin, refresh ]);\n\n    const onClose = () => {\n        setShowModal(false);\n        setApplication({});\n        getApplications.query();\n    };\n\n    const handleDelete = React.useCallback(async () => {\n        setShowDeleteModal(false);\n        const deleteApplication = deleteApplicationMutation.mutate;\n        const response = await deleteApplication(application.id);\n        if (response.error) {\n            return false;\n        }\n\n        return true;\n    }, [ application.id, deleteApplicationMutation.mutate ]);\n\n    const deleteApplicationModal = (a: Application) => {\n        setShowDeleteModal(true);\n        setApplication(a);\n    };\n\n    const onDeleteClose = () => {\n        setShowDeleteModal(false);\n        getApplications.query();\n    };\n\n    if (getApplications.loading) {\n        return <Spinner />;\n    }\n\n    if (getApplications.payload?.status !== 200) {\n        return <span>Error while loading applications: {getApplications.errorObject.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel='h1'>\n                    <Breadcrumb>\n                        <BreadcrumbItem target='#'> Bundles </BreadcrumbItem>\n                        <BreadcrumbItem target='#' >{ (getBundles.loading || getBundles.payload?.status !== 200)\n                            ? <Spinner /> : getBundles.payload.value.displayName }\n                        </BreadcrumbItem>\n                    </Breadcrumb>\n                </Title>\n                <TableComposable aria-label=\"Applications table\">\n                    <Thead>\n                        <Toolbar>\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <Button variant='primary' type='button' onClick={ createApplication }> Create Application </Button>\n                                    {showModal && <CreateEditApplicationModal\n                                        isEdit={ isEdit }\n                                        bundleName={ bundle?.displayName }\n                                        initialApplication={ application }\n                                        showModal={ showModal }\n                                        applicationName={ application.displayName }\n                                        onClose={ onClose }\n                                        onSubmit={ handleSubmit }\n                                        isLoading={ getApplications.loading }\n\n                                    />\n                                    }\n                                    <React.Fragment>\n                                        <DeleteApplicationModal\n                                            onDelete={ handleDelete }\n                                            isOpen={ showDeleteModal }\n                                            onClose={ onDeleteClose }\n                                            applicationName={ application.displayName }\n                                            bundleName={ bundle?.displayName }\n\n                                        />\n                                    </React.Fragment>\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Tr>\n                            {columns.map((column, columnIndex) => (\n                                <Th key={ columnIndex }>{column}</Th>\n                            ))}\n                        </Tr>\n                    </Thead>\n                    <Tbody>\n                        { getApplications.payload.value.map(a =>\n                            <Tr key={ a.id }>\n                                <Td>\n                                    <Button variant=\"link\" component={ (props: any) =>\n                                        <Link { ...props } to={ linkTo.application(a.id) } /> }>{ a.displayName }</Button>\n                                </Td>\n                                <Td>{ a.name}</Td>\n                                <Td>\n                                    <ListEventTypes\n                                        appId={ a.id }\n                                    />\n                                </Td>\n                                <Td>{ a.id }</Td>\n                                <Td>\n                                    <Button className='edit' type='button' variant='plain'\n                                        isDisabled={ !hasPermission(a.id) }\n                                        onClick={ () => editApplication(a) }\n                                    > { <PencilAltIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='delete' type='button' variant='plain'\n                                        isDisabled={ !isAdmin }\n                                        onClick={ () => deleteApplicationModal(a) }\n\n                                    >{ <TrashIcon /> } </Button></Td>\n                            </Tr>\n                        )}\n                    </Tbody>\n                </TableComposable>\n            </PageSection>\n        </React.Fragment>\n\n    );\n};\n\n","import { Nav, NavExpandable, NavItem, NavList } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nimport { linkTo } from '../Routes';\nimport { Bundle } from '../types/Notifications';\n\ntype EnhancedNavItemProps = {\n    to: string;\n}\n\nconst EnhancedNavItem: React.FunctionComponent<EnhancedNavItemProps> = props => {\n    const match = useRouteMatch({\n        path: props.to,\n        exact: true\n    });\n\n    return (\n        <NavItem isActive={ !!match }>\n            <Link to={ props.to }>\n                { props.children }\n            </Link>\n        </NavItem>\n    );\n};\n\nexport interface NavigationProps {\n    bundles: ReadonlyArray<Bundle>;\n}\n\nexport const Navigation: React.FunctionComponent<NavigationProps> = props => {\n    return (\n        <Nav>\n            <NavList>\n                <NavExpandable title='Bundles'>\n                    { props.bundles.map(b => (\n                        <EnhancedNavItem key={ b.id } to={ linkTo.bundle(b.id) }>{ b.displayName }\n                        </EnhancedNavItem>\n                    )) }\n                </NavExpandable>\n                <NavExpandable title=\"Utils\" isExpanded>\n                    <EnhancedNavItem to={ linkTo.messageValidator() }>\n                        Notification validator\n                    </EnhancedNavItem>\n                </NavExpandable>\n                <EnhancedNavItem to={ linkTo.email() }>\n                    Email templates\n                </EnhancedNavItem>\n                <EnhancedNavItem to={ linkTo.aggregation() }>\n                    Aggregation\n                </EnhancedNavItem>\n            </NavList>\n        </Nav>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/redhat-logo.f7405300.svg\";","import '@patternfly/react-core/dist/styles/base.css';\nimport './app.css';\n\nimport { Alert, AlertVariant, Brand, Page, PageHeader, PageSection, PageSidebar, Spinner } from '@patternfly/react-core';\nimport React, { useMemo } from 'react';\nimport { style } from 'typestyle';\n\nimport { Routes } from '../Routes';\nimport { useBundles } from '../services/EventTypes/GetBundles';\nimport { usePermissions } from '../services/Permissions';\nimport { useServerInfo } from '../services/ServerInfo';\nimport { Navigation } from './Navigation';\nimport { PermissionContext } from './PermissionContext';\nimport logo from './redhat-logo.svg';\n\nconst brandClassName = style({\n    width: 150\n});\n\ntype Message = {\n    show: false;\n} | {\n    show: true;\n    content: string;\n}\n\nexport const App: React.FunctionComponent<unknown> = () => {\n\n    const [ isNavOpen, setNavOpen ] = React.useState(true);\n\n    const onNavToggle = React.useCallback(() => setNavOpen(prev => !prev), [ setNavOpen ]);\n\n    const bundles = useBundles();\n    const serverInfo = useServerInfo();\n\n    const message = useMemo<Message>(() => {\n        const payload = serverInfo.payload;\n        if (payload?.status === 200) {\n            if (payload.value.environment === 'PROD') {\n                return {\n                    show: true,\n                    content: 'You are viewing the production environment - '\n                    + 'Any change you make here will be applied immediately and could disrupt the service.'\n                };\n            }\n\n            return {\n                show: false\n            };\n        }\n\n        return {\n            show: true,\n            content: 'Could not load the current environment. Please verify the URL before making any change.'\n        };\n    }, [ serverInfo.payload ]);\n    const permissionQuery = usePermissions();\n\n    const appHeader = <PageHeader\n        showNavToggle\n        logo={ <Brand className={ brandClassName } src={ logo } alt=\"Red Hat\" /> }\n        logoProps={ { href: '/internal' } }\n        isNavOpen={ isNavOpen }\n        onNavToggle={ onNavToggle }\n    />;\n\n    const permission = React.useMemo<PermissionContext>(() => {\n        const payload = permissionQuery.payload;\n        if (payload?.status === 200) {\n            return {\n                isAdmin: payload.value.is_admin,\n                applications: payload.value.applications.map(a => ({\n                    id: a.id,\n                    displayName: a.display_name\n                })),\n                roles: payload.value.roles,\n                refresh: permissionQuery.query\n            };\n        }\n\n        return {\n            isAdmin: false,\n            applications: [],\n            roles: [],\n            refresh: permissionQuery.query\n        };\n    }, [ permissionQuery.payload, permissionQuery.query ]);\n\n    if (bundles.isLoading || serverInfo.loading || permissionQuery.loading) {\n        return (\n            <Page\n                header={ appHeader }\n            >\n                <PageSection>\n                    <Spinner />\n                </PageSection>\n            </Page>\n        );\n    }\n\n    const appSidebar = <PageSidebar nav={ <Navigation bundles={ bundles.bundles } /> } isNavOpen={ isNavOpen } />;\n\n    return (\n        <PermissionContext.Provider value={ permission }>\n            <Page\n                sidebar={ appSidebar }\n                header={ appHeader }>\n                { message.show && (\n                    <PageSection>\n                        <Alert variant={ AlertVariant.warning } title={ message.content } />\n                    </PageSection>\n                )}\n                <Routes />\n            </Page>\n        </PermissionContext.Provider>\n    );\n};\n","import produce from 'immer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { QueryResponse, useClient } from 'react-fetching-library';\nimport { useUnmountPromise } from 'react-use';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Bundle } from '../../types/Notifications';\n\nexport const useBundles = () => {\n    const client = useClient();\n    const mounted = useUnmountPromise();\n\n    const [ bundles, setBundles ] = useState<ReadonlyArray<Bundle>>([]);\n\n    const [ isLoading, setLoading ] = useState<boolean>();\n\n    const query = useCallback(async () => {\n        const cQuery = client.query;\n        setLoading(true);\n\n        const bundleResponse = await cQuery(Operations.InternalResourceGetBundles.actionCreator());\n\n        if (bundleResponse.payload?.status === 200) {\n\n            const bundles: ReadonlyArray<Bundle> = bundleResponse.payload.value.map(bundleResponse => ({\n                id: bundleResponse.id ?? '',\n                displayName: bundleResponse.display_name,\n                applications: []\n            }));\n\n            const applicationsPromises: Array<Promise<QueryResponse<Operations.InternalResourceGetApplications.Payload>>> = [];\n            for (const bundle of bundleResponse.payload.value) {\n                if (bundle.id) {\n                    applicationsPromises.push(cQuery(Operations.InternalResourceGetApplications.actionCreator({\n                        bundleId: bundle.id\n                    })));\n                }\n            }\n\n            const applicationResponses = await Promise.all(applicationsPromises);\n\n            const reducedBundles = applicationResponses.map(r => r.payload).reduce((bundles, applications) => produce(bundles, draftBundles => {\n                if (applications?.status === 200) {\n                    const draftBundle = draftBundles.find(b => applications.value.length > 0 && b.id === applications.value[0].bundle_id);\n                    if (draftBundle) {\n                        draftBundle.applications = applications.value.map(a => ({\n                            id: a.id ?? '',\n                            displayName: a.display_name,\n                            name: a.name,\n                            bundleId: a.bundle_id\n                        }));\n                    }\n                }\n            }), bundles);\n\n            (await mounted(Promise.resolve(() => setBundles((reducedBundles)))))();\n        }\n\n        setLoading(false);\n    }, [ client.query, mounted ]);\n\n    useEffect(() => {\n        query();\n    }, [ query ]);\n\n    return {\n        bundles,\n        isLoading\n    };\n};\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport const useServerInfo = () => {\n    return useQuery(Operations.InternalResourceGetServerInfo.actionCreator());\n};\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport const usePermissions = () => {\n    return useQuery(Operations.InternalPermissionResourceGetPermissions.actionCreator());\n};\n","import '@patternfly/react-core/dist/styles/base.css';\n\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ClientContextProvider, createClient } from 'react-fetching-library';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app/App';\n\nconst client = createClient({\n    responseInterceptors: [ validateSchemaResponseInterceptor ]\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <ClientContextProvider client={ client }>\n                <App />\n            </ClientContextProvider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}