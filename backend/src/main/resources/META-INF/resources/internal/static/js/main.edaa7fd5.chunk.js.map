{"version":3,"sources":["generated/OpenapiInternal.ts","pages/AggregationPage.tsx","app/PermissionContext.ts","services/EventTypes/GetApplication.ts","services/EventTypes/GetEventTypes.ts","components/EventTypes/ListEventTypes.tsx","components/EmailTemplates/ViewEmailTemplateModal.tsx","components/EmailTemplates/EmailTemplateTable.tsx","components/EventTypes/CreateEditModal.tsx","components/EventTypes/DeleteModal.tsx","components/Wrappers/LinkAdapter.tsx","components/Wrappers/BreadCrumbLinkItem.tsx","services/EventTypes/CreateEventTypes.ts","services/EventTypes/DeleteEventType.ts","services/EventTypes/GetBundleAction.ts","components/Applications/CreateEditApplicationModal.tsx","components/Applications/DeleteApplicationModal.tsx","services/Applications/CreateApplication.ts","services/Applications/DeleteApplication.ts","services/Applications/GetApplicationById.ts","services/Applications/GetBundleById.ts","pages/EmailTemplatePage.tsx","pages/MessageValidatorPage.tsx","services/RenderEmailRequest.ts","pages/RenderEmailPage.tsx","Routes.tsx","pages/ApplicationPage.tsx","pages/BundlePage.tsx","app/Navigation.tsx","app/redhat-logo.svg","app/App.tsx","services/EventTypes/GetBundles.ts","services/ServerInfo.ts","services/Permissions.ts","index.tsx"],"names":["aggregationTemplate","trimLeft","PermissionContext","React","isAdmin","applications","roles","refresh","Error","useUserPermissions","permission","useContext","hasPermission","useCallback","appId","undefined","find","a","id","z","application_id","zodSchemaUUID","optional","nullable","role","nonstrict","bundle_id","display_name","name","owner_role","application","zodSchemaApplication1","body_template","zodSchemaTemplate","body_template_id","created","subject_template","subject_template_id","subscription_type","zodSchemaEmailSubscriptionType","updated","zodSchemaApplication","zodSchemaBasicAuthentication","actions","zodSchemaBehaviorGroupAction","bundle","zodSchemaBundle","default_behavior","zodSchemaBehaviorGroupActionId","zodSchemaCamelProperties","end_time","start_time","status","zodSchemaStatus","zodSchemaEmailSubscriptionProperties","zodSchemaEndpoint","data","links","meta","zodSchemaMeta","zodSchemaEndpointType","zodSchemaEnvironment","zodSchemaEventLogEntry","zodSchemaEventLogEntryAction","zodSchemaEventType","zodSchemaFacet","children","displayName","zodSchemaHttpType","event_type","event_type_id","application_display_name","is_admin","errors","details","endpointId","endpointSubType","endpointType","invocationResult","invocationTime","int","payload","ignore_preferences","only_admins","group_id","environment","zodSchemaWebhookProperties","max","password","username","endpoint","behaviorGroupId","basic_authentication","disable_ssl_verification","extras","secret_token","sub_type","url","description","enabled","properties","type","endpoint_id","endpoint_sub_type","endpoint_type","invocation_result","count","method","Schemas","InternalResourceHttpRoot","actionBuilder","queryParams","config","rules","ValidateRule","__Empty","build","Response200","InternalApplicationUserPermission","InternalPermissionResourceGetAccessList","InternalPermissionResourceAddAccess","params","body","InternalRoleAccess","InternalPermissionResourceGetPermissions","InternalUserPermissions","InternalPermissionResourceDeleteAccess","path","replace","internalRoleAccessId","toString","AdminResourceDebugRbac","query","rhid","AdminResourceSetAdminDown","AdminResourceMigrate","AdminResourceDeleteAllTemplates","InternalResourceCreateApplication","Application1","InternalResourceGetApplication","InternalResourceUpdateApplication","InternalResourceDeleteApplication","EventType","InternalResourceGetEventTypes","BehaviorGroup","InternalResourceGetDefaultBehaviorGroups","InternalResourceCreateDefaultBehaviorGroup","RequestDefaultBehaviorGroupPropertyList","InternalResourceUpdateDefaultBehaviorGroupActions","eventTypeId","InternalResourceLinkDefaultBehaviorToEventType","InternalResourceUnlinkDefaultBehaviorToEventType","InternalResourceUpdateDefaultBehaviorGroup","InternalResourceDeleteDefaultBehaviorGroup","Bundle","InternalResourceGetBundles","InternalResourceCreateBundle","InternalResourceGetBundle","bundleId","InternalResourceUpdateBundle","InternalResourceDeleteBundle","InternalResourceGetApplications","InternalResourceCreateEventType","InternalResourceUpdateEventType","InternalResourceDeleteEventType","InternalResourceGetServerInfo","ServerInfo","InternalResourceSetCurrentStatus","Template","TemplateResourceGetAllTemplates","TemplateResourceCreateTemplate","AggregationEmailTemplate","TemplateResourceGetAllAggregationEmailTemplates","TemplateResourceCreateAggregationEmailTemplate","TemplateResourceGetAggregationEmailTemplatesByApplication","TemplateResourceGetAggregationemailTemplate","templateId","TemplateResourceUpdateAggregationEmailTemplate","TemplateResourceDeleteAggregationEmailTemplate","InstantEmailTemplate","TemplateResourceGetAllInstantEmailTemplates","TemplateResourceCreateInstantEmailTemplate","TemplateResourceGetInstantEmailTemplates","TemplateResourceGetInstantEmailTemplate","TemplateResourceUpdateInstantEmailTemplate","TemplateResourceDeleteInstantEmailTemplate","subject","Response400","message","TemplateResourceRenderEmailTemplate","TemplateResourceGetTemplate","TemplateResourceUpdateTemplate","TemplateResourceDeleteTemplate","ValidationResourceValidate","eventType","ValidationResourceValidateMessage","MessageErrorValidationResponse","InternalResourceGetVersion","Operations","validateResponse","validationResponseTransformer","applicationTypes","value","validatedResponse","useApplicationTypes","applicationId","useQuery","actionCreator","queryPayload","useMemo","eventTypes","map","useEventTypes","ListEventTypes","props","getEventTypes","loading","Spinner","errorObject","ChipGroup","length","e","Chip","isReadOnly","ViewTemplateModal","Fragment","Modal","variant","ModalVariant","medium","title","applicationName","isOpen","showModal","onClose","Form","isHorizontal","ActionGroup","Button","onClick","EmailTemplateTable","useParams","applicationTypesQuery","showViewModal","setShowViewModal","viewModal","PageSection","Title","headingLevel","Breadcrumb","BreadcrumbItem","target","TableComposable","aria-label","Thead","Toolbar","ToolbarContent","ToolbarItem","isDisabled","component","to","linkTo","emailTemplates","Tr","column","columnIndex","Th","Tbody","r","Td","className","CreateEditModal","useState","initialEventType","setEventType","handleChange","event","prev","onSubmitLocal","onSubmit","useEffect","isEdit","FormGroup","label","fieldId","isRequired","helperText","HelperText","HelperTextItem","hasIcon","TextInput","onChange","TextArea","isLoading","DeleteModal","setErrors","onDelete","onDeleteImpl","alert","small","titleIconVariant","eventTypeName","bundleName","LinkAdapter","href","restProps","BreadcrumbLinkItem","deleteEventTypeActionCreator","getBundleAction","CreateEditApplicationModal","permissions","initialApplication","setApplication","ownerRole","FormSelect","FormSelectOption","DeleteApplicationModal","deleteApplicationActionCreator","bundleTypes","defaultSubjectTemplate","defaultBodyTemplate","defaultPayload","JSON","stringify","timestamp","account_id","context","events","metadata","renderErrors","sortedKeys","Object","keys","sort","flatErrors","forEach","key","error","push","List","index","ListItem","RenderedTemplate","succeeded","StackItem","width","srcDoc","aggregation","email","messageValidator","pathRoutes","onEditorDidMount","editor","monaco","layout","focus","getModels","updateOptions","tabSize","_value","controls","CodeEditorControl","icon","toolTipText","console","log","isVisible","CodeEditor","isDownloadEnabled","isUploadEnabled","customControls","isLineNumbersVisible","isLanguageLabelVisible","isMinimapVisible","language","Language","javascript","code","height","eventTypesQuery","deleteEventTypeMutation","useMutation","newEvent","setEventTypes","setShowModal","setIsEdit","showDeleteModal","setShowDeleteModal","getBundleId","bundleNameQuery","useParameterizedQuery","handleSubmit","mutate","then","handleDelete","deleteEventType","isActive","editEventType","deleteEventTypeModal","getBundles","useBundleTypes","getApplications","useApplications","newApplication","deleteApplicationMutation","deleteApplication","editApplication","deleteApplicationModal","renderedProps","emailTemplate","subjectTemplate","setSubjectTemplate","bodyTemplate","setBodyTemplate","setPayload","onRender","Split","SplitItem","isFilled","Stack","json","handleBackClick","history","back","hasGutter","validationStatus","validationMessage","validateService","setMessage","validationResult","setValidationResult","runValidation","jsonMessage","parse","$","response","validatePayloadButton","color","global_palette_green_400","AlertVariant","success","danger","warning","Alert","isInline","showEditor","isCopyEnabled","Routes","_props","pathRoute","EnhancedNavItem","match","useRouteMatch","exact","NavItem","Navigation","Nav","NavList","NavExpandable","bundles","b","isExpanded","brandClassName","style","App","isNavOpen","setNavOpen","onNavToggle","client","useClient","mounted","useUnmountPromise","setBundles","setLoading","cQuery","bundleResponse","applicationsPromises","Promise","all","applicationResponses","reducedBundles","reduce","produce","draftBundles","draftBundle","resolve","useBundles","serverInfo","show","content","permissionQuery","appHeader","PageHeader","showNavToggle","logo","Brand","src","alt","logoProps","Page","header","appSidebar","PageSidebar","nav","Provider","sidebar","createClient","responseInterceptors","validateSchemaResponseInterceptor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.edaa7fd5.chunk.js","sourcesContent":["/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const AddAccessRequest = zodSchemaAddAccessRequest();\n  export type AddAccessRequest = {\n    application_id?: UUID | undefined | null;\n    role?: string | undefined | null;\n  };\n\n  export const AddApplicationRequest = zodSchemaAddApplicationRequest();\n  export type AddApplicationRequest = {\n    bundle_id: UUID;\n    display_name: string;\n    name: string;\n    owner_role?: string | undefined | null;\n  };\n\n  export const AggregationEmailTemplate = zodSchemaAggregationEmailTemplate();\n  export type AggregationEmailTemplate = {\n    application?: Application1 | undefined | null;\n    application_id?: UUID | undefined | null;\n    body_template?: Template | undefined | null;\n    body_template_id: UUID;\n    created?: string | undefined | null;\n    id?: UUID | undefined | null;\n    subject_template?: Template | undefined | null;\n    subject_template_id: UUID;\n    subscription_type: EmailSubscriptionType;\n    updated?: string | undefined | null;\n  };\n\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    display_name: string;\n    id: UUID;\n  };\n\n  export const Application1 = zodSchemaApplication1();\n  export type Application1 = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const BehaviorGroup = zodSchemaBehaviorGroup();\n  export type BehaviorGroup = {\n    actions?: Array<BehaviorGroupAction> | undefined | null;\n    bundle?: Bundle | undefined | null;\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    default_behavior?: boolean | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    updated?: string | undefined | null;\n  };\n\n  export const BehaviorGroupAction = zodSchemaBehaviorGroupAction();\n  export type BehaviorGroupAction = {\n    created?: string | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    id?: BehaviorGroupActionId | undefined | null;\n  };\n\n  export const BehaviorGroupActionId = zodSchemaBehaviorGroupActionId();\n  export type BehaviorGroupActionId = {\n    behaviorGroupId: UUID;\n    endpointId: UUID;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const CamelProperties = zodSchemaCamelProperties();\n  export type CamelProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    extras?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    secret_token?: string | undefined | null;\n    sub_type?: string | undefined | null;\n    url: string;\n  };\n\n  export const CurrentStatus = zodSchemaCurrentStatus();\n  export type CurrentStatus = {\n    end_time?: string | undefined | null;\n    start_time?: string | undefined | null;\n    status: Status;\n  };\n\n  export const EmailSubscriptionProperties =\n    zodSchemaEmailSubscriptionProperties();\n  export type EmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'INSTANT' | 'DAILY';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookProperties | EmailSubscriptionProperties | CamelProperties)\n      | undefined\n      | null;\n    sub_type?: string | undefined | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointProperties = zodSchemaEndpointProperties();\n  export type EndpointProperties = unknown;\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType =\n    | 'webhook'\n    | 'email_subscription'\n    | 'default'\n    | 'camel';\n\n  export const Environment = zodSchemaEnvironment();\n  export type Environment = 'PROD' | 'STAGE' | 'EPHEMERAL' | 'LOCAL_SERVER';\n\n  export const EventLogEntry = zodSchemaEventLogEntry();\n  export type EventLogEntry = {\n    actions: Array<EventLogEntryAction>;\n    application: string;\n    bundle: string;\n    created: string;\n    event_type: string;\n    id: UUID;\n    payload?: string | undefined | null;\n  };\n\n  export const EventLogEntryAction = zodSchemaEventLogEntryAction();\n  export type EventLogEntryAction = {\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpoint_id?: UUID | undefined | null;\n    endpoint_sub_type?: string | undefined | null;\n    endpoint_type: EndpointType;\n    id: UUID;\n    invocation_result: boolean;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application1 | undefined | null;\n    application_id: UUID;\n    description?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    children?: Array<Facet> | undefined | null;\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const InstantEmailTemplate = zodSchemaInstantEmailTemplate();\n  export type InstantEmailTemplate = {\n    body_template?: Template | undefined | null;\n    body_template_id: UUID;\n    created?: string | undefined | null;\n    event_type?: EventType | undefined | null;\n    event_type_id?: UUID | undefined | null;\n    id?: UUID | undefined | null;\n    subject_template?: Template | undefined | null;\n    subject_template_id: UUID;\n    updated?: string | undefined | null;\n  };\n\n  export const InternalApplicationUserPermission =\n    zodSchemaInternalApplicationUserPermission();\n  export type InternalApplicationUserPermission = {\n    application_display_name: string;\n    application_id: UUID;\n    role: string;\n  };\n\n  export const InternalRoleAccess = zodSchemaInternalRoleAccess();\n  export type InternalRoleAccess = {\n    application_id: UUID;\n    id?: UUID | undefined | null;\n    role: string;\n  };\n\n  export const InternalUserPermissions = zodSchemaInternalUserPermissions();\n  export type InternalUserPermissions = {\n    applications: Array<Application>;\n    is_admin: boolean;\n    roles: Array<string>;\n  };\n\n  export const MessageErrorValidationResponse =\n    zodSchemaMessageErrorValidationResponse();\n  export type MessageErrorValidationResponse = {\n    errors: {\n      [x: string]: Array<string>;\n    };\n  };\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    endpointSubType?: string | undefined | null;\n    endpointType?: EndpointType | undefined | null;\n    id?: UUID | undefined | null;\n    invocationResult: boolean;\n    invocationTime: number;\n  };\n\n  export const PageEventLogEntry = zodSchemaPageEventLogEntry();\n  export type PageEventLogEntry = {\n    data: Array<EventLogEntry>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const PageEventType = zodSchemaPageEventType();\n  export type PageEventType = {\n    data: Array<EventType>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const RenderEmailTemplateRequest =\n    zodSchemaRenderEmailTemplateRequest();\n  export type RenderEmailTemplateRequest = {\n    body_template: string;\n    payload: string;\n    subject_template: string;\n  };\n\n  export const RequestDefaultBehaviorGroupPropertyList =\n    zodSchemaRequestDefaultBehaviorGroupPropertyList();\n  export type RequestDefaultBehaviorGroupPropertyList = {\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const RequestEmailSubscriptionProperties =\n    zodSchemaRequestEmailSubscriptionProperties();\n  export type RequestEmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    only_admins: boolean;\n  };\n\n  export const ServerInfo = zodSchemaServerInfo();\n  export type ServerInfo = {\n    environment?: Environment | undefined | null;\n  };\n\n  export const Status = zodSchemaStatus();\n  export type Status = 'UP' | 'MAINTENANCE';\n\n  export const Template = zodSchemaTemplate();\n  export type Template = {\n    created?: string | undefined | null;\n    data: string;\n    description: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const WebhookProperties = zodSchemaWebhookProperties();\n  export type WebhookProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  export const __Empty = zodSchema__Empty();\n  export type __Empty = string | undefined;\n\n  function zodSchemaAddAccessRequest() {\n      return z\n      .object({\n          application_id: zodSchemaUUID().optional().nullable(),\n          role: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAddApplicationRequest() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          display_name: z.string(),\n          name: z.string(),\n          owner_role: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAggregationEmailTemplate() {\n      return z\n      .object({\n          application: zodSchemaApplication1().optional().nullable(),\n          application_id: zodSchemaUUID().optional().nullable(),\n          body_template: zodSchemaTemplate().optional().nullable(),\n          body_template_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          subject_template: zodSchemaTemplate().optional().nullable(),\n          subject_template_id: zodSchemaUUID(),\n          subscription_type: zodSchemaEmailSubscriptionType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          display_name: z.string(),\n          id: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplication1() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroup() {\n      return z\n      .object({\n          actions: z.array(zodSchemaBehaviorGroupAction()).optional().nullable(),\n          bundle: zodSchemaBundle().optional().nullable(),\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          default_behavior: z.boolean().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupAction() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          id: zodSchemaBehaviorGroupActionId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupActionId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          endpointId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCamelProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          extras: z.record(z.string()).optional().nullable(),\n          secret_token: z.string().optional().nullable(),\n          sub_type: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCurrentStatus() {\n      return z\n      .object({\n          end_time: z.string().optional().nullable(),\n          start_time: z.string().optional().nullable(),\n          status: zodSchemaStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'INSTANT', 'DAILY' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookProperties(),\n              zodSchemaEmailSubscriptionProperties(),\n              zodSchemaCamelProperties()\n          ])\n          .optional()\n          .nullable(),\n          sub_type: z.string().optional().nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default', 'camel' ]);\n  }\n\n  function zodSchemaEnvironment() {\n      return z.enum([ 'PROD', 'STAGE', 'EPHEMERAL', 'LOCAL_SERVER' ]);\n  }\n\n  function zodSchemaEventLogEntry() {\n      return z\n      .object({\n          actions: z.array(zodSchemaEventLogEntryAction()),\n          application: z.string(),\n          bundle: z.string(),\n          created: z.string(),\n          event_type: z.string(),\n          id: zodSchemaUUID(),\n          payload: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventLogEntryAction() {\n      return z\n      .object({\n          details: z.record(z.unknown()).optional().nullable(),\n          endpoint_id: zodSchemaUUID().optional().nullable(),\n          endpoint_sub_type: z.string().optional().nullable(),\n          endpoint_type: zodSchemaEndpointType(),\n          id: zodSchemaUUID(),\n          invocation_result: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication1().optional().nullable(),\n          application_id: zodSchemaUUID(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          children: z\n          .array(z.lazy(() => zodSchemaFacet()))\n          .optional()\n          .nullable(),\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaInstantEmailTemplate() {\n      return z\n      .object({\n          body_template: zodSchemaTemplate().optional().nullable(),\n          body_template_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          event_type: zodSchemaEventType().optional().nullable(),\n          event_type_id: zodSchemaUUID().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          subject_template: zodSchemaTemplate().optional().nullable(),\n          subject_template_id: zodSchemaUUID(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalApplicationUserPermission() {\n      return z\n      .object({\n          application_display_name: z.string(),\n          application_id: zodSchemaUUID(),\n          role: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalRoleAccess() {\n      return z\n      .object({\n          application_id: zodSchemaUUID(),\n          id: zodSchemaUUID().optional().nullable(),\n          role: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalUserPermissions() {\n      return z\n      .object({\n          applications: z.array(zodSchemaApplication()),\n          is_admin: z.boolean(),\n          roles: z.array(z.string())\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMessageErrorValidationResponse() {\n      return z\n      .object({\n          errors: z.record(z.array(z.string()))\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          endpointSubType: z.string().optional().nullable(),\n          endpointType: zodSchemaEndpointType().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          invocationResult: z.boolean(),\n          invocationTime: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventLogEntry() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventLogEntry()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventType() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventType()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRenderEmailTemplateRequest() {\n      return z\n      .object({\n          body_template: z.string(),\n          payload: z.string(),\n          subject_template: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestDefaultBehaviorGroupPropertyList() {\n      return z\n      .object({\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaServerInfo() {\n      return z\n      .object({\n          environment: zodSchemaEnvironment().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatus() {\n      return z.enum([ 'UP', 'MAINTENANCE' ]);\n  }\n\n  function zodSchemaTemplate() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          data: z.string(),\n          description: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaWebhookProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchema__Empty() {\n      return z.string().max(0).optional();\n  }\n}\n\nexport namespace Operations {\n  // GET /\n  export namespace InternalResourceHttpRoot {\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /access\n  export namespace InternalPermissionResourceGetAccessList {\n    const Response200 = z.array(Schemas.InternalApplicationUserPermission);\n    type Response200 = Array<Schemas.InternalApplicationUserPermission>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './access';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /access\n  export namespace InternalPermissionResourceAddAccess {\n    export interface Params {\n      body: Schemas.AddAccessRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'InternalRoleAccess', 200, Schemas.InternalRoleAccess>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './access';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InternalRoleAccess,\n                    'InternalRoleAccess',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /access/me\n  export namespace InternalPermissionResourceGetPermissions {\n    export type Payload =\n      | ValidatedResponse<\n          'InternalUserPermissions',\n          200,\n          Schemas.InternalUserPermissions\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './access/me';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InternalUserPermissions,\n                    'InternalUserPermissions',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /access/{internalRoleAccessId}\n  export namespace InternalPermissionResourceDeleteAccess {\n    export interface Params {\n      internalRoleAccessId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './access/{internalRoleAccessId}'.replace(\n            '{internalRoleAccessId}',\n            params.internalRoleAccessId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /admin\n  export namespace AdminResourceDebugRbac {\n    const Rhid = z.string();\n    type Rhid = string;\n    export interface Params {\n      rhid?: Rhid;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './admin';\n        const query = {} as Record<string, any>;\n        if (params.rhid !== undefined) {\n            query.rhid = params.rhid;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /admin/status\n  export namespace AdminResourceSetAdminDown {\n    const Status = z.string();\n    type Status = string;\n    export interface Params {\n      status?: Status;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './admin/status';\n        const query = {} as Record<string, any>;\n        if (params.status !== undefined) {\n            query.status = params.status;\n        }\n\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /admin/templates/migrate\n  export namespace AdminResourceMigrate {\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './admin/templates/migrate';\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /admin/templates/migrate\n  export namespace AdminResourceDeleteAllTemplates {\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './admin/templates/migrate';\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /applications\n  export namespace InternalResourceCreateApplication {\n    export interface Params {\n      body: Schemas.AddApplicationRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Application1', 200, Schemas.Application1>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Application1, 'Application1', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /applications/{appId}\n  export namespace InternalResourceGetApplication {\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Application1', 200, Schemas.Application1>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Application1, 'Application1', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /applications/{appId}\n  export namespace InternalResourceUpdateApplication {\n    export interface Params {\n      appId: Schemas.UUID;\n      body: Schemas.Application1;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /applications/{appId}\n  export namespace InternalResourceDeleteApplication {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /applications/{appId}/eventTypes\n  export namespace InternalResourceGetEventTypes {\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}/eventTypes'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /behaviorGroups/default\n  export namespace InternalResourceGetDefaultBehaviorGroups {\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './behaviorGroups/default';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /behaviorGroups/default\n  export namespace InternalResourceCreateDefaultBehaviorGroup {\n    export interface Params {\n      body: Schemas.BehaviorGroup;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'BehaviorGroup', 200, Schemas.BehaviorGroup>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.BehaviorGroup, 'BehaviorGroup', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /behaviorGroups/default/{behaviorGroupId}/actions\n  // Update the list of actions of a default behavior group.\n  export namespace InternalResourceUpdateDefaultBehaviorGroupActions {\n    const Body = z.array(Schemas.RequestDefaultBehaviorGroupPropertyList);\n    type Body = Array<Schemas.RequestDefaultBehaviorGroupPropertyList>;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default/{behaviorGroupId}/actions'.replace(\n            '{behaviorGroupId}',\n            params.behaviorGroupId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}\n  // Links the default behavior group to the event type.\n  export namespace InternalResourceLinkDefaultBehaviorToEventType {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        './behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}'\n        .replace('{behaviorGroupId}', params.behaviorGroupId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}\n  // Unlinks the default behavior group from the event type.\n  export namespace InternalResourceUnlinkDefaultBehaviorToEventType {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        './behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}'\n        .replace('{behaviorGroupId}', params.behaviorGroupId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /behaviorGroups/default/{id}\n  // Update a default behavior group.\n  export namespace InternalResourceUpdateDefaultBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      id: Schemas.UUID;\n      body: Schemas.BehaviorGroup;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /behaviorGroups/default/{id}\n  // Deletes a default behavior group.\n  export namespace InternalResourceDeleteDefaultBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles\n  export namespace InternalResourceGetBundles {\n    const Response200 = z.array(Schemas.Bundle);\n    type Response200 = Array<Schemas.Bundle>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /bundles\n  export namespace InternalResourceCreateBundle {\n    export interface Params {\n      body: Schemas.Bundle;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Bundle', 200, Schemas.Bundle>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Bundle, 'Bundle', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles/{bundleId}\n  export namespace InternalResourceGetBundle {\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Bundle', 200, Schemas.Bundle>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Bundle, 'Bundle', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /bundles/{bundleId}\n  export namespace InternalResourceUpdateBundle {\n    export interface Params {\n      bundleId: Schemas.UUID;\n      body: Schemas.Bundle;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /bundles/{bundleId}\n  export namespace InternalResourceDeleteBundle {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles/{bundleId}/applications\n  export namespace InternalResourceGetApplications {\n    const Response200 = z.array(Schemas.Application1);\n    type Response200 = Array<Schemas.Application1>;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}/applications'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /eventTypes\n  export namespace InternalResourceCreateEventType {\n    export interface Params {\n      body: Schemas.EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'EventType', 200, Schemas.EventType>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.EventType, 'EventType', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /eventTypes/{eventTypeId}\n  export namespace InternalResourceUpdateEventType {\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      body: Schemas.EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /eventTypes/{eventTypeId}\n  export namespace InternalResourceDeleteEventType {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /serverInfo\n  export namespace InternalResourceGetServerInfo {\n    export type Payload =\n      | ValidatedResponse<'ServerInfo', 200, Schemas.ServerInfo>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './serverInfo';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.ServerInfo, 'ServerInfo', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /status\n  export namespace InternalResourceSetCurrentStatus {\n    export interface Params {\n      body: Schemas.CurrentStatus;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './status';\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates\n  export namespace TemplateResourceGetAllTemplates {\n    const Response200 = z.array(Schemas.Template);\n    type Response200 = Array<Schemas.Template>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './templates';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /templates\n  export namespace TemplateResourceCreateTemplate {\n    export interface Params {\n      body: Schemas.Template;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Template', 200, Schemas.Template>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Template, 'Template', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/aggregation\n  export namespace TemplateResourceGetAllAggregationEmailTemplates {\n    const Response200 = z.array(Schemas.AggregationEmailTemplate);\n    type Response200 = Array<Schemas.AggregationEmailTemplate>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './templates/email/aggregation';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /templates/email/aggregation\n  export namespace TemplateResourceCreateAggregationEmailTemplate {\n    export interface Params {\n      body: Schemas.AggregationEmailTemplate;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'AggregationEmailTemplate',\n          200,\n          Schemas.AggregationEmailTemplate\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.AggregationEmailTemplate,\n                    'AggregationEmailTemplate',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/aggregation/application/{appId}\n  export namespace TemplateResourceGetAggregationEmailTemplatesByApplication {\n    const Response200 = z.array(Schemas.AggregationEmailTemplate);\n    type Response200 = Array<Schemas.AggregationEmailTemplate>;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation/application/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/aggregation/{templateId}\n  export namespace TemplateResourceGetAggregationemailTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'AggregationEmailTemplate',\n          200,\n          Schemas.AggregationEmailTemplate\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.AggregationEmailTemplate,\n                    'AggregationEmailTemplate',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /templates/email/aggregation/{templateId}\n  export namespace TemplateResourceUpdateAggregationEmailTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n      body: Schemas.AggregationEmailTemplate;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /templates/email/aggregation/{templateId}\n  export namespace TemplateResourceDeleteAggregationEmailTemplate {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/instant\n  export namespace TemplateResourceGetAllInstantEmailTemplates {\n    const Response200 = z.array(Schemas.InstantEmailTemplate);\n    type Response200 = Array<Schemas.InstantEmailTemplate>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './templates/email/instant';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /templates/email/instant\n  export namespace TemplateResourceCreateInstantEmailTemplate {\n    export interface Params {\n      body: Schemas.InstantEmailTemplate;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'InstantEmailTemplate',\n          200,\n          Schemas.InstantEmailTemplate\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InstantEmailTemplate,\n                    'InstantEmailTemplate',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/instant/eventType/{eventTypeId}\n  export namespace TemplateResourceGetInstantEmailTemplates {\n    const Response200 = z.array(Schemas.InstantEmailTemplate);\n    type Response200 = Array<Schemas.InstantEmailTemplate>;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant/eventType/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/instant/{templateId}\n  export namespace TemplateResourceGetInstantEmailTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'InstantEmailTemplate',\n          200,\n          Schemas.InstantEmailTemplate\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InstantEmailTemplate,\n                    'InstantEmailTemplate',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /templates/email/instant/{templateId}\n  export namespace TemplateResourceUpdateInstantEmailTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n      body: Schemas.InstantEmailTemplate;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /templates/email/instant/{templateId}\n  export namespace TemplateResourceDeleteInstantEmailTemplate {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /templates/email/render\n  export namespace TemplateResourceRenderEmailTemplate {\n    const Response200 = z\n    .object({\n        body: z.string().optional().nullable(),\n        subject: z.string().optional().nullable()\n    })\n    .nonstrict();\n    type Response200 = {\n      body?: string | undefined | null;\n      subject?: string | undefined | null;\n    };\n    const Response400 = z\n    .object({\n        message: z.string().optional().nullable()\n    })\n    .nonstrict();\n    type Response400 = {\n      message?: string | undefined | null;\n    };\n    export interface Params {\n      body: Schemas.RenderEmailTemplateRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', 400, Response400>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/render';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Response400, 'unknown', 400),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/{templateId}\n  export namespace TemplateResourceGetTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Template', 200, Schemas.Template>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Template, 'Template', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /templates/{templateId}\n  export namespace TemplateResourceUpdateTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n      body: Schemas.Template;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /templates/{templateId}\n  export namespace TemplateResourceDeleteTemplate {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /validation/baet\n  export namespace ValidationResourceValidate {\n    const Application = z.string();\n    type Application = string;\n    const Bundle = z.string();\n    type Bundle = string;\n    const EventType = z.string();\n    type EventType = string;\n    export interface Params {\n      application?: Application;\n      bundle?: Bundle;\n      eventType?: EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './validation/baet';\n        const query = {} as Record<string, any>;\n        if (params.application !== undefined) {\n            query.application = params.application;\n        }\n\n        if (params.bundle !== undefined) {\n            query.bundle = params.bundle;\n        }\n\n        if (params.eventType !== undefined) {\n            query.eventType = params.eventType;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /validation/message\n  export namespace ValidationResourceValidateMessage {\n    const Body = z.string();\n    type Body = string;\n    export interface Params {\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<\n          'MessageErrorValidationResponse',\n          400,\n          Schemas.MessageErrorValidationResponse\n        >\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './validation/message';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(\n                    Schemas.MessageErrorValidationResponse,\n                    'MessageErrorValidationResponse',\n                    400\n                )\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /version\n  export namespace InternalResourceGetVersion {\n    const Response200 = z.string();\n    type Response200 = string;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './version';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n}\n","import '@patternfly/react-core/dist/styles/base.css';\n\nimport { CodeEditor, CodeEditorControl, Language } from '@patternfly/react-code-editor';\nimport { PageSection, Title } from '@patternfly/react-core';\nimport { PlayIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\nimport { useMemo } from 'react';\n\nconst aggregationTemplate = `\n// Here we can initialize the value of the Aggregation result.\nconst result = {\n};\n\n// This function will be called by every action that was sent to notification server\n// to update the result with its values.\nconst aggregate = (action) => {\n\n    return result;\n};\n`.trimLeft();\n\nexport const AggregationPage: React.FunctionComponent<unknown> = () => {\n\n    const onEditorDidMount = React.useCallback((editor, monaco) => {\n        editor.layout();\n        editor.focus();\n        monaco.editor.getModels()[0].updateOptions({ tabSize: 5 });\n    }, []);\n\n    const onChange = React.useCallback((_value) => {\n        // does not do anything yet\n    }, []);\n\n    const controls = useMemo(() => [\n        <CodeEditorControl\n            key=\"test\"\n            icon={ <PlayIcon /> }\n            toolTipText=\"Test aggregation\"\n            onClick={ () => console.log('testing') }\n            isVisible={ true }\n        />\n    ], []);\n\n    return <>\n        <PageSection>\n            <Title headingLevel=\"h1\">Aggregation templates</Title>\n        </PageSection>\n        <PageSection>\n            <CodeEditor\n                isDownloadEnabled\n                isUploadEnabled\n                customControls={ controls }\n                isLineNumbersVisible\n                isLanguageLabelVisible\n                isMinimapVisible={ false }\n                language={ Language.javascript }\n                onEditorDidMount={ onEditorDidMount }\n                onChange={ onChange }\n                code={ aggregationTemplate }\n                height=\"300px\"\n            />\n        </PageSection>\n    </>;\n};\n","import * as React from 'react';\nimport { useCallback, useContext } from 'react';\n\nimport { Schemas } from '../generated/OpenapiInternal';\n\nexport interface PermissionContext {\n    isAdmin: boolean;\n    applications: ReadonlyArray<{\n        id: string;\n        displayName: string;\n    }>;\n    roles: ReadonlyArray<string>;\n    refresh: () => void;\n}\n\nexport const PermissionContext = React.createContext<PermissionContext>({\n    isAdmin: false,\n    applications: [],\n    roles: [],\n    refresh: () => {\n        throw new Error('Invalid use of refresh');\n    }\n});\n\nexport const useUserPermissions = () => {\n    const permission = useContext(PermissionContext);\n\n    const hasPermission = useCallback((appId: Schemas.UUID) => {\n        if (permission.isAdmin) {\n            return true;\n        }\n\n        return permission.applications.find(a => a.id === appId) !== undefined;\n    }, [ permission ]);\n\n    return {\n        ...permission,\n        hasPermission\n    };\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Application } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalResourceGetApplication.Payload) => {\n        if (payload.status === 200) {\n            const applicationTypes: Application = {\n                id: payload.value.id ?? '',\n                displayName: payload.value.display_name,\n                name: payload.value.name,\n                bundleId: payload.value.bundle_id };\n\n            return validatedResponse(\n                'Application',\n                200,\n                applicationTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useApplicationTypes = (applicationId: string) => {\n    const query = useQuery(Operations.InternalResourceGetApplication.actionCreator({\n        appId: applicationId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { EventType } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalResourceGetEventTypes.Payload) => {\n        if (payload.status === 200) {\n            const eventTypes: ReadonlyArray<EventType> = payload.value.map(value => ({\n                id: value.id ?? '',\n                name: value.name,\n                displayName: value.display_name,\n                description: value.description ?? '',\n                applicationId: value.application_id\n            }));\n\n            return validatedResponse(\n                'EventTypes',\n                200,\n                eventTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useEventTypes = (applicationId: string) => {\n    const query = useQuery(Operations.InternalResourceGetEventTypes.actionCreator({\n        appId: applicationId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { Chip, ChipGroup, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { useEventTypes } from '../../services/EventTypes/GetEventTypes';\n\ntype EventTypeListProps = {\n    appId: string;\n}\n\nexport const ListEventTypes: React.FunctionComponent<EventTypeListProps> = (props) => {\n    const getEventTypes = useEventTypes(props.appId);\n\n    if (getEventTypes.loading) {\n        return <Spinner />;\n    }\n\n    if (getEventTypes.payload?.status !== 200) {\n        return <span>Error while loading eventtypes: {getEventTypes.errorObject.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <ChipGroup>\n                { getEventTypes.payload.value.length === 0 ? 'No event types' : '' }\n            </ChipGroup>\n            <ChipGroup>\n                { getEventTypes.payload.value.map(e => (\n                    <Chip isReadOnly key={ e.id }>{ e.displayName}</Chip>\n                ))}\n            </ChipGroup>\n        </React.Fragment>\n    );\n};\n","import { ActionGroup, Button, Form, Modal, ModalVariant } from '@patternfly/react-core';\nimport React from 'react';\n\ninterface ViewTemplateModalProps {\n    showModal: boolean;\n    applicationName: string;\n    onClose: () => void;\n}\n\nexport const ViewTemplateModal: React.FunctionComponent<ViewTemplateModalProps> = (props) => {\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant={ ModalVariant.medium }\n                title={ ` Email Template for ${ props.applicationName }` }\n                isOpen={ props.showModal }\n                onClose={ props.onClose }\n            ><Form isHorizontal>\n                    Viewing modal for existing templates\n                    <ActionGroup>\n                        <Button variant='primary' type='reset'\n                            onClick={ props.onClose }>Close</Button>\n                    </ActionGroup>\n                </Form>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\n","import { Breadcrumb, BreadcrumbItem, Button, PageSection, Title, Toolbar,\n    ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { EyeIcon, PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport {\n    TableComposable,\n    Tbody,\n    Td,  Th,   Thead,\n    Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nimport { useUserPermissions } from '../../app/PermissionContext';\nimport { linkTo } from '../../Routes';\nimport { useApplicationTypes } from '../../services/EventTypes/GetApplication';\nimport { ListEventTypes } from '../EventTypes/ListEventTypes';\nimport { ViewTemplateModal } from './ViewEmailTemplateModal';\n\ntype ApplicationPageParams = {\n    applicationId: string;\n}\n\nexport const EmailTemplateTable: React.FunctionComponent = () => {\n    const { hasPermission } = useUserPermissions();\n\n    const { applicationId } = useParams<ApplicationPageParams>();\n    const applicationTypesQuery = useApplicationTypes(applicationId);\n\n    const [ showViewModal, setShowViewModal ] = React.useState(false);\n    const viewModal = () => {\n        setShowViewModal(true);\n    };\n\n    const onClose = () => {\n        setShowViewModal(false);\n    };\n\n    const application = React.useMemo(() => {\n        if (applicationTypesQuery.payload?.status === 200) {\n            return applicationTypesQuery.payload.value;\n        }\n\n        return undefined;\n    }, [ applicationTypesQuery.payload?.status, applicationTypesQuery.payload?.value ]);\n\n    const columns = [ 'Email Template', 'Event Types' ];\n    const rows = [\n        {\n            displayName: 'email template 1',\n            id: '1',\n            eventType: 'event Type 1'\n        },\n        {\n            displayName: 'email template 2',\n            id: '2',\n            eventType: 'event Type 2'\n\n        },\n        {\n            displayName: 'email template 3',\n            id: '3',\n            eventType: 'event Type 3'\n\n        },\n        {\n            displayName: 'email template 4',\n            id: '4',\n            eventType: 'event Type 4'\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel=\"h1\">\n                    <Breadcrumb>\n                        <BreadcrumbItem target='#'> Email Template for { application?.displayName ?? '' }</BreadcrumbItem>\n                    </Breadcrumb></Title>\n                <TableComposable aria-label=\"Email Template table\">\n                    <Thead>\n                        <Toolbar>\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <Button variant=\"primary\" isDisabled={ !application || !hasPermission(application?.id) }\n                                        component={ (props: any) =>\n                                            <Link { ...props } to={ linkTo.emailTemplates } /> }>Create Email Template</Button>\n                                    <ViewTemplateModal\n                                        showModal={ showViewModal }\n                                        applicationName={ application?.displayName ?? '' }\n                                        onClose={ onClose }\n                                    />\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Tr>\n                            {columns.map((column, columnIndex) => (\n                                <Th key={ columnIndex }>{column}</Th>\n                            ))}\n                        </Tr>\n                    </Thead>\n                    <Tbody>\n                        { rows.map(r => (\n                            <Tr key={ r.id }>\n                                <Td>{r.displayName}</Td>\n                                <Td>\n                                    <ListEventTypes\n                                        appId={ application?.id ?? '' }\n                                    />\n                                </Td>\n                                <Td>\n                                    <Button className='view' type='button' variant='plain' onClick={ viewModal }\n                                    > { <EyeIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='edit' type='button' variant='plain'\n                                        isDisabled> { <PencilAltIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='delete' type='button' variant='plain'\n                                        isDisabled>{ <TrashIcon /> } </Button></Td>\n                            </Tr>\n\n                        ))}\n                    </Tbody>\n                </TableComposable>\n            </PageSection>\n        </React.Fragment>\n\n    );\n};\n\n","import { ActionGroup, Button, Form, FormGroup, HelperText, HelperTextItem, Modal, ModalVariant, TextArea, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { EventType } from '../../types/Notifications';\n\ninterface CreateEditModalProps {\n    isEdit: boolean;\n    showModal: boolean;\n    applicationName?: string;\n    initialEventType?: Partial<EventType>;\n    isLoading: boolean;\n    onClose: () => void;\n    onSubmit: (eventType: Partial<EventType>) => void;\n}\n\nexport const CreateEditModal: React.FunctionComponent<CreateEditModalProps> = (props) => {\n\n    const [ eventType, setEventType ] = React.useState<Partial<EventType>>(props.initialEventType ?? {});\n\n    const handleChange = (value: string, event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>) => {\n        const target = event.target as HTMLInputElement;\n        setEventType(prev => ({ ...prev, [target.name]: target.value }));\n    };\n\n    const onSubmitLocal = React.useCallback(() => {\n        props.onSubmit(eventType);\n    }, [ eventType, props ]);\n\n    React.useEffect(() => {\n        setEventType(props.initialEventType ?? {});\n    }, [ props.initialEventType ]);\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant={ ModalVariant.medium }\n                title={ `${ props.isEdit ? 'Update' : 'Create'} Event Type for ${ props.applicationName }` }\n                isOpen={ props.showModal }\n                onClose={ props.onClose }\n            ><Form isHorizontal>\n                    <FormGroup label='Name' fieldId='name' isRequired\n                        helperText={ props.isEdit ? <HelperText><HelperTextItem variant=\"warning\" hasIcon>\n                                                    If this field is modified it may affect exisiting behavior.\n                        </HelperTextItem></HelperText> : 'This is a short name, only composed of a-z 0-9 and - characters.' }>\n                        <TextInput\n                            type='text'\n                            value={ eventType.name }\n                            onChange={ handleChange }\n                            id='name'\n                            name=\"name\"\n                        /></FormGroup>\n                    <FormGroup label='Display name' fieldId='display-name' isRequired\n                        helperText='This is the name you want to display on the UI'>\n                        <TextInput\n                            type='text'\n                            value={ eventType.displayName }\n                            onChange={ handleChange }\n                            id='display-name'\n                            name=\"displayName\"\n                        /></FormGroup>\n                    <FormGroup label='Description' fieldId='description'\n                        helperText='Optional short description that appears in the UI\n                                                to help admin decide how to notify users.'>\n                        <TextArea\n                            type='text'\n                            value={ eventType.description }\n                            onChange={ handleChange }\n                            id='description'\n                            name=\"description\"\n                        /></FormGroup>\n                    <ActionGroup>\n                        <Button variant='primary' type='submit'\n                            isLoading={ props.isLoading } isDisabled={ props.isLoading }\n                            onClick={ onSubmitLocal }>{ props.isEdit ? 'Update' : 'Submit' }</Button>\n                        <Button variant='link' type='reset'\n                            onClick={ props.onClose }>Cancel</Button>\n                    </ActionGroup>\n                </Form>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\n","import { ActionGroup, Button, Modal, ModalVariant, Spinner, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { EventType } from '../../types/Notifications';\n\ninterface DeleteModalProps {\n    eventTypeName?: string;\n    onDelete: (eventType?: EventType) => Promise<boolean>;\n    bundleName?: string;\n    applicationName?: string;\n    isOpen: boolean;\n    onClose: () => void;\n\n}\nexport const DeleteModal: React.FunctionComponent<DeleteModalProps> = (props) => {\n    const [ errors, setErrors ] = React.useState(true);\n\n    const onDelete = React.useCallback(async () => {\n        const onDeleteImpl = props.onDelete;\n        const response = await onDeleteImpl();\n        if (response) {\n            props.onClose();\n        } else {\n            alert('Could not delete event type, please try again.');\n        }\n    }, [ props ]);\n\n    const handleDeleteChange = (value: string, event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        if (target.value !== props.eventTypeName) {\n            return setErrors(true);\n        } else if (target.value === props.eventTypeName) {\n            return setErrors(false);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Modal variant={ ModalVariant.small } titleIconVariant=\"warning\" isOpen={ props.isOpen }\n                onClose={ props.onClose }\n                title={ `Permanently delete ${ props.eventTypeName }` }>\n                { <b>{ props.eventTypeName }</b> } {`from  ${ props.applicationName }/${ props.bundleName ? props.bundleName :\n                    <Spinner /> } will be deleted. \n                        If an application is currently sending this event, it will no longer be processed.`}\n                <br />\n                <br />\n                        Type <b>{ props.eventTypeName }</b> to confirm:\n                <br />\n                <TextInput type='text' onChange={ handleDeleteChange } id='name' name=\"name\" isRequired />\n                <br />\n                <br />\n                <ActionGroup>\n                    <Button variant='danger' type='button' isDisabled = { errors }\n                        onClick={ onDelete }>Delete</Button>\n                    <Button variant='link' type='button' onClick={ props.onClose }>Cancel</Button>\n                </ActionGroup>\n            </Modal>\n        </React.Fragment>\n    );\n};\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\n\ntype LinkAdapterProps = any & {\n    href: string;\n};\n\nexport const LinkAdapter: React.FunctionComponent<LinkAdapterProps> = (props) => {\n    const { href, ...restProps } = props;\n    return (\n        <Link to={ href } { ...restProps }>{ props.children }</Link>\n    );\n};\n","import { BreadcrumbItem, BreadcrumbItemProps } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { LinkAdapter } from './LinkAdapter';\n\ntype BreadcrumbLinkItemProps = Omit<BreadcrumbItemProps, 'component'>\n\nexport const BreadcrumbLinkItem: React.FunctionComponent<BreadcrumbLinkItemProps> = (props) => {\n    return (\n        <BreadcrumbItem\n            { ...props }\n            component={ LinkAdapter }\n        >\n            { props.children }\n        </BreadcrumbItem>\n    );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport type CreateEventType = {\n    id?: string;\n    displayName: string;\n    description: string;\n    applicationId: string;\n    name: string;\n\n}\n\nconst actionCreator =  (params: CreateEventType) => {\n    if (params.id === undefined) {\n        return Operations.InternalResourceCreateEventType.actionCreator({\n            body: {\n                id: params.id,\n                application_id: params.applicationId,\n                description: params.description,\n                display_name: params.displayName,\n                name: params.name\n\n            }\n        });\n    }\n\n    return Operations.InternalResourceUpdateEventType.actionCreator({\n        eventTypeId: params.id,\n        body: {\n            id: params.id,\n            application_id: params.applicationId,\n            description: params.description,\n            display_name: params.displayName,\n            name: params.name\n\n        }\n    });\n};\n\nexport const useCreateEventType = () => {\n    return useMutation(actionCreator);\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport const deleteEventTypeActionCreator = (eventTypeId: string) => {\n    return Operations.InternalResourceDeleteEventType.actionCreator({\n        eventTypeId\n    });\n};\n\nexport const useDeleteEventType = () => useMutation<boolean>(deleteEventTypeActionCreator);\n","import { Operations } from '../../generated/OpenapiInternal';\n\nexport const getBundleAction = (bundleId: string) => {\n    return Operations.InternalResourceGetBundle.actionCreator({\n        bundleId\n    });\n};\n","import {\n    ActionGroup,\n    Button,\n    Form,\n    FormGroup,\n    FormSelect, FormSelectOption,\n    HelperText,\n    HelperTextItem,\n    Modal,\n    ModalVariant,\n    TextInput\n} from '@patternfly/react-core';\nimport React from 'react';\n\nimport { useUserPermissions } from '../../app/PermissionContext';\nimport { Application, RoleOwnedApplication } from '../../types/Notifications';\n\ninterface CreateEditApplicationModalProps {\n    isEdit: boolean;\n    showModal: boolean;\n    applicationName?: string;\n    bundleName?: string;\n    initialApplication?: Partial<Application>;\n    isLoading: boolean;\n    onClose: () => void;\n    onSubmit: (application: Partial<RoleOwnedApplication>) => void;\n}\n\nexport const CreateEditApplicationModal: React.FunctionComponent<CreateEditApplicationModalProps> = (props) => {\n\n    const permissions = useUserPermissions();\n    const [ application, setApplication ] = React.useState<Partial<RoleOwnedApplication>>({\n        ...props.initialApplication\n    });\n\n    const handleChange = (\n        value: string,\n        event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement> | React.FormEvent<HTMLSelectElement>) => {\n        const target = event.target as HTMLInputElement;\n        setApplication(prev => ({ ...prev, [target.name]: target.value }));\n    };\n\n    const onSubmitLocal = React.useCallback(() => {\n        props.onSubmit(application);\n    }, [ application, props ]);\n\n    React.useEffect(() => {\n        if (application.ownerRole === undefined && permissions.roles.length > 0) {\n            setApplication(prev => ({\n                ...prev,\n                ownerRole: permissions.roles[0]\n            }));\n        }\n    }, [ permissions.roles, application.ownerRole ]);\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant={ ModalVariant.medium }\n                title={ `${ props.isEdit ? `Update ${ props.applicationName }` : 'Create Application'} for ${ props.bundleName }` }\n                isOpen={ props.showModal }\n                onClose={ props.onClose }\n            ><Form isHorizontal>\n                    <FormGroup label='Name' fieldId='name' isRequired\n                        helperText={ props.isEdit ? <HelperText><HelperTextItem variant=\"warning\" hasIcon>\n                                                    If this field is modified it may affect exisiting behavior.\n                        </HelperTextItem></HelperText> : 'This is a short name, only composed of a-z 0-9 and - characters.' }>\n                        <TextInput\n                            type='text'\n                            value={ application.name }\n                            onChange={ handleChange }\n                            id='name'\n                            name=\"name\"\n                        /></FormGroup>\n                    <FormGroup label='Display name' fieldId='display-name' isRequired\n                        helperText='This is the name you want to display on the UI'>\n                        <TextInput\n                            type='text'\n                            value={ application.displayName }\n                            onChange={ handleChange }\n                            id='display-name'\n                            name=\"displayName\"\n                        /></FormGroup>\n                    { !props.isEdit && <FormGroup\n                        fieldId=\"role-name\"\n                        label=\"Role admin\"\n                        isRequired\n                        helperText=\"Role of users who will manage the application\"\n                    >\n                        { permissions.isAdmin ? (\n                            <TextInput\n                                type='text'\n                                onChange={ handleChange }\n                                value={ application.ownerRole }\n                                id='owner-role'\n                                name=\"ownerRole\"\n                            />\n                        ) : (\n                            <FormSelect\n                                value={ application.ownerRole }\n                                onChange={ handleChange }\n                                id='owner-role'\n                                name=\"ownerRole\"\n                            >\n                                { permissions.roles.map(r => <FormSelectOption key={ r } label={ r } value={ r } />) }\n                            </FormSelect>\n                        )}\n                    </FormGroup>}\n                    <ActionGroup>\n                        <Button variant='primary' type='submit'\n                            isLoading={ props.isLoading } isDisabled={ props.isLoading }\n                            onClick={ onSubmitLocal }>{ props.isEdit ? 'Update' : 'Submit' }</Button>\n                        <Button variant='link' type='reset'\n                            onClick={ props.onClose }>Cancel</Button>\n                    </ActionGroup>\n                </Form>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\n","import { ActionGroup, Button, Modal, ModalVariant, Spinner, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { EventType } from '../../types/Notifications';\n\ninterface DeleteApplicationModalProps {\n    onDelete: (eventType?: EventType) => Promise<boolean>;\n    bundleName?: string;\n    applicationName?: string;\n    isOpen: boolean;\n    onClose: () => void;\n\n}\nexport const DeleteApplicationModal: React.FunctionComponent<DeleteApplicationModalProps> = (props) => {\n    const [ errors, setErrors ] = React.useState(true);\n\n    const onDelete = React.useCallback(async () => {\n        const onDeleteImpl = props.onDelete;\n        const response = await onDeleteImpl();\n        if (response) {\n            props.onClose();\n        } else {\n            alert('Could not delete application, please try again.');\n        }\n    }, [ props ]);\n\n    const handleDeleteChange = (value: string, event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        if (target.value !== props.applicationName) {\n            return setErrors(true);\n        } else if (target.value === props.applicationName) {\n            return setErrors(false);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Modal variant={ ModalVariant.small } titleIconVariant=\"warning\" isOpen={ props.isOpen }\n                onClose={ props.onClose }\n                title={ `Permanently delete ${ props.applicationName }` }>\n                { <b>{ props.applicationName }</b> } {`from ${ props.bundleName ? props.bundleName :\n                    <Spinner /> } will be deleted. \n                        By deleting this application all associated event types will be deleted and no longer processed. `}\n                <br />\n                <br />\n                        Type <b>{ props.applicationName }</b> to confirm:\n                <br />\n                <TextInput type='text' onChange={ handleDeleteChange } id='name' name=\"name\" isRequired />\n                <br />\n                <br />\n                <ActionGroup>\n                    <Button variant='danger' type='button' isDisabled = { errors }\n                        onClick={ onDelete }>Delete</Button>\n                    <Button variant='link' type='button' onClick={ props.onClose }>Cancel</Button>\n                </ActionGroup>\n            </Modal>\n        </React.Fragment>\n    );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport type CreateApplication = {\n    id?: string;\n    displayName: string;\n    bundleId: string;\n    name: string;\n    ownerRole?: string;\n}\n\nconst actionCreator =  (params: CreateApplication) => {\n    if (params.id === undefined) {\n        return Operations.InternalResourceCreateApplication.actionCreator({\n            body: {\n                bundle_id: params.bundleId,\n                display_name: params.displayName,\n                name: params.name,\n                owner_role: params.ownerRole\n            }\n        });\n    }\n\n    return Operations.InternalResourceUpdateApplication.actionCreator({\n        appId: params.id,\n        body: {\n            id: params.id,\n            bundle_id: params.bundleId,\n            display_name: params.displayName,\n            name: params.name\n        }\n    });\n};\n\nexport const useCreateApplication = () => {\n    return useMutation(actionCreator);\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport const deleteApplicationActionCreator = (appId: string) => {\n    return Operations.InternalResourceDeleteApplication.actionCreator({\n        appId\n    });\n};\n\nexport const useDeleteApplication = () => useMutation<boolean>(deleteApplicationActionCreator);\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Application } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalResourceGetApplications.Payload) => {\n        if (payload.status === 200) {\n            const applications: ReadonlyArray<Application> = payload.value.map(value => ({\n                id: value.id ?? '',\n                displayName: value.display_name,\n                bundleId: value.bundle_id,\n                name: value.name\n            }));\n\n            return validatedResponse(\n                'Applications',\n                200,\n                applications,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useApplications = (bundleId: string) => {\n    const query = useQuery(Operations.InternalResourceGetApplications.actionCreator({\n        bundleId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Bundle } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalResourceGetBundle.Payload) => {\n        if (payload.status === 200) {\n            const bundleTypes: Bundle = {\n                id: payload.value.id ?? '',\n                displayName: payload.value.display_name,\n                applications: []\n            };\n\n            return validatedResponse(\n                'Bundle',\n                200,\n                bundleTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useBundleTypes = (bundleId: string) => {\n    const query = useQuery(Operations.InternalResourceGetBundle.actionCreator({\n        bundleId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { CodeEditor, Language } from '@patternfly/react-code-editor';\nimport {\n    ActionGroup,\n    Button,\n    PageSection,\n    Split,\n    SplitItem,\n    Title\n} from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { useUserPermissions } from '../app/PermissionContext';\n\nconst defaultSubjectTemplate = `\nImportant email to {user.firstName} from MyCoolApp!\n`.trimLeft();\n\nconst defaultBodyTemplate = `\n<div>Hello {user.firstName} {user.lastName},</div>\n<div>We have some important news for you, MyApp has a notification for you</div>\n<div>As a reminder, current user: {user.username}: is active? {user.isActive}; is admin? {user.isAdmin}</div>\n<div>\n    System with name <strong>{action.context.display_name}</strong> (<strong>{action.context.inventory_id}</strong>) \n    did a check in at {action.context.system_check_in.toUtcFormat()}. \n    It was about {action.context.system_check_in.toTimeAgo()}\n</div>\n<div>This is a loop:</div>\n{#if action.events.size() > 0}\n<ul>\n    {#each action.events}\n        <li>\n            <a href=\"http://google.com?q={it.payload.my_id}\" target=\"_blank\">{it.payload.my_name}</a>\n        </li>\n    {/each}\n</ul>\n<div>Have a nice day!</div>\n{/if}\n`.trimLeft();\n\nconst defaultPayload = JSON.stringify({\n    bundle: 'rhel',\n    application: 'policies',\n    event_type: 'policy-triggered',\n    timestamp: '2021-08-05T16:21:14.243',\n    account_id: '5758117',\n    // eslint-disable-next-line max-len\n    context: '{\"inventory_id\":\"80f7e57d-a16a-4189-82af-1d68a747c8b3\",\"system_check_in\":\"2021-08-05T16:21:12.953036\",\"display_name\":\"cool display name\"}',\n    events: [\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"3df53241-3e09-481b-a322-4892caaaaadc\",\"my_name\":\"Red color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"6c5e8451-a40a-4bb7-ab9a-0cb10a4c577d\",\"my_name\":\"Green color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"b4c6378a-c1fb-4d3e-8e9b-7e5bdfc09dd3\",\"my_name\":\"Blue color\"}'\n        }\n    ]\n}, null, 2);\n\nexport const EmailTemplatePage: React.FunctionComponent = () => {\n    const { isAdmin } = useUserPermissions();\n    const handleBackClick = React.useCallback(() => {\n        history.back();\n    }, []);\n\n    return (\n        <>{ isAdmin &&\n            <><PageSection>\n                <Split>\n                    <SplitItem isFilled>\n                        <Title headingLevel=\"h1\">Create an Email Template</Title>\n                    </SplitItem>\n                </Split>\n            </PageSection><PageSection>\n                <Title headingLevel=\"h2\">Subject template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    code={ defaultSubjectTemplate }\n                    isMinimapVisible={ false }\n                    height=\"50px\" />\n            </PageSection><PageSection>\n                <Title headingLevel=\"h2\">Body template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    code={ defaultBodyTemplate }\n                    isMinimapVisible={ false }\n                    height=\"300px\" />\n            </PageSection><PageSection>\n                <Title headingLevel=\"h2\">Payload</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultPayload }\n                    height=\"300px\"\n                    isLanguageLabelVisible\n                    language={ Language.json } />\n            </PageSection>\n            <PageSection>\n                <ActionGroup>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button variant='primary' type='submit'>Submit</Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button variant='secondary' type='reset' onClick={ handleBackClick }>Back</Button>\n                        </SplitItem>\n                    </Split>\n                </ActionGroup>\n            </PageSection>\n            </>\n        }\n        </>\n    );\n};\n","import { CodeEditor, CodeEditorControl, Language } from '@patternfly/react-code-editor';\nimport {\n    Alert,\n    AlertVariant,\n    List,\n    ListItem,\n    PageSection,\n    Stack, StackItem,\n    Title\n} from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { global_palette_green_400 } from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { useParameterizedQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nconst defaultPayload = JSON.stringify({}, null, 2);\n\ntype ValidationResult = {\n    code: string;\n    errors: Record<string, Array<string>>;\n}\n\nconst renderErrors = (errors: Record<string, Array<string>>) => {\n    const sortedKeys = Object.keys(errors).sort();\n    const flatErrors: Array<string> = [];\n    sortedKeys.forEach(key => {\n        errors[key].forEach(error => flatErrors.push(error));\n    });\n\n    return <List>\n        { flatErrors.map((value, index) => (<ListItem key={ index }>{ value }</ListItem>)) }\n    </List>;\n};\n\nexport const MessageValidatorPage: React.FunctionComponent = () => {\n\n    const validateService = useParameterizedQuery(Operations.ValidationResourceValidateMessage.actionCreator);\n\n    const [ message, setMessage ] = React.useState<string>(defaultPayload);\n    const [ validationResult, setValidationResult ] = React.useState<ValidationResult>();\n\n    const runValidation = React.useCallback(async () => {\n\n        let jsonMessage;\n        try {\n            jsonMessage = JSON.parse(message);\n        } catch (e: any) {\n            console.log(e);\n            setValidationResult({\n                errors: {\n                    $: [\n                        'Not a valid json: ' + e.message\n                    ]\n                },\n                code: message\n            });\n            return;\n        }\n\n        const response = await validateService.query({\n            body: jsonMessage\n        });\n\n        if (response.payload?.status === 200) {\n            setValidationResult({\n                errors: {},\n                code: message\n            });\n        } else if (response.payload?.status === 400) {\n            setValidationResult({\n                errors: response.payload.value.errors,\n                code: message\n            });\n        }\n\n    }, [ validateService, message ]);\n\n    const validatePayloadButton = <CodeEditorControl\n        icon={ <CheckCircleIcon color={ global_palette_green_400.value } /> }\n        toolTipText=\"Validates the message\"\n        onClick={ runValidation }\n    />;\n\n    let validationStatus: AlertVariant;\n    let validationMessage;\n\n    if (validationResult?.code === message) {\n        if (Object.keys(validationResult.errors).length === 0) {\n            validationStatus = AlertVariant.success;\n            validationMessage = 'Message is valid';\n        } else {\n            validationStatus = AlertVariant.danger;\n            validationMessage = <>\n                <div>Message is invalid:</div>\n                {renderErrors(validationResult.errors)}\n            </>;\n        }\n    } else {\n        validationStatus = AlertVariant.warning;\n        validationMessage = <>\n            <div>Message has not been validated. Use the validation button</div>\n            { validationResult?.errors && Object.keys(validationResult.errors).length > 0 && (\n                <>\n                    <div>Previous errors:</div>\n                    { renderErrors(validationResult.errors) }\n                </>\n            ) }\n        </>;\n    }\n\n    return  (\n        <>\n            <PageSection>\n                <Stack>\n                    <StackItem isFilled>\n                        <Title headingLevel=\"h1\" >Notification validator</Title>\n                    </StackItem>\n                    <StackItem>\n                        <span>You can use this utility to verify the notification you are sending is valid and tweak as needed.</span>\n                    </StackItem>\n                </Stack>\n            </PageSection>\n            <PageSection>\n                <Alert isInline title={ validationMessage } variant={ validationStatus }  />\n                <CodeEditor\n                    showEditor={ true }\n                    isUploadEnabled\n                    isDownloadEnabled\n                    isCopyEnabled\n                    isMinimapVisible={ false }\n                    customControls={ validatePayloadButton }\n                    code={ message }\n                    height=\"500px\"\n                    isLanguageLabelVisible\n                    language={ Language.json }\n                    onChange={ setMessage }\n                />\n            </PageSection>\n        </>\n    );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport type RenderEmailRequest = {\n    subject: string;\n    body: string;\n    payload: string;\n}\n\nconst actionCreator = (params: RenderEmailRequest) => Operations.TemplateResourceRenderEmailTemplate.actionCreator({\n    body: {\n        subject_template: params.subject,\n        body_template: params.body,\n        payload: params.payload\n    }\n});\n\nexport const useRenderEmailRequest = () => {\n    return useMutation(actionCreator);\n};\n","import { CodeEditor, Language } from '@patternfly/react-code-editor';\nimport {\n    HelperText,\n    HelperTextItem,\n    PageSection,\n    Spinner,\n    Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Title\n} from '@patternfly/react-core';\nimport { Button } from '@patternfly/react-core/';\nimport * as React from 'react';\n\nimport { useRenderEmailRequest } from '../services/RenderEmailRequest';\n\nconst defaultSubjectTemplate = `\nImportant email to {user.firstName} from MyCoolApp!\n`.trimLeft();\n\nconst defaultBodyTemplate = `\n<div>Hello {user.firstName} {user.lastName},</div>\n<div>We have some important news for you, MyApp has a notification for you</div>\n<div>As a reminder, current user: {user.username}: is active? {user.isActive}; is admin? {user.isAdmin}</div>\n<div>\n    System with name <strong>{action.context.display_name}</strong> (<strong>{action.context.inventory_id}</strong>) \n    did a check in at {action.context.system_check_in.toUtcFormat()}. \n    It was about {action.context.system_check_in.toTimeAgo()}\n</div>\n<div>This is a loop:</div>\n{#if action.events.size() > 0}\n<ul>\n    {#each action.events}\n        <li>\n            <a href=\"http://google.com?q={it.payload.my_id}\" target=\"_blank\">{it.payload.my_name}</a>\n        </li>\n    {/each}\n</ul>\n<div>Have a nice day!</div>\n{/if}\n`.trimLeft();\n\nconst defaultPayload = JSON.stringify({\n    bundle: 'rhel',\n    application: 'policies',\n    event_type: 'policy-triggered',\n    timestamp: '2021-08-05T16:21:14.243',\n    account_id: '5758117',\n    // eslint-disable-next-line max-len\n    context: '{\"inventory_id\":\"80f7e57d-a16a-4189-82af-1d68a747c8b3\",\"system_check_in\":\"2021-08-05T16:21:12.953036\",\"display_name\":\"cool display name\"}',\n    events: [\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"3df53241-3e09-481b-a322-4892caaaaadc\",\"my_name\":\"Red color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"6c5e8451-a40a-4bb7-ab9a-0cb10a4c577d\",\"my_name\":\"Green color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"b4c6378a-c1fb-4d3e-8e9b-7e5bdfc09dd3\",\"my_name\":\"Blue color\"}'\n        }\n    ]\n}, null, 2);\n\ntype RenderedTemplateProps = {\n    isLoading: true;\n} | {\n   isLoading: false;\n   succeeded: true;\n   subject: string;\n   body: string;\n} | {\n    isLoading: false;\n    succeeded: false;\n    error: string;\n};\n\nconst RenderedTemplate: React.FunctionComponent<RenderedTemplateProps> = props => {\n    if (props.isLoading) {\n        return <Spinner />;\n    }\n\n    if (props.succeeded) {\n        return (\n            <>\n                <StackItem>\n                    <span><strong>Subject:</strong> { props.subject }</span>\n                </StackItem>\n                <StackItem>\n                    <strong>Body:</strong>\n                </StackItem>\n                <StackItem>\n                    <iframe width=\"100%\" srcDoc={ props.body } />\n                </StackItem>\n            </>\n        );\n    }\n\n    return (\n        <StackItem>\n            <HelperText>\n                <HelperTextItem variant=\"error\">{ props.error }</HelperTextItem>\n            </HelperText>\n        </StackItem>\n    );\n};\n\nexport const RenderEmailPage: React.FunctionComponent = () => {\n    const emailTemplate = useRenderEmailRequest();\n    const [ subjectTemplate, setSubjectTemplate ] = React.useState<string | undefined>(defaultSubjectTemplate);\n    const [ bodyTemplate, setBodyTemplate ] = React.useState<string | undefined>(defaultBodyTemplate);\n    const [ payload, setPayload ] = React.useState<string | undefined>(defaultPayload);\n\n    React.useEffect(() => {\n        const mutate = emailTemplate.mutate;\n        mutate({\n            subject: subjectTemplate ?? '',\n            body: bodyTemplate ?? '',\n            payload: payload ?? ''\n        });\n        // We only want to activate this once\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ ]);\n\n    let renderedProps: RenderedTemplateProps;\n\n    if (emailTemplate.loading) {\n        renderedProps = {\n            isLoading: true\n        };\n    } else if (emailTemplate.payload?.status === 200) {\n        renderedProps = {\n            isLoading: false,\n            succeeded: true,\n            subject: emailTemplate.payload.value.subject ?? '',\n            body: emailTemplate.payload.value.body ?? ''\n        };\n    } else if (emailTemplate.payload?.status === 400) {\n        renderedProps = {\n            isLoading: false,\n            succeeded: false,\n            error: emailTemplate.payload.value.message ?? 'Unknown error'\n        };\n    } else {\n        renderedProps = {\n            isLoading: false,\n            succeeded: false,\n            error: 'Unknown error'\n        };\n    }\n\n    const onRender = React.useCallback(() => {\n        const mutate = emailTemplate.mutate;\n        mutate({\n            subject: subjectTemplate ?? '',\n            body: bodyTemplate ?? '',\n            payload: payload ?? ''\n        });\n    }, [ emailTemplate.mutate, subjectTemplate, bodyTemplate, payload ]);\n\n    return (\n        <>\n            <PageSection>\n                <Split>\n                    <SplitItem isFilled>\n                        <Title headingLevel=\"h1\" >Email templates</Title>\n                    </SplitItem>\n                    <SplitItem>\n                        <Button onClick={ onRender }>Render</Button>\n                    </SplitItem>\n                </Split>\n            </PageSection>\n            <PageSection>\n                <Stack>\n                    <StackItem>\n                        <Title headingLevel=\"h2\">Result</Title>\n                    </StackItem>\n                    <RenderedTemplate { ...renderedProps }  />\n                </Stack>\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Subject template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultSubjectTemplate }\n                    height=\"50px\"\n                    onChange={ setSubjectTemplate }\n                />\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Body template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultBodyTemplate }\n                    height=\"300px\"\n                    onChange={ setBodyTemplate }\n                />\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Payload</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultPayload }\n                    height=\"300px\"\n                    isLanguageLabelVisible\n                    language={ Language.json }\n                    onChange={ setPayload }\n                />\n            </PageSection>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\n\nimport { AggregationPage } from './pages/AggregationPage';\nimport { ApplicationPage } from './pages/ApplicationPage';\nimport { BundlePage } from './pages/BundlePage';\nimport { EmailTemplatePage } from './pages/EmailTemplatePage';\nimport { MessageValidatorPage } from './pages/MessageValidatorPage';\nimport { RenderEmailPage } from './pages/RenderEmailPage';\n\ninterface Path {\n    readonly path: string;\n    readonly component: React.ComponentType;\n}\n\nexport const linkTo = {\n    bundle: (bundleId: string) => `/bundle/${bundleId}`,\n    application: (applicationId: string) => `/application/${applicationId}`,\n    aggregation: () => '/aggregation',\n    email: () => '/email',\n    emailTemplates: () => `/emailTemplates`,\n    messageValidator: () => '/utils/message-validator'\n};\n\nconst pathRoutes: Path[] = [\n    {\n        path: linkTo.aggregation(),\n        component: AggregationPage\n    },\n    {\n        path: linkTo.application(':applicationId'),\n        component: ApplicationPage\n    },\n    {\n        path: linkTo.bundle(':bundleId'),\n        component: BundlePage\n    },\n    {\n        path: linkTo.email(),\n        component: RenderEmailPage\n    },\n    {\n        path: linkTo.emailTemplates(),\n        component: EmailTemplatePage\n    },\n    {\n        path: linkTo.messageValidator(),\n        component: MessageValidatorPage\n    }\n];\n\nexport const Routes: React.FunctionComponent<unknown> = _props => {\n    return (\n        <Switch>\n            { pathRoutes.map(pathRoute => (\n                <Route\n                    key={ pathRoute.path }\n                    component={ pathRoute.component }\n                    path={ pathRoute.path }\n                />\n            )) }\n            <Redirect to={ linkTo.aggregation() } />\n        </Switch>\n    );\n};\n","import { Breadcrumb, BreadcrumbItem, Button, PageSection, Spinner, Title, Toolbar,\n    ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport {\n    TableComposable,\n    Tbody,\n    Td,  Th,   Thead,\n    Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useParameterizedQuery } from 'react-fetching-library';\nimport { useParams } from 'react-router';\n\nimport { useUserPermissions } from '../app/PermissionContext';\nimport { EmailTemplateTable } from '../components/EmailTemplates/EmailTemplateTable';\nimport { CreateEditModal } from '../components/EventTypes/CreateEditModal';\nimport { DeleteModal } from '../components/EventTypes/DeleteModal';\nimport { BreadcrumbLinkItem } from '../components/Wrappers/BreadCrumbLinkItem';\nimport { linkTo } from '../Routes';\nimport { useCreateEventType } from '../services/EventTypes/CreateEventTypes';\nimport { useDeleteEventType } from '../services/EventTypes/DeleteEventType';\nimport { useApplicationTypes } from '../services/EventTypes/GetApplication';\nimport { getBundleAction  } from '../services/EventTypes/GetBundleAction';\nimport { useEventTypes } from '../services/EventTypes/GetEventTypes';\nimport { EventType } from '../types/Notifications';\n\ntype ApplicationPageParams = {\n    applicationId: string;\n}\n\nexport const ApplicationPage: React.FunctionComponent = () => {\n    const { hasPermission, isAdmin } = useUserPermissions();\n    const { applicationId } = useParams<ApplicationPageParams>();\n    const eventTypesQuery = useEventTypes(applicationId);\n    const applicationTypesQuery = useApplicationTypes(applicationId);\n    const deleteEventTypeMutation = useDeleteEventType();\n    const newEvent = useCreateEventType();\n\n    const columns = [ 'Event Type', 'Name', 'Description', 'Event Type Id' ];\n\n    const [ eventTypes, setEventTypes ] = React.useState<Partial<EventType>>({});\n    const [ showModal, setShowModal ] = React.useState(false);\n    const [ isEdit, setIsEdit ] = React.useState(false);\n    const [ showDeleteModal, setShowDeleteModal ] = React.useState(false);\n\n    const getBundleId = React.useMemo(() => {\n        if (applicationTypesQuery.payload?.type === 'Application') {\n            return applicationTypesQuery.payload.value.bundleId;\n        }\n\n        return undefined;\n    }, [ applicationTypesQuery.payload ]);\n\n    const bundleNameQuery = useParameterizedQuery(getBundleAction);\n\n    React.useEffect(() => {\n        const query = bundleNameQuery.query;\n        if (getBundleId) {\n            query(getBundleId);\n        }\n    }, [ getBundleId, bundleNameQuery.query ]);\n\n    const bundle = useMemo(() => {\n        if (bundleNameQuery.payload?.status === 200) {\n            return bundleNameQuery.payload.value;\n        }\n\n        return undefined;\n    }, [ bundleNameQuery.payload?.status, bundleNameQuery.payload?.value ]);\n\n    const application = useMemo(() => {\n        if (applicationTypesQuery.payload?.status === 200) {\n            return applicationTypesQuery.payload.value;\n        }\n\n        return undefined;\n    }, [ applicationTypesQuery.payload?.status, applicationTypesQuery.payload?.value ]);\n\n    const createEventType = () => {\n        setShowModal(true);\n        setIsEdit(false);\n        setEventTypes({});\n    };\n\n    const handleSubmit = React.useCallback((eventType) => {\n        setShowModal(false);\n        const mutate = newEvent.mutate;\n        mutate({\n            id: eventType.id,\n            displayName: eventType.displayName ?? '',\n            name: eventType.name ?? '',\n            description: eventType.description ?? '',\n            applicationId\n\n        })\n        .then (eventTypesQuery.query);\n\n    }, [ applicationId, eventTypesQuery.query, newEvent.mutate ]);\n\n    const editEventType = (e: EventType) => {\n        setShowModal(true);\n        setIsEdit(true);\n        setEventTypes(e);\n    };\n\n    const handleDelete = React.useCallback(async () => {\n        setShowDeleteModal(false);\n        const deleteEventType = deleteEventTypeMutation.mutate;\n        const response = await deleteEventType(eventTypes.id);\n        if (response.error) {\n            return false;\n        }\n\n        return true;\n    }, [ deleteEventTypeMutation.mutate, eventTypes.id ]);\n\n    const deleteEventTypeModal = (e: EventType) => {\n        setShowDeleteModal(true);\n        setEventTypes(e);\n    };\n\n    const onClose = () => {\n        setShowModal(false);\n        eventTypesQuery.query();\n    };\n\n    const onDeleteClose = () => {\n        setShowDeleteModal(false);\n        eventTypesQuery.query();\n    };\n\n    if (eventTypesQuery.loading) {\n        return <Spinner />;\n    }\n\n    if (eventTypesQuery.payload?.status !== 200) {\n        return <span>Error while loading eventtypes: {eventTypesQuery.errorObject.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel=\"h1\">\n                    <Breadcrumb>\n                        <BreadcrumbItem target='#'> Bundles </BreadcrumbItem>\n                        <BreadcrumbLinkItem to={ linkTo.bundle(getBundleId ?? '') }>\n                            { bundle ? bundle.display_name : <Spinner /> }\n                        </BreadcrumbLinkItem>\n                        <BreadcrumbItem to='#' isActive> { (applicationTypesQuery.loading\n                        || applicationTypesQuery.payload?.status !== 200) ? <Spinner /> : applicationTypesQuery.payload.value.displayName }\n                        </BreadcrumbItem>\n                    </Breadcrumb></Title>\n                <TableComposable\n                    aria-label=\"Event types table\"\n                >\n                    <Thead>\n                        <Toolbar>\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <Button variant='primary' type='button'\n                                        isDisabled={ !application || !hasPermission(application?.id) }\n                                        onClick={ createEventType }> Create Event Type </Button>\n                                    <CreateEditModal\n                                        isEdit={ isEdit }\n                                        initialEventType= { eventTypes }\n                                        showModal={ showModal }\n                                        applicationName={ application?.displayName }\n                                        onClose={ onClose }\n                                        onSubmit={ handleSubmit }\n                                        isLoading={ eventTypesQuery.loading }\n\n                                    />\n                                    <React.Fragment>\n                                        <DeleteModal\n                                            onDelete={ handleDelete }\n                                            isOpen={ showDeleteModal }\n                                            onClose={ onDeleteClose }\n                                            eventTypeName={ eventTypes.name }\n                                            applicationName={ application?.displayName }\n                                            bundleName={ bundle?.display_name }\n\n                                        />\n                                    </React.Fragment>\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Tr>\n                            {columns.map((column, columnIndex) => (\n                                <Th key={ columnIndex }>{column}</Th>\n                            ))}\n                        </Tr>\n                    </Thead>\n                    <Tbody>{ (eventTypesQuery.payload.value.length === 0 ? 'There are no event types found for this application' : '') }</Tbody>\n                    <Tbody>\n                        { eventTypesQuery.payload.value.map(e => (\n                            <Tr key={ e.id }>\n                                <Td>{ e.displayName }</Td>\n                                <Td>{ e.name }</Td>\n                                <Td>{ e.description }</Td>\n                                <Td>{ e.id }</Td>\n                                <Td>\n                                    <Button className='edit' type='button' variant='plain'\n                                        isDisabled={ !application || !hasPermission(application?.id) }\n                                        onClick={ () => editEventType(e) }> { <PencilAltIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='delete' type='button' variant='plain'\n                                        isDisabled={ !application || !hasPermission(application?.id) }\n                                        onClick={ () => deleteEventTypeModal(e) }>{ <TrashIcon /> } </Button></Td>\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </TableComposable>\n            </PageSection>\n            { isAdmin && <EmailTemplateTable /> }\n        </React.Fragment>\n\n    );\n};\n\n","import { Breadcrumb, BreadcrumbItem, Button, PageSection, Spinner,\n    Title, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { useUserPermissions } from '../app/PermissionContext';\nimport { CreateEditApplicationModal } from '../components/Applications/CreateEditApplicationModal';\nimport { DeleteApplicationModal } from '../components/Applications/DeleteApplicationModal';\nimport { ListEventTypes } from '../components/EventTypes/ListEventTypes';\nimport { linkTo } from '../Routes';\nimport { useCreateApplication } from '../services/Applications/CreateApplication';\nimport { useDeleteApplication } from '../services/Applications/DeleteApplication';\nimport { useApplications } from '../services/Applications/GetApplicationById';\nimport { useBundleTypes } from '../services/Applications/GetBundleById';\nimport { Application, RoleOwnedApplication } from '../types/Notifications';\n\ntype BundlePageParams = {\n    bundleId: string;\n}\n\nexport const BundlePage: React.FunctionComponent = () => {\n    const { hasPermission, refresh, isAdmin } = useUserPermissions();\n    const { bundleId } = useParams<BundlePageParams>();\n    const getBundles = useBundleTypes(bundleId);\n    const getApplications = useApplications(bundleId);\n    const newApplication = useCreateApplication();\n    const deleteApplicationMutation = useDeleteApplication();\n\n    const columns = [ 'Application', 'Name', 'Event Types', 'Application Id' ];\n\n    const [ application, setApplication ] = React.useState<Partial<Application>>({});\n    const [ showModal, setShowModal ] = React.useState(false);\n    const [ showDeleteModal, setShowDeleteModal ] = React.useState(false);\n    const [ isEdit, setIsEdit ] = React.useState(false);\n\n    const bundle = React.useMemo(() => {\n        if (getBundles.payload?.status === 200) {\n            return getBundles.payload.value;\n        }\n\n        return undefined;\n    }, [ getBundles.payload?.status, getBundles.payload?.value ]);\n\n    const createApplication = () => {\n        setShowModal(true);\n        setIsEdit(false);\n        setApplication({});\n    };\n\n    const editApplication = (a: Application) => {\n        setShowModal(true);\n        setIsEdit(true);\n        setApplication(a);\n\n    };\n\n    const handleSubmit = React.useCallback((application: Partial<RoleOwnedApplication>) => {\n        setShowModal(false);\n        const mutate = newApplication.mutate;\n        mutate({\n            id: application.id,\n            displayName: application.displayName ?? '',\n            name: application.name ?? '',\n            bundleId,\n            ownerRole: application.ownerRole\n        })\n        .then(r => {\n            if (r.payload?.status === 200 && !isAdmin) {\n                refresh();\n            }\n\n            return r;\n        })\n        .then(getApplications.query);\n\n    }, [ bundleId, getApplications.query, newApplication.mutate, isAdmin, refresh ]);\n\n    const onClose = () => {\n        setShowModal(false);\n        setApplication({});\n        getApplications.query();\n    };\n\n    const handleDelete = React.useCallback(async () => {\n        setShowDeleteModal(false);\n        const deleteApplication = deleteApplicationMutation.mutate;\n        const response = await deleteApplication(application.id);\n        if (response.error) {\n            return false;\n        }\n\n        return true;\n    }, [ application.id, deleteApplicationMutation.mutate ]);\n\n    const deleteApplicationModal = (a: Application) => {\n        setShowDeleteModal(true);\n        setApplication(a);\n    };\n\n    const onDeleteClose = () => {\n        setShowDeleteModal(false);\n        getApplications.query();\n    };\n\n    if (getApplications.loading) {\n        return <Spinner />;\n    }\n\n    if (getApplications.payload?.status !== 200) {\n        return <span>Error while loading applications: {getApplications.errorObject.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel='h1'>\n                    <Breadcrumb>\n                        <BreadcrumbItem target='#'> Bundles </BreadcrumbItem>\n                        <BreadcrumbItem target='#' >{ (getBundles.loading || getBundles.payload?.status !== 200)\n                            ? <Spinner /> : getBundles.payload.value.displayName }\n                        </BreadcrumbItem>\n                    </Breadcrumb>\n                </Title>\n                <TableComposable aria-label=\"Applications table\">\n                    <Thead>\n                        <Toolbar>\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <Button variant='primary' type='button' onClick={ createApplication }> Create Application </Button>\n                                    {showModal && <CreateEditApplicationModal\n                                        isEdit={ isEdit }\n                                        bundleName={ bundle?.displayName }\n                                        initialApplication={ application }\n                                        showModal={ showModal }\n                                        applicationName={ application.displayName }\n                                        onClose={ onClose }\n                                        onSubmit={ handleSubmit }\n                                        isLoading={ getApplications.loading }\n\n                                    />\n                                    }\n                                    <React.Fragment>\n                                        <DeleteApplicationModal\n                                            onDelete={ handleDelete }\n                                            isOpen={ showDeleteModal }\n                                            onClose={ onDeleteClose }\n                                            applicationName={ application.displayName }\n                                            bundleName={ bundle?.displayName }\n\n                                        />\n                                    </React.Fragment>\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Tr>\n                            {columns.map((column, columnIndex) => (\n                                <Th key={ columnIndex }>{column}</Th>\n                            ))}\n                        </Tr>\n                    </Thead>\n                    <Tbody>\n                        { getApplications.payload.value.map(a =>\n                            <Tr key={ a.id }>\n                                <Td>\n                                    <Button variant=\"link\" component={ (props: any) =>\n                                        <Link { ...props } to={ linkTo.application(a.id) } /> }>{ a.displayName }</Button>\n                                </Td>\n                                <Td>{ a.name}</Td>\n                                <Td>\n                                    <ListEventTypes\n                                        appId={ a.id }\n                                    />\n                                </Td>\n                                <Td>{ a.id }</Td>\n                                <Td>\n                                    <Button className='edit' type='button' variant='plain'\n                                        isDisabled={ !hasPermission(a.id) }\n                                        onClick={ () => editApplication(a) }\n                                    > { <PencilAltIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='delete' type='button' variant='plain'\n                                        isDisabled={ !isAdmin }\n                                        onClick={ () => deleteApplicationModal(a) }\n\n                                    >{ <TrashIcon /> } </Button></Td>\n                            </Tr>\n                        )}\n                    </Tbody>\n                </TableComposable>\n            </PageSection>\n        </React.Fragment>\n\n    );\n};\n\n","import { Nav, NavExpandable, NavItem, NavList } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nimport { linkTo } from '../Routes';\nimport { Bundle } from '../types/Notifications';\n\ntype EnhancedNavItemProps = {\n    to: string;\n}\n\nconst EnhancedNavItem: React.FunctionComponent<EnhancedNavItemProps> = props => {\n    const match = useRouteMatch({\n        path: props.to,\n        exact: true\n    });\n\n    return (\n        <NavItem isActive={ !!match }>\n            <Link to={ props.to }>\n                { props.children }\n            </Link>\n        </NavItem>\n    );\n};\n\nexport interface NavigationProps {\n    bundles: ReadonlyArray<Bundle>;\n}\n\nexport const Navigation: React.FunctionComponent<NavigationProps> = props => {\n    return (\n        <Nav>\n            <NavList>\n                <NavExpandable title='Bundles'>\n                    { props.bundles.map(b => (\n                        <EnhancedNavItem key={ b.id } to={ linkTo.bundle(b.id) }>{ b.displayName }\n                        </EnhancedNavItem>\n                    )) }\n                </NavExpandable>\n                <NavExpandable title=\"Utils\" isExpanded>\n                    <EnhancedNavItem to={ linkTo.messageValidator() }>\n                        Notification validator\n                    </EnhancedNavItem>\n                </NavExpandable>\n                <EnhancedNavItem to={ linkTo.email() }>\n                    Email templates\n                </EnhancedNavItem>\n                <EnhancedNavItem to={ linkTo.aggregation() }>\n                    Aggregation\n                </EnhancedNavItem>\n            </NavList>\n        </Nav>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/redhat-logo.f7405300.svg\";","import '@patternfly/react-core/dist/styles/base.css';\nimport './app.css';\n\nimport { Alert, AlertVariant, Brand, Page, PageHeader, PageSection, PageSidebar, Spinner } from '@patternfly/react-core';\nimport React, { useMemo } from 'react';\nimport { style } from 'typestyle';\n\nimport { Routes } from '../Routes';\nimport { useBundles } from '../services/EventTypes/GetBundles';\nimport { usePermissions } from '../services/Permissions';\nimport { useServerInfo } from '../services/ServerInfo';\nimport { Navigation } from './Navigation';\nimport { PermissionContext } from './PermissionContext';\nimport logo from './redhat-logo.svg';\n\nconst brandClassName = style({\n    width: 150\n});\n\ntype Message = {\n    show: false;\n} | {\n    show: true;\n    content: string;\n}\n\nexport const App: React.FunctionComponent<unknown> = () => {\n\n    const [ isNavOpen, setNavOpen ] = React.useState(true);\n\n    const onNavToggle = React.useCallback(() => setNavOpen(prev => !prev), [ setNavOpen ]);\n\n    const bundles = useBundles();\n    const serverInfo = useServerInfo();\n\n    const message = useMemo<Message>(() => {\n        const payload = serverInfo.payload;\n        if (payload?.status === 200) {\n            if (payload.value.environment === 'PROD') {\n                return {\n                    show: true,\n                    content: 'You are viewing the production environment - '\n                    + 'Any change you make here will be applied immediately and could disrupt the service.'\n                };\n            }\n\n            return {\n                show: false\n            };\n        }\n\n        return {\n            show: true,\n            content: 'Could not load the current environment. Please verify the URL before making any change.'\n        };\n    }, [ serverInfo.payload ]);\n    const permissionQuery = usePermissions();\n\n    const appHeader = <PageHeader\n        showNavToggle\n        logo={ <Brand className={ brandClassName } src={ logo } alt=\"Red Hat\" /> }\n        logoProps={ { href: '/internal' } }\n        isNavOpen={ isNavOpen }\n        onNavToggle={ onNavToggle }\n    />;\n\n    const permission = React.useMemo<PermissionContext>(() => {\n        const payload = permissionQuery.payload;\n        if (payload?.status === 200) {\n            return {\n                isAdmin: payload.value.is_admin,\n                applications: payload.value.applications.map(a => ({\n                    id: a.id,\n                    displayName: a.display_name\n                })),\n                roles: payload.value.roles,\n                refresh: permissionQuery.query\n            };\n        }\n\n        return {\n            isAdmin: false,\n            applications: [],\n            roles: [],\n            refresh: permissionQuery.query\n        };\n    }, [ permissionQuery.payload, permissionQuery.query ]);\n\n    if (bundles.isLoading || serverInfo.loading || permissionQuery.loading) {\n        return (\n            <Page\n                header={ appHeader }\n            >\n                <PageSection>\n                    <Spinner />\n                </PageSection>\n            </Page>\n        );\n    }\n\n    const appSidebar = <PageSidebar nav={ <Navigation bundles={ bundles.bundles } /> } isNavOpen={ isNavOpen } />;\n\n    return (\n        <PermissionContext.Provider value={ permission }>\n            <Page\n                sidebar={ appSidebar }\n                header={ appHeader }>\n                { message.show && (\n                    <PageSection>\n                        <Alert variant={ AlertVariant.warning } title={ message.content } />\n                    </PageSection>\n                )}\n                <Routes />\n            </Page>\n        </PermissionContext.Provider>\n    );\n};\n","import produce from 'immer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { QueryResponse, useClient } from 'react-fetching-library';\nimport { useUnmountPromise } from 'react-use';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Bundle } from '../../types/Notifications';\n\nexport const useBundles = () => {\n    const client = useClient();\n    const mounted = useUnmountPromise();\n\n    const [ bundles, setBundles ] = useState<ReadonlyArray<Bundle>>([]);\n\n    const [ isLoading, setLoading ] = useState<boolean>();\n\n    const query = useCallback(async () => {\n        const cQuery = client.query;\n        setLoading(true);\n\n        const bundleResponse = await cQuery(Operations.InternalResourceGetBundles.actionCreator());\n\n        if (bundleResponse.payload?.status === 200) {\n\n            const bundles: ReadonlyArray<Bundle> = bundleResponse.payload.value.map(bundleResponse => ({\n                id: bundleResponse.id ?? '',\n                displayName: bundleResponse.display_name,\n                applications: []\n            }));\n\n            const applicationsPromises: Array<Promise<QueryResponse<Operations.InternalResourceGetApplications.Payload>>> = [];\n            for (const bundle of bundleResponse.payload.value) {\n                if (bundle.id) {\n                    applicationsPromises.push(cQuery(Operations.InternalResourceGetApplications.actionCreator({\n                        bundleId: bundle.id\n                    })));\n                }\n            }\n\n            const applicationResponses = await Promise.all(applicationsPromises);\n\n            const reducedBundles = applicationResponses.map(r => r.payload).reduce((bundles, applications) => produce(bundles, draftBundles => {\n                if (applications?.status === 200) {\n                    const draftBundle = draftBundles.find(b => applications.value.length > 0 && b.id === applications.value[0].bundle_id);\n                    if (draftBundle) {\n                        draftBundle.applications = applications.value.map(a => ({\n                            id: a.id ?? '',\n                            displayName: a.display_name,\n                            name: a.name,\n                            bundleId: a.bundle_id\n                        }));\n                    }\n                }\n            }), bundles);\n\n            (await mounted(Promise.resolve(() => setBundles((reducedBundles)))))();\n        }\n\n        setLoading(false);\n    }, [ client.query, mounted ]);\n\n    useEffect(() => {\n        query();\n    }, [ query ]);\n\n    return {\n        bundles,\n        isLoading\n    };\n};\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport const useServerInfo = () => {\n    return useQuery(Operations.InternalResourceGetServerInfo.actionCreator());\n};\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport const usePermissions = () => {\n    return useQuery(Operations.InternalPermissionResourceGetPermissions.actionCreator());\n};\n","import '@patternfly/react-core/dist/styles/base.css';\n\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ClientContextProvider, createClient } from 'react-fetching-library';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app/App';\n\nconst client = createClient({\n    responseInterceptors: [ validateSchemaResponseInterceptor ]\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <ClientContextProvider client={ client }>\n                <App />\n            </ClientContextProvider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}