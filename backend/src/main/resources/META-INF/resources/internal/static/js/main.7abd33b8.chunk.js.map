{"version":3,"sources":["generated/OpenapiInternal.ts","pages/AggregationPage.tsx","components/DeleteModal.tsx","services/CreateEventTypes.ts","services/DeleteEventType.ts","services/GetApplication.ts","services/GetBundleAction.ts","services/GetEventTypes.ts","services/RenderEmailRequest.ts","pages/RenderEmailPage.tsx","Routes.tsx","pages/ApplicationPage.tsx","app/Navigation.tsx","app/redhat-logo.svg","app/App.tsx","services/GetBundles.ts","index.tsx"],"names":["aggregationTemplate","trimLeft","DeleteModal","props","React","useState","errors","setErrors","onDelete","useCallback","a","onDeleteImpl","onClose","alert","Fragment","Modal","variant","ModalVariant","small","titleIconVariant","isOpen","title","eventTypeName","applicationName","bundleName","Spinner","TextInput","type","onChange","value","event","target","id","name","isRequired","ActionGroup","Button","isDisabled","onClick","zodSchemaApplication","zodSchemaBasicAuthentication","z","actions","zodSchemaBehaviorGroupAction","optional","nullable","bundle","zodSchemaBundle","bundle_id","zodSchemaUUID","created","display_name","updated","nonstrict","zodSchemaBehaviorGroupActionId","zodSchemaCamelProperties","end_time","start_time","status","zodSchemaStatus","zodSchemaEmailSubscriptionProperties","zodSchemaEndpoint","data","links","meta","zodSchemaMeta","zodSchemaEndpointType","zodSchemaEventLogEntry","zodSchemaEventLogEntryAction","application","application_id","description","displayName","zodSchemaHttpType","details","endpointId","invocationResult","invocationTime","int","body_template","payload","subject_template","only_admins","zodSchemaWebhookProperties","max","password","username","endpoint","behaviorGroupId","basic_authentication","disable_ssl_verification","extras","secret_token","sub_type","url","group_id","ignore_preferences","enabled","properties","event_type","endpoint_type","invocation_result","count","method","Schemas","InternalServiceHttpRoot","actionBuilder","queryParams","config","rules","ValidateRule","__Empty","build","AdminServiceDebugRbac","params","query","undefined","rhid","AdminServiceSetAdminDown","InternalServiceCreateApplication","body","Application","InternalServiceGetApplication","path","replace","appId","toString","InternalServiceUpdateApplication","Response200","InternalServiceDeleteApplication","EventType","InternalServiceGetEventTypes","Bundle","InternalServiceGetBundles","InternalServiceCreateBundle","InternalServiceGetBundle","bundleId","InternalServiceUpdateBundle","InternalServiceDeleteBundle","InternalServiceGetApplications","InternalServiceCreateEventType","InternalServiceUpdateEventType","eventTypeId","InternalServiceDeleteEventType","InternalServiceSetCurrentStatus","subject","Response400","message","InternalServiceRenderEmailTemplate","Operations","actionCreator","applicationId","deleteEventTypeActionCreator","validateResponse","validationResponseTransformer","applicationTypes","validatedResponse","getBundleAction","eventTypes","map","defaultSubjectTemplate","defaultBodyTemplate","defaultPayload","JSON","stringify","timestamp","account_id","context","events","metadata","RenderedTemplate","isLoading","succeeded","StackItem","width","srcDoc","HelperText","HelperTextItem","error","linkTo","pathRoutes","component","onEditorDidMount","editor","monaco","layout","focus","getModels","updateOptions","tabSize","_value","controls","useMemo","CodeEditorControl","icon","toolTipText","console","log","isVisible","PageSection","Title","headingLevel","CodeEditor","isDownloadEnabled","isUploadEnabled","customControls","isLineNumbersVisible","isLanguageLabelVisible","isMinimapVisible","language","Language","javascript","code","height","useParams","eventTypesQuery","useQuery","queryPayload","useEventTypes","applicationTypesQuery","useApplicationTypes","deleteEventTypeMutation","useMutation","newEvent","eventType","setEventType","showModal","setShowModal","isEdit","setIsEdit","showDeleteModal","setShowDeleteModal","getBundleId","bundleNameQuery","useParameterizedQuery","handleChange","prev","handleSubmit","mutate","then","handleDelete","deleteEventType","loading","errorObject","Breadcrumb","BreadcrumbItem","TableComposable","aria-label","Thead","Toolbar","ToolbarContent","ToolbarItem","medium","Form","isHorizontal","FormGroup","label","fieldId","helperText","hasIcon","TextArea","Tr","column","columnIndex","Th","Tbody","length","e","Td","className","editEventType","deleteEventTypeModal","renderedProps","emailTemplate","subjectTemplate","setSubjectTemplate","bodyTemplate","setBodyTemplate","setPayload","onRender","Split","SplitItem","isFilled","Stack","json","Routes","_props","pathRoute","to","EnhancedNavItem","match","useRouteMatch","exact","NavItem","isActive","children","Navigation","Nav","NavList","NavGroup","bundles","b","NavExpandable","applications","NavItemSeparator","App","isNavOpen","setNavOpen","onNavToggle","client","useClient","mounted","useUnmountPromise","setBundles","setLoading","cQuery","bundleResponse","applicationsPromises","push","Promise","all","applicationResponses","reducedBundles","r","reduce","produce","draftBundles","draftBundle","find","resolve","useEffect","useBundles","appHeader","PageHeader","showNavToggle","logo","Brand","src","alt","logoProps","href","Page","header","appSidebar","PageSidebar","nav","sidebar","createClient","responseInterceptors","validateSchemaResponseInterceptor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7abd33b8.chunk.js","sourcesContent":["/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const BehaviorGroup = zodSchemaBehaviorGroup();\n  export type BehaviorGroup = {\n    actions?: Array<BehaviorGroupAction> | undefined | null;\n    bundle?: Bundle | undefined | null;\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    updated?: string | undefined | null;\n  };\n\n  export const BehaviorGroupAction = zodSchemaBehaviorGroupAction();\n  export type BehaviorGroupAction = {\n    created?: string | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    id?: BehaviorGroupActionId | undefined | null;\n  };\n\n  export const BehaviorGroupActionId = zodSchemaBehaviorGroupActionId();\n  export type BehaviorGroupActionId = {\n    behaviorGroupId: UUID;\n    endpointId: UUID;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const CamelProperties = zodSchemaCamelProperties();\n  export type CamelProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    extras?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    secret_token?: string | undefined | null;\n    sub_type?: string | undefined | null;\n    url: string;\n  };\n\n  export const CurrentStatus = zodSchemaCurrentStatus();\n  export type CurrentStatus = {\n    end_time?: string | undefined | null;\n    start_time?: string | undefined | null;\n    status: Status;\n  };\n\n  export const EmailSubscriptionProperties =\n    zodSchemaEmailSubscriptionProperties();\n  export type EmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'DAILY' | 'INSTANT';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookProperties | EmailSubscriptionProperties | CamelProperties)\n      | undefined\n      | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointProperties = zodSchemaEndpointProperties();\n  export type EndpointProperties = unknown;\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType =\n    | 'webhook'\n    | 'email_subscription'\n    | 'default'\n    | 'camel';\n\n  export const EventLogEntry = zodSchemaEventLogEntry();\n  export type EventLogEntry = {\n    actions: Array<EventLogEntryAction>;\n    application: string;\n    bundle: string;\n    created: string;\n    event_type: string;\n    id: UUID;\n  };\n\n  export const EventLogEntryAction = zodSchemaEventLogEntryAction();\n  export type EventLogEntryAction = {\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpoint_type: EndpointType;\n    id: UUID;\n    invocation_result: boolean;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    application_id: UUID;\n    description?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    id?: UUID | undefined | null;\n    invocationResult: boolean;\n    invocationTime: number;\n  };\n\n  export const PageEventLogEntry = zodSchemaPageEventLogEntry();\n  export type PageEventLogEntry = {\n    data: Array<EventLogEntry>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const RenderEmailTemplateRequest =\n    zodSchemaRenderEmailTemplateRequest();\n  export type RenderEmailTemplateRequest = {\n    body_template: string;\n    payload: string;\n    subject_template: string;\n  };\n\n  export const RequestEmailSubscriptionProperties =\n    zodSchemaRequestEmailSubscriptionProperties();\n  export type RequestEmailSubscriptionProperties = {\n    only_admins: boolean;\n  };\n\n  export const Status = zodSchemaStatus();\n  export type Status = 'MAINTENANCE' | 'UP';\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const WebhookProperties = zodSchemaWebhookProperties();\n  export type WebhookProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  export const __Empty = zodSchema__Empty();\n  export type __Empty = string | undefined;\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroup() {\n      return z\n      .object({\n          actions: z.array(zodSchemaBehaviorGroupAction()).optional().nullable(),\n          bundle: zodSchemaBundle().optional().nullable(),\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupAction() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          id: zodSchemaBehaviorGroupActionId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupActionId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          endpointId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCamelProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          extras: z.record(z.string()).optional().nullable(),\n          secret_token: z.string().optional().nullable(),\n          sub_type: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCurrentStatus() {\n      return z\n      .object({\n          end_time: z.string().optional().nullable(),\n          start_time: z.string().optional().nullable(),\n          status: zodSchemaStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'DAILY', 'INSTANT' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookProperties(),\n              zodSchemaEmailSubscriptionProperties(),\n              zodSchemaCamelProperties()\n          ])\n          .optional()\n          .nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default', 'camel' ]);\n  }\n\n  function zodSchemaEventLogEntry() {\n      return z\n      .object({\n          actions: z.array(zodSchemaEventLogEntryAction()),\n          application: z.string(),\n          bundle: z.string(),\n          created: z.string(),\n          event_type: z.string(),\n          id: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventLogEntryAction() {\n      return z\n      .object({\n          details: z.record(z.unknown()).optional().nullable(),\n          endpoint_type: zodSchemaEndpointType(),\n          id: zodSchemaUUID(),\n          invocation_result: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          application_id: zodSchemaUUID(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          invocationResult: z.boolean(),\n          invocationTime: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventLogEntry() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventLogEntry()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRenderEmailTemplateRequest() {\n      return z\n      .object({\n          body_template: z.string(),\n          payload: z.string(),\n          subject_template: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestEmailSubscriptionProperties() {\n      return z\n      .object({\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatus() {\n      return z.enum([ 'MAINTENANCE', 'UP' ]);\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaWebhookProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchema__Empty() {\n      return z.string().max(0).optional();\n  }\n}\n\nexport namespace Operations {\n  // GET /\n  export namespace InternalServiceHttpRoot {\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 204) ]\n        })\n        .build();\n    };\n  }\n  // GET /admin\n  export namespace AdminServiceDebugRbac {\n    const Rhid = z.string();\n    type Rhid = string;\n    export interface Params {\n      rhid?: Rhid;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './admin';\n        const query = {} as Record<string, any>;\n        if (params.rhid !== undefined) {\n            query.rhid = params.rhid;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /admin/status\n  export namespace AdminServiceSetAdminDown {\n    const Status = z.string();\n    type Status = string;\n    export interface Params {\n      status?: Status;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './admin/status';\n        const query = {} as Record<string, any>;\n        if (params.status !== undefined) {\n            query.status = params.status;\n        }\n\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /applications\n  export namespace InternalServiceCreateApplication {\n    export interface Params {\n      body: Schemas.Application;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Application', 200, Schemas.Application>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.Application, 'Application', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /applications/{appId}\n  export namespace InternalServiceGetApplication {\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Application', 200, Schemas.Application>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.Application, 'Application', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /applications/{appId}\n  export namespace InternalServiceUpdateApplication {\n    export interface Params {\n      appId: Schemas.UUID;\n      body: Schemas.Application;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /applications/{appId}\n  export namespace InternalServiceDeleteApplication {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /applications/{appId}/eventTypes\n  export namespace InternalServiceGetEventTypes {\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}/eventTypes'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles\n  export namespace InternalServiceGetBundles {\n    const Response200 = z.array(Schemas.Bundle);\n    type Response200 = Array<Schemas.Bundle>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /bundles\n  export namespace InternalServiceCreateBundle {\n    export interface Params {\n      body: Schemas.Bundle;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Bundle', 200, Schemas.Bundle>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.Bundle, 'Bundle', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles/{bundleId}\n  export namespace InternalServiceGetBundle {\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Bundle', 200, Schemas.Bundle>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.Bundle, 'Bundle', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /bundles/{bundleId}\n  export namespace InternalServiceUpdateBundle {\n    export interface Params {\n      bundleId: Schemas.UUID;\n      body: Schemas.Bundle;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /bundles/{bundleId}\n  export namespace InternalServiceDeleteBundle {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles/{bundleId}/applications\n  export namespace InternalServiceGetApplications {\n    const Response200 = z.array(Schemas.Application);\n    type Response200 = Array<Schemas.Application>;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}/applications'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /eventTypes\n  export namespace InternalServiceCreateEventType {\n    export interface Params {\n      body: Schemas.EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'EventType', 200, Schemas.EventType>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.EventType, 'EventType', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /eventTypes/{eventTypeId}\n  export namespace InternalServiceUpdateEventType {\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      body: Schemas.EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /eventTypes/{eventTypeId}\n  export namespace InternalServiceDeleteEventType {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /status\n  export namespace InternalServiceSetCurrentStatus {\n    export interface Params {\n      body: Schemas.CurrentStatus;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './status';\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 204) ]\n        })\n        .build();\n    };\n  }\n  // POST /templates/email/render\n  export namespace InternalServiceRenderEmailTemplate {\n    const Response200 = z\n    .object({\n        body: z.string().optional().nullable(),\n        subject: z.string().optional().nullable()\n    })\n    .nonstrict();\n    type Response200 = {\n      body?: string | undefined | null;\n      subject?: string | undefined | null;\n    };\n    const Response400 = z\n    .object({\n        message: z.string().optional().nullable()\n    })\n    .nonstrict();\n    type Response400 = {\n      message?: string | undefined | null;\n    };\n    export interface Params {\n      body: Schemas.RenderEmailTemplateRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', 400, Response400>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/render';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Response400, 'unknown', 400)\n            ]\n        })\n        .build();\n    };\n  }\n}\n","import '@patternfly/react-core/dist/styles/base.css';\n\nimport { CodeEditor, CodeEditorControl, Language } from '@patternfly/react-code-editor';\nimport { PageSection, Title } from '@patternfly/react-core';\nimport { PlayIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\nimport { useMemo } from 'react';\n\nconst aggregationTemplate = `\n// Here we can initialize the value of the Aggregation result.\nconst result = {\n};\n\n// This function will be called by every action that was sent to notification server\n// to update the result with its values.\nconst aggregate = (action) => {\n\n    return result;\n};\n`.trimLeft();\n\nexport const AggregationPage: React.FunctionComponent<unknown> = () => {\n\n    const onEditorDidMount = React.useCallback((editor, monaco) => {\n        editor.layout();\n        editor.focus();\n        monaco.editor.getModels()[0].updateOptions({ tabSize: 5 });\n    }, []);\n\n    const onChange = React.useCallback((_value) => {\n        // does not do anything yet\n    }, []);\n\n    const controls = useMemo(() => [\n        <CodeEditorControl\n            key=\"test\"\n            icon={ <PlayIcon /> }\n            toolTipText=\"Test aggregation\"\n            onClick={ () => console.log('testing') }\n            isVisible={ true }\n        />\n    ], []);\n\n    return <>\n        <PageSection>\n            <Title headingLevel=\"h1\">Aggregation templates</Title>\n        </PageSection>\n        <PageSection>\n            <CodeEditor\n                isDownloadEnabled\n                isUploadEnabled\n                customControls={ controls }\n                isLineNumbersVisible\n                isLanguageLabelVisible\n                isMinimapVisible={ false }\n                language={ Language.javascript }\n                onEditorDidMount={ onEditorDidMount }\n                onChange={ onChange }\n                code={ aggregationTemplate }\n                height=\"300px\"\n            />\n        </PageSection>\n    </>;\n};\n","import { ActionGroup, Button, Modal, ModalVariant, Spinner, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { EventType } from '../types/Notifications';\n\ninterface DeleteModalProps {\n    eventTypeName?: string;\n    onDelete: (eventType?: EventType) => Promise<boolean>;\n    bundleName?: string;\n    applicationName?: string;\n    isOpen: boolean;\n    onClose: () => void;\n\n}\nexport const DeleteModal: React.FunctionComponent<DeleteModalProps> = (props) => {\n    const [ errors, setErrors ] = React.useState(true);\n\n    const onDelete = React.useCallback(async () => {\n        const onDeleteImpl = props.onDelete;\n        const response = await onDeleteImpl();\n        if (response) {\n            props.onClose();\n        } else {\n            alert('Could not delete event type, please try again.');\n        }\n    }, [ props ]);\n\n    const handleDeleteChange = (value: string, event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        if (target.value !== props.eventTypeName) {\n            return setErrors(true);\n        } else if (target.value === props.eventTypeName) {\n            return setErrors(false);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Modal variant={ ModalVariant.small } titleIconVariant=\"warning\" isOpen={ props.isOpen }\n                onClose={ props.onClose }\n                title={ `Permanently delete ${ props.eventTypeName }` }>\n                { <b>{ props.eventTypeName }</b> } {`from  ${ props.applicationName }/${ props.bundleName ? props.bundleName :\n                    <Spinner /> } will be deleted. \n                        If an application is currently sending this event, it will no longer be processed.`}\n                <br />\n                <br />\n                        Type <b>{ props.eventTypeName }</b> to confirm:\n                <br />\n                <TextInput type='text' onChange={ handleDeleteChange } id='name' name=\"name\" isRequired />\n                <br />\n                <br />\n                <ActionGroup>\n                    <Button variant='danger' type='button' isDisabled = { errors }\n                        onClick={ onDelete }>Delete</Button>\n                    <Button variant='link' type='button' onClick={ props.onClose }>Cancel</Button>\n                </ActionGroup>\n            </Modal>\n        </React.Fragment>\n    );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport type CreateEventType = {\n    id?: string;\n    displayName: string;\n    description: string;\n    applicationId: string;\n    name: string;\n\n}\n\nconst actionCreator =  (params: CreateEventType) => {\n    if (params.id === undefined) {\n        return Operations.InternalServiceCreateEventType.actionCreator({\n            body: {\n                id: params.id,\n                application_id: params.applicationId,\n                description: params.description,\n                display_name: params.displayName,\n                name: params.name\n\n            }\n        });\n    }\n\n    return Operations.InternalServiceUpdateEventType.actionCreator({\n        eventTypeId: params.id,\n        body: {\n            id: params.id,\n            application_id: params.applicationId,\n            description: params.description,\n            display_name: params.displayName,\n            name: params.name\n\n        }\n    });\n};\n\nexport const useCreateEventType = () => {\n    return useMutation(actionCreator);\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport const deleteEventTypeActionCreator = (eventTypeId: string) => {\n    return Operations.InternalServiceDeleteEventType.actionCreator({\n        eventTypeId\n    });\n};\n\nexport const useDeleteEventType = () => useMutation<boolean>(deleteEventTypeActionCreator);\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\nimport { Application } from '../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalServiceGetApplication.Payload) => {\n        if (payload.status === 200) {\n            const applicationTypes: Application = { id: payload.value.id ?? '', displayName: payload.value.display_name,\n                bundleId: payload.value.bundle_id };\n\n            return validatedResponse(\n                'Application',\n                200,\n                applicationTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useApplicationTypes = (applicationId: string) => {\n    const query = useQuery(Operations.InternalServiceGetApplication.actionCreator({\n        appId: applicationId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { Operations } from '../generated/OpenapiInternal';\n\nexport const getBundleAction = (bundleId: string) => {\n    return Operations.InternalServiceGetBundle.actionCreator({\n        bundleId\n    });\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\nimport { EventType } from '../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalServiceGetEventTypes.Payload) => {\n        if (payload.status === 200) {\n            const eventTypes: ReadonlyArray<EventType> = payload.value.map(value => ({\n                id: value.id ?? '',\n                name: value.name,\n                displayName: value.display_name,\n                description: value.description ?? '',\n                applicationId: value.application_id\n            }));\n\n            return validatedResponse(\n                'EventTypes',\n                200,\n                eventTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useEventTypes = (applicationId: string) => {\n    const query = useQuery(Operations.InternalServiceGetEventTypes.actionCreator({\n        appId: applicationId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport type RenderEmailRequest = {\n    subject: string;\n    body: string;\n    payload: string;\n}\n\nconst actionCreator = (params: RenderEmailRequest) => Operations.InternalServiceRenderEmailTemplate.actionCreator({\n    body: {\n        subject_template: params.subject,\n        body_template: params.body,\n        payload: params.payload\n    }\n});\n\nexport const useRenderEmailRequest = () => {\n    return useMutation(actionCreator);\n};\n","import { CodeEditor, Language } from '@patternfly/react-code-editor';\nimport {\n    HelperText,\n    HelperTextItem,\n    PageSection,\n    Spinner,\n    Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Title\n} from '@patternfly/react-core';\nimport { Button } from '@patternfly/react-core/';\nimport * as React from 'react';\n\nimport { useRenderEmailRequest } from '../services/RenderEmailRequest';\n\nconst defaultSubjectTemplate = `\nImportant email to {user.firstName} from MyCoolApp!\n`.trimLeft();\n\nconst defaultBodyTemplate = `\n<div>Hello {user.firstName} {user.lastName},</div>\n<div>We have some important news for you, MyApp has a notification for you</div>\n<div>As a reminder, current user: {user.username}: is active? {user.isActive}; is admin? {user.isAdmin}</div>\n<div>\n    System with name <strong>{action.context.display_name}</strong> (<strong>{action.context.inventory_id}</strong>) \n    did a check in at {action.context.system_check_in.toUtcFormat()}. \n    It was about {action.context.system_check_in.toTimeAgo()}\n</div>\n<div>This is a loop:</div>\n{#if action.events.size() > 0}\n<ul>\n    {#each action.events}\n        <li>\n            <a href=\"http://google.com?q={it.payload.my_id}\" target=\"_blank\">{it.payload.my_name}</a>\n        </li>\n    {/each}\n</ul>\n<div>Have a nice day!</div>\n{/if}\n`.trimLeft();\n\nconst defaultPayload = JSON.stringify({\n    bundle: 'rhel',\n    application: 'policies',\n    event_type: 'policy-triggered',\n    timestamp: '2021-08-05T16:21:14.243',\n    account_id: '5758117',\n    // eslint-disable-next-line max-len\n    context: '{\"inventory_id\":\"80f7e57d-a16a-4189-82af-1d68a747c8b3\",\"system_check_in\":\"2021-08-05T16:21:12.953036\",\"display_name\":\"cool display name\"}',\n    events: [\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"3df53241-3e09-481b-a322-4892caaaaadc\",\"my_name\":\"Red color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"6c5e8451-a40a-4bb7-ab9a-0cb10a4c577d\",\"my_name\":\"Green color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"b4c6378a-c1fb-4d3e-8e9b-7e5bdfc09dd3\",\"my_name\":\"Blue color\"}'\n        }\n    ]\n}, null, 2);\n\ntype RenderedTemplateProps = {\n    isLoading: true;\n} | {\n   isLoading: false;\n   succeeded: true;\n   subject: string;\n   body: string;\n} | {\n    isLoading: false;\n    succeeded: false;\n    error: string;\n};\n\nconst RenderedTemplate: React.FunctionComponent<RenderedTemplateProps> = props => {\n    if (props.isLoading) {\n        return <Spinner />;\n    }\n\n    if (props.succeeded) {\n        return (\n            <>\n                <StackItem>\n                    <span><strong>Subject:</strong> { props.subject }</span>\n                </StackItem>\n                <StackItem>\n                    <strong>Body:</strong>\n                </StackItem>\n                <StackItem>\n                    <iframe width=\"100%\" srcDoc={ props.body } />\n                </StackItem>\n            </>\n        );\n    }\n\n    return (\n        <StackItem>\n            <HelperText>\n                <HelperTextItem variant=\"error\">{ props.error }</HelperTextItem>\n            </HelperText>\n        </StackItem>\n    );\n};\n\nexport const RenderEmailPage: React.FunctionComponent = () => {\n    const emailTemplate = useRenderEmailRequest();\n    const [ subjectTemplate, setSubjectTemplate ] = React.useState<string | undefined>(defaultSubjectTemplate);\n    const [ bodyTemplate, setBodyTemplate ] = React.useState<string | undefined>(defaultBodyTemplate);\n    const [ payload, setPayload ] = React.useState<string | undefined>(defaultPayload);\n\n    React.useEffect(() => {\n        const mutate = emailTemplate.mutate;\n        mutate({\n            subject: subjectTemplate ?? '',\n            body: bodyTemplate ?? '',\n            payload: payload ?? ''\n        });\n        // We only want to activate this once\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ ]);\n\n    let renderedProps: RenderedTemplateProps;\n\n    if (emailTemplate.loading) {\n        renderedProps = {\n            isLoading: true\n        };\n    } else if (emailTemplate.payload?.status === 200) {\n        renderedProps = {\n            isLoading: false,\n            succeeded: true,\n            subject: emailTemplate.payload.value.subject ?? '',\n            body: emailTemplate.payload.value.body ?? ''\n        };\n    } else if (emailTemplate.payload?.status === 400) {\n        renderedProps = {\n            isLoading: false,\n            succeeded: false,\n            error: emailTemplate.payload.value.message ?? 'Unknown error'\n        };\n    } else {\n        renderedProps = {\n            isLoading: false,\n            succeeded: false,\n            error: 'Unknown error'\n        };\n    }\n\n    const onRender = React.useCallback(() => {\n        const mutate = emailTemplate.mutate;\n        mutate({\n            subject: subjectTemplate ?? '',\n            body: bodyTemplate ?? '',\n            payload: payload ?? ''\n        });\n    }, [ emailTemplate.mutate, subjectTemplate, bodyTemplate, payload ]);\n\n    return (\n        <>\n            <PageSection>\n                <Split>\n                    <SplitItem isFilled>\n                        <Title headingLevel=\"h1\" >Email templates</Title>\n                    </SplitItem>\n                    <SplitItem>\n                        <Button onClick={ onRender }>Render</Button>\n                    </SplitItem>\n                </Split>\n            </PageSection>\n            <PageSection>\n                <Stack>\n                    <StackItem>\n                        <Title headingLevel=\"h2\">Result</Title>\n                    </StackItem>\n                    <RenderedTemplate { ...renderedProps }  />\n                </Stack>\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Subject template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultSubjectTemplate }\n                    height=\"50px\"\n                    onChange={ setSubjectTemplate }\n                />\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Body template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultBodyTemplate }\n                    height=\"300px\"\n                    onChange={ setBodyTemplate }\n                />\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Payload</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultPayload }\n                    height=\"300px\"\n                    isLanguageLabelVisible\n                    language={ Language.json }\n                    onChange={ setPayload }\n                />\n            </PageSection>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\n\nimport { AggregationPage } from './pages/AggregationPage';\nimport { ApplicationPage } from './pages/ApplicationPage';\nimport { RenderEmailPage } from './pages/RenderEmailPage';\n\ninterface Path {\n    readonly path: string;\n    readonly component: React.ComponentType;\n}\n\nexport const linkTo = {\n    application: (applicationId: string) => `/application/${applicationId}`,\n    aggregation: () => '/aggregation',\n    email: () => '/email'\n};\n\nconst pathRoutes: Path[] = [\n    {\n        path: linkTo.aggregation(),\n        component: AggregationPage\n    },\n    {\n        path: linkTo.application(':applicationId'),\n        component: ApplicationPage\n    },\n    {\n        path: linkTo.email(),\n        component: RenderEmailPage\n    }\n];\n\nexport const Routes: React.FunctionComponent<unknown> = _props => {\n    return (\n        <Switch>\n            { pathRoutes.map(pathRoute => (\n                <Route\n                    key={ pathRoute.path }\n                    component={ pathRoute.component }\n                    path={ pathRoute.path }\n                />\n            )) }\n            <Redirect to={ linkTo.aggregation() } />\n        </Switch>\n    );\n};\n","import { Breadcrumb, BreadcrumbItem, Button, Modal, ModalVariant, PageSection, Spinner, Title, Toolbar,\n    ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport {\n    ActionGroup,\n    Form,\n    FormGroup, HelperText, HelperTextItem, TextArea,\n    TextInput  } from '@patternfly/react-core';\nimport { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport {\n    TableComposable,\n    Tbody,\n    Td,  Th,   Thead,\n    Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useParameterizedQuery } from 'react-fetching-library';\nimport { useParams } from 'react-router';\n\nimport { DeleteModal } from '../components/DeleteModal';\nimport { useCreateEventType } from '../services/CreateEventTypes';\nimport { useDeleteEventType } from '../services/DeleteEventType';\nimport { useApplicationTypes } from '../services/GetApplication';\nimport { getBundleAction  } from '../services/GetBundleAction';\nimport { useEventTypes } from '../services/GetEventTypes';\nimport { EventType } from '../types/Notifications';\n\ntype ApplicationPageParams = {\n    applicationId: string;\n}\n\nexport const ApplicationPage: React.FunctionComponent = () => {\n    const { applicationId } = useParams<ApplicationPageParams>();\n    const eventTypesQuery = useEventTypes(applicationId);\n    const applicationTypesQuery = useApplicationTypes(applicationId);\n    const deleteEventTypeMutation = useDeleteEventType();\n\n    const columns = [ 'Event Type', 'Name', 'Description', 'Event Type Id' ];\n\n    const newEvent = useCreateEventType();\n    const [ eventType, setEventType ] = React.useState<Partial<EventType>>({});\n\n    const [ showModal, setShowModal ] = React.useState(false);\n    const [ isEdit, setIsEdit ] = React.useState(false);\n\n    const [ showDeleteModal, setShowDeleteModal ] = React.useState(false);\n\n    const getBundleId = React.useMemo(() => {\n        if (applicationTypesQuery.payload?.type === 'Application') {\n            return applicationTypesQuery.payload.value.bundleId;\n        }\n\n        return undefined;\n    }, [ applicationTypesQuery.payload ]);\n\n    const bundleNameQuery = useParameterizedQuery(getBundleAction);\n\n    React.useEffect(() => {\n        const query = bundleNameQuery.query;\n        if (getBundleId) {\n            query(getBundleId);\n        }\n    }, [ getBundleId, bundleNameQuery.query ]);\n\n    const bundle = useMemo(() => {\n        if (bundleNameQuery.payload?.status === 200) {\n            return bundleNameQuery.payload.value;\n        }\n\n        return undefined;\n    }, [ bundleNameQuery.payload?.status, bundleNameQuery.payload?.value ]);\n\n    const application = useMemo(() => {\n        if (applicationTypesQuery.payload?.status === 200) {\n            return applicationTypesQuery.payload.value;\n        }\n\n        return undefined;\n    }, [ applicationTypesQuery.payload?.status, applicationTypesQuery.payload?.value ]);\n\n    const createEventType = () => {\n        setShowModal(true);\n        setIsEdit(false);\n        setEventType({});\n    };\n\n    const handleChange = (value: string, event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>) => {\n        const target = event.target as HTMLInputElement;\n        setEventType(prev => ({ ...prev, [target.name]: target.value }));\n    };\n\n    const handleSubmit = React.useCallback(() => {\n        setShowModal(false);\n        const mutate = newEvent.mutate;\n        mutate({\n            id: eventType.id,\n            displayName: eventType.displayName ?? '',\n            name: eventType.name ?? '',\n            description: eventType.description ?? '',\n            applicationId\n\n        })\n        .then (eventTypesQuery.query);\n\n    }, [ applicationId, eventType, eventTypesQuery.query, newEvent.mutate ]);\n\n    const editEventType = (e: EventType) => {\n        setShowModal(true);\n        setIsEdit(true);\n        setEventType(e);\n    };\n\n    const handleDelete = React.useCallback(async () => {\n        setShowDeleteModal(false);\n        const deleteEventType = deleteEventTypeMutation.mutate;\n        const response = await deleteEventType(eventType.id);\n        if (response.error) {\n            return false;\n        }\n\n        return true;\n    }, [ deleteEventTypeMutation.mutate, eventType.id ]);\n\n    const deleteEventTypeModal = (e: EventType) => {\n        setShowDeleteModal(true);\n        setEventType(e);\n    };\n\n    const onClose = () => {\n        setShowDeleteModal(false);\n        eventTypesQuery.query();\n    };\n\n    if (eventTypesQuery.loading) {\n        return <Spinner />;\n    }\n\n    if (eventTypesQuery.payload?.status !== 200) {\n        return <span>Error while loading eventtypes: {eventTypesQuery.errorObject.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel=\"h1\">\n                    <Breadcrumb>\n                        <BreadcrumbItem target='#'>{ bundle ? bundle.display_name : <Spinner /> }\n                        </BreadcrumbItem>\n\n                        <BreadcrumbItem target='#'> { (applicationTypesQuery.loading || applicationTypesQuery.payload?.status !== 200) ?\n                            <Spinner /> : applicationTypesQuery.payload.value.displayName } </BreadcrumbItem>\n                    </Breadcrumb></Title>\n                <TableComposable\n                    aria-label=\"Event types table\"\n                >\n                    <Thead>\n                        <Toolbar>\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <Button variant='primary' type='button'\n                                        onClick={ createEventType }> Create Event Type </Button>\n                                    <Modal\n                                        variant={ ModalVariant.medium }\n                                        title={ `${ isEdit ? 'Update' : 'Create'} Event Type for ${ (applicationTypesQuery.loading ||\n                                            applicationTypesQuery.payload?.status !== 200) ?\n                                            <Spinner /> : applicationTypesQuery.payload.value.displayName }` }\n                                        isOpen={ showModal }\n                                        onClose={ () => setShowModal(false) }\n                                    ><Form isHorizontal>\n                                            <FormGroup label='Name' fieldId='name' isRequired\n                                                helperText={ isEdit ? <HelperText><HelperTextItem variant=\"warning\" hasIcon>\n                                                    If this field is modified it may affect exisiting behavior.\n                                                </HelperTextItem></HelperText> : 'This is a short name, only composed of a-z 0-9 and - characters.' }>\n                                                <TextInput\n                                                    type='text'\n                                                    value={ eventType.name }\n                                                    onChange={ handleChange }\n                                                    id='name'\n                                                    name=\"name\"\n                                                /></FormGroup>\n                                            <FormGroup label='Display name' fieldId='display-name' isRequired\n                                                helperText='This is the name you want to display on the UI'>\n                                                <TextInput\n                                                    type='text'\n                                                    value={ eventType.displayName }\n                                                    onChange={ handleChange }\n                                                    id='display-name'\n                                                    name=\"displayName\"\n                                                /></FormGroup>\n                                            <FormGroup label='Description' fieldId='description'\n                                                helperText='Optional short description that appears in the UI\n                                                to help admin descide how to notify users.'>\n                                                <TextArea\n                                                    type='text'\n                                                    value={ eventType.description }\n                                                    onChange={ handleChange }\n                                                    id='description'\n                                                    name=\"description\"\n                                                /></FormGroup>\n                                            <ActionGroup>\n                                                <Button variant='primary' type='submit'\n                                                    { ...(newEvent.loading || newEvent.payload?.status !== 200) ?\n                                                        <Spinner /> : eventTypesQuery.payload.value }\n                                                    onClick={ handleSubmit }>{isEdit ? 'Update' : 'Submit' }</Button>\n                                                <Button variant='link' type='reset'\n                                                    onClick={ () => setShowModal(false) }>Cancel</Button>\n                                            </ActionGroup>\n                                        </Form>\n                                    </Modal>\n                                    <React.Fragment>\n                                        <DeleteModal\n                                            onDelete={ handleDelete }\n                                            isOpen={ showDeleteModal }\n                                            onClose={ onClose }\n                                            eventTypeName={ eventType.name }\n                                            applicationName={ application?.displayName }\n                                            bundleName={ bundle?.display_name }\n\n                                        />\n                                    </React.Fragment>\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Tr>\n                            {columns.map((column, columnIndex) => (\n                                <Th key={ columnIndex }>{column}</Th>\n                            ))}\n                        </Tr>\n                    </Thead>\n                    <Tbody>{ (eventTypesQuery.payload.value.length === 0 ? 'There are no event types found for this application' : '') }</Tbody>\n                    <Tbody>\n                        { eventTypesQuery.payload.value.map(e => (\n                            <Tr key={ e.id }>\n                                <Td>{ e.displayName }</Td>\n                                <Td>{ e.name }</Td>\n                                <Td>{ e.description }</Td>\n                                <Td>{ e.id }</Td>\n                                <Td>\n                                    <Button className='edit' type='button' variant='plain'\n                                        onClick={ () => editEventType(e) }> { <PencilAltIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='delete' type='button' variant='plain'\n                                        onClick={ () => deleteEventTypeModal(e) }>{ <TrashIcon /> } </Button></Td>\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </TableComposable>\n            </PageSection>\n        </React.Fragment>\n\n    );\n};\n\n","import { Nav, NavExpandable, NavGroup, NavItem, NavItemSeparator, NavList } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nimport { linkTo } from '../Routes';\nimport { Bundle } from '../types/Notifications';\n\ntype EnhancedNavItemProps = {\n    to: string;\n}\n\nconst EnhancedNavItem: React.FunctionComponent<EnhancedNavItemProps> = props => {\n    const match = useRouteMatch({\n        path: props.to,\n        exact: true\n    });\n\n    return (\n        <NavItem isActive={ !!match }>\n            <Link to={ props.to }>\n                { props.children }\n            </Link>\n        </NavItem>\n    );\n};\n\nexport interface NavigationProps {\n    bundles: ReadonlyArray<Bundle>;\n}\n\nexport const Navigation: React.FunctionComponent<NavigationProps> = props => {\n    return (\n        <Nav>\n            <NavList>\n                <NavGroup title=\"Bundles\">\n                    { props.bundles.map(b => (\n                        <NavExpandable key={ b.id } title={ b.displayName }>\n                            { b.applications.map(a => (\n                                <EnhancedNavItem key={ a.id } to={ linkTo.application(a.id) }>{ a.displayName }</EnhancedNavItem>\n                            )) }\n                        </NavExpandable>\n                    )) }\n                </NavGroup>\n                <NavItemSeparator />\n                <EnhancedNavItem to={ linkTo.email() }>\n                    Email templates\n                </EnhancedNavItem>\n                <EnhancedNavItem to={ linkTo.aggregation() }>\n                    Aggregation\n                </EnhancedNavItem>\n            </NavList>\n        </Nav>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/redhat-logo.f7405300.svg\";","import '@patternfly/react-core/dist/styles/base.css';\nimport './app.css';\n\nimport { Brand, Page, PageHeader, PageSection, PageSidebar, Spinner } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { Routes } from '../Routes';\nimport { useBundles } from '../services/GetBundles';\nimport { Navigation } from './Navigation';\nimport logo from './redhat-logo.svg';\n\nexport const App: React.FunctionComponent<unknown> = () => {\n\n    const [ isNavOpen, setNavOpen ] = React.useState(true);\n\n    const onNavToggle = React.useCallback(() => setNavOpen(prev => !prev), [ setNavOpen ]);\n\n    const bundles = useBundles();\n\n    const appHeader = <PageHeader\n        showNavToggle\n        logo={ <Brand width=\"150px\" src={ logo } alt=\"Red Hat\" /> }\n        logoProps={ { href: '/internal' } }\n        isNavOpen={ isNavOpen }\n        onNavToggle={ onNavToggle }\n    />;\n\n    if (bundles.isLoading) {\n        return (\n            <Page\n                header={ appHeader }\n            >\n                <PageSection>\n                    <Spinner />\n                </PageSection>\n            </Page>\n        );\n    }\n\n    const appSidebar = <PageSidebar nav={ <Navigation bundles={ bundles.bundles } /> } isNavOpen={ isNavOpen } />;\n\n    return (\n        <Page\n            sidebar={ appSidebar }\n            header={ appHeader }>\n            <Routes />\n        </Page>\n    );\n};\n","import produce from 'immer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useClient } from 'react-fetching-library';\nimport { useUnmountPromise } from 'react-use';\n\nimport { Operations } from '../generated/OpenapiInternal';\nimport { Bundle } from '../types/Notifications';\n\nexport const useBundles = () => {\n    const client = useClient();\n    const mounted = useUnmountPromise();\n\n    const [ bundles, setBundles ] = useState<ReadonlyArray<Bundle>>([]);\n\n    const [ isLoading, setLoading ] = useState<boolean>();\n\n    const query = useCallback(async () => {\n        const cQuery = client.query;\n        setLoading(true);\n\n        const bundleResponse = await cQuery(Operations.InternalServiceGetBundles.actionCreator());\n\n        if (bundleResponse.payload?.status === 200) {\n\n            const bundles: ReadonlyArray<Bundle> = bundleResponse.payload.value.map(bundleResponse => ({\n                id: bundleResponse.id ?? '',\n                displayName: bundleResponse.display_name,\n                applications: []\n            }));\n\n            const applicationsPromises = [];\n            for (const bundle of bundleResponse.payload.value) {\n                if (bundle.id) {\n                    applicationsPromises.push(cQuery(Operations.InternalServiceGetApplications.actionCreator({\n                        bundleId: bundle.id\n                    })));\n                }\n            }\n\n            const applicationResponses = await Promise.all(applicationsPromises);\n\n            const reducedBundles = applicationResponses.map(r => r.payload).reduce((bundles, applications) => produce(bundles, draftBundles => {\n                if (applications?.status === 200) {\n                    const draftBundle = draftBundles.find(b => applications.value.length > 0 && b.id === applications.value[0].bundle_id);\n                    if (draftBundle) {\n                        draftBundle.applications = applications.value.map(a => ({\n                            id: a.id ?? '',\n                            displayName: a.display_name,\n                            bundleId: a.bundle_id\n                        }));\n                    }\n                }\n            }), bundles);\n\n            (await mounted(Promise.resolve(() => setBundles((reducedBundles)))))();\n        }\n\n        setLoading(false);\n    }, [ client.query, mounted ]);\n\n    useEffect(() => {\n        query();\n    }, [ query ]);\n\n    return {\n        bundles,\n        isLoading\n    };\n};\n","import '@patternfly/react-core/dist/styles/base.css';\n\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ClientContextProvider, createClient } from 'react-fetching-library';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app/App';\n\nconst client = createClient({\n    responseInterceptors: [ validateSchemaResponseInterceptor ]\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <ClientContextProvider client={ client }>\n                <App />\n            </ClientContextProvider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}