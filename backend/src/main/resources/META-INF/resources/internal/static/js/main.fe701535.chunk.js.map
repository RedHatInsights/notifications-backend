{"version":3,"sources":["generated/OpenapiInternal.ts","pages/AggregationPage.tsx","app/PermissionContext.ts","services/EventTypes/GetApplication.ts","services/EventTypes/GetEventTypes.ts","components/EventTypes/ListEventTypes.tsx","components/EmailTemplates/ViewEmailTemplateModal.tsx","components/EmailTemplates/EmailTemplateTable.tsx","components/EventTypes/CreateEditModal.tsx","components/EventTypes/DeleteModal.tsx","components/Wrappers/LinkAdapter.tsx","components/Wrappers/BreadCrumbLinkItem.tsx","services/EventTypes/CreateEventTypes.ts","services/EventTypes/DeleteEventType.ts","services/EventTypes/GetBundleAction.ts","components/Applications/CreateEditApplicationModal.tsx","components/Applications/DeleteApplicationModal.tsx","services/Applications/CreateApplication.ts","services/Applications/DeleteApplication.ts","services/Applications/GetApplicationById.ts","services/Applications/GetBundleById.ts","pages/EmailTemplatePage.tsx","services/RenderEmailRequest.ts","pages/RenderEmailPage.tsx","Routes.tsx","pages/ApplicationPage.tsx","pages/BundlePage.tsx","app/Navigation.tsx","app/redhat-logo.svg","app/App.tsx","services/EventTypes/GetBundles.ts","services/ServerInfo.ts","services/Permissions.ts","index.tsx"],"names":["aggregationTemplate","trimLeft","PermissionContext","React","isAdmin","applications","roles","refresh","Error","useUserPermissions","permission","useContext","hasPermission","useCallback","appId","undefined","find","a","id","z","application_id","zodSchemaUUID","optional","nullable","role","nonstrict","bundle_id","display_name","name","owner_role","zodSchemaApplication","zodSchemaApplication1","zodSchemaBasicAuthentication","actions","zodSchemaBehaviorGroupAction","bundle","zodSchemaBundle","created","default_behavior","updated","zodSchemaBehaviorGroupActionId","zodSchemaCamelProperties","end_time","start_time","status","zodSchemaStatus","zodSchemaEmailSubscriptionProperties","zodSchemaEndpoint","data","links","meta","zodSchemaMeta","zodSchemaEndpointType","zodSchemaEnvironment","zodSchemaEventLogEntry","zodSchemaEventLogEntryAction","zodSchemaEventType","displayName","zodSchemaHttpType","application_display_name","is_admin","details","endpointId","invocationResult","invocationTime","int","body_template","payload","subject_template","ignore_preferences","only_admins","environment","zodSchemaWebhookProperties","max","password","username","endpoint","behaviorGroupId","basic_authentication","disable_ssl_verification","extras","secret_token","sub_type","url","group_id","description","enabled","properties","type","application","event_type","endpoint_id","endpoint_sub_type","endpoint_type","invocation_result","count","method","Schemas","InternalServiceHttpRoot","actionBuilder","queryParams","config","rules","ValidateRule","__Empty","build","Response200","InternalApplicationUserPermission","InternalPermissionServiceGetAccessList","InternalPermissionServiceAddAccess","params","body","InternalRoleAccess","InternalPermissionServiceGetPermissions","InternalUserPermissions","InternalPermissionServiceDeleteAccess","path","replace","internalRoleAccessId","toString","AdminServiceDebugRbac","query","rhid","AdminServiceSetAdminDown","InternalServiceCreateApplication","Application","InternalServiceGetApplication","InternalServiceUpdateApplication","InternalServiceDeleteApplication","EventType","InternalServiceGetEventTypes","BehaviorGroup","InternalServiceGetDefaultBehaviorGroups","InternalServiceCreateDefaultBehaviorGroup","RequestDefaultBehaviorGroupPropertyList","InternalServiceUpdateDefaultBehaviorGroupActions","eventTypeId","InternalServiceLinkDefaultBehaviorToEventType","InternalServiceUnlinkDefaultBehaviorToEventType","InternalServiceUpdateDefaultBehaviorGroup","InternalServiceDeleteDefaultBehaviorGroup","Bundle","InternalServiceGetBundles","InternalServiceCreateBundle","InternalServiceGetBundle","bundleId","InternalServiceUpdateBundle","InternalServiceDeleteBundle","InternalServiceGetApplications","InternalServiceCreateEventType","InternalServiceUpdateEventType","InternalServiceDeleteEventType","InternalServiceGetServerInfo","ServerInfo","InternalServiceSetCurrentStatus","TemplateEngineClient$$cdiWrapperRender","EmailSubscriptionType","applicationName","bundleName","subscriptionType","TemplateEngineClient$$cdiWrapperIsSubscriptionTypeSupported","subject","Response400","message","InternalServiceRenderEmailTemplate","ValidationEndpointValidate","eventType","InternalServiceGetVersion","Operations","validateResponse","validationResponseTransformer","applicationTypes","value","validatedResponse","errors","useApplicationTypes","applicationId","useQuery","actionCreator","queryPayload","useMemo","eventTypes","map","useEventTypes","ListEventTypes","props","getEventTypes","loading","Spinner","errorObject","ChipGroup","length","e","Chip","isReadOnly","ViewTemplateModal","Fragment","Modal","variant","ModalVariant","medium","title","isOpen","showModal","onClose","Form","isHorizontal","ActionGroup","Button","onClick","EmailTemplateTable","useParams","applicationTypesQuery","showViewModal","setShowViewModal","viewModal","PageSection","Title","headingLevel","Breadcrumb","BreadcrumbItem","target","TableComposable","aria-label","Thead","Toolbar","ToolbarContent","ToolbarItem","isDisabled","component","to","linkTo","emailTemplates","Tr","column","columnIndex","Th","Tbody","r","Td","className","CreateEditModal","useState","initialEventType","setEventType","handleChange","event","prev","onSubmitLocal","onSubmit","useEffect","isEdit","FormGroup","label","fieldId","isRequired","helperText","HelperText","HelperTextItem","hasIcon","TextInput","onChange","TextArea","isLoading","DeleteModal","setErrors","onDelete","onDeleteImpl","alert","small","titleIconVariant","eventTypeName","LinkAdapter","href","restProps","children","BreadcrumbLinkItem","deleteEventTypeActionCreator","getBundleAction","CreateEditApplicationModal","permissions","initialApplication","setApplication","ownerRole","FormSelect","FormSelectOption","DeleteApplicationModal","deleteApplicationActionCreator","bundleTypes","defaultSubjectTemplate","defaultBodyTemplate","defaultPayload","JSON","stringify","timestamp","account_id","context","events","metadata","RenderedTemplate","succeeded","StackItem","width","srcDoc","error","aggregation","email","pathRoutes","onEditorDidMount","editor","monaco","layout","focus","getModels","updateOptions","tabSize","_value","controls","CodeEditorControl","icon","toolTipText","console","log","isVisible","CodeEditor","isDownloadEnabled","isUploadEnabled","customControls","isLineNumbersVisible","isLanguageLabelVisible","isMinimapVisible","language","Language","javascript","code","height","eventTypesQuery","deleteEventTypeMutation","useMutation","newEvent","setEventTypes","setShowModal","setIsEdit","showDeleteModal","setShowDeleteModal","getBundleId","bundleNameQuery","useParameterizedQuery","handleSubmit","mutate","then","handleDelete","deleteEventType","isActive","editEventType","deleteEventTypeModal","getBundles","useBundleTypes","getApplications","useApplications","newApplication","deleteApplicationMutation","deleteApplication","editApplication","deleteApplicationModal","renderedProps","emailTemplate","subjectTemplate","setSubjectTemplate","bodyTemplate","setBodyTemplate","setPayload","onRender","Split","SplitItem","isFilled","Stack","json","handleBackClick","history","back","hasGutter","Routes","_props","pathRoute","EnhancedNavItem","match","useRouteMatch","exact","NavItem","Navigation","Nav","NavList","NavExpandable","bundles","b","App","isNavOpen","setNavOpen","onNavToggle","client","useClient","mounted","useUnmountPromise","setBundles","setLoading","cQuery","bundleResponse","applicationsPromises","push","Promise","all","applicationResponses","reducedBundles","reduce","produce","draftBundles","draftBundle","resolve","useBundles","serverInfo","show","content","permissionQuery","appHeader","PageHeader","showNavToggle","logo","Brand","src","alt","logoProps","Page","header","appSidebar","PageSidebar","nav","Provider","sidebar","Alert","AlertVariant","warning","createClient","responseInterceptors","validateSchemaResponseInterceptor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe701535.chunk.js","sourcesContent":["/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const AddAccessRequest = zodSchemaAddAccessRequest();\n  export type AddAccessRequest = {\n    application_id?: UUID | undefined | null;\n    role?: string | undefined | null;\n  };\n\n  export const AddApplicationRequest = zodSchemaAddApplicationRequest();\n  export type AddApplicationRequest = {\n    bundle_id: UUID;\n    display_name: string;\n    name: string;\n    owner_role?: string | undefined | null;\n  };\n\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const Application1 = zodSchemaApplication1();\n  export type Application1 = {\n    display_name: string;\n    id: UUID;\n  };\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const BehaviorGroup = zodSchemaBehaviorGroup();\n  export type BehaviorGroup = {\n    actions?: Array<BehaviorGroupAction> | undefined | null;\n    bundle?: Bundle | undefined | null;\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    default_behavior?: boolean | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    updated?: string | undefined | null;\n  };\n\n  export const BehaviorGroupAction = zodSchemaBehaviorGroupAction();\n  export type BehaviorGroupAction = {\n    created?: string | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    id?: BehaviorGroupActionId | undefined | null;\n  };\n\n  export const BehaviorGroupActionId = zodSchemaBehaviorGroupActionId();\n  export type BehaviorGroupActionId = {\n    behaviorGroupId: UUID;\n    endpointId: UUID;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const CamelProperties = zodSchemaCamelProperties();\n  export type CamelProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    extras?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    secret_token?: string | undefined | null;\n    sub_type?: string | undefined | null;\n    url: string;\n  };\n\n  export const CurrentStatus = zodSchemaCurrentStatus();\n  export type CurrentStatus = {\n    end_time?: string | undefined | null;\n    start_time?: string | undefined | null;\n    status: Status;\n  };\n\n  export const EmailSubscriptionProperties =\n    zodSchemaEmailSubscriptionProperties();\n  export type EmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'INSTANT' | 'DAILY';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookProperties | EmailSubscriptionProperties | CamelProperties)\n      | undefined\n      | null;\n    sub_type?: string | undefined | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointProperties = zodSchemaEndpointProperties();\n  export type EndpointProperties = unknown;\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType =\n    | 'webhook'\n    | 'email_subscription'\n    | 'default'\n    | 'camel';\n\n  export const Environment = zodSchemaEnvironment();\n  export type Environment = 'PROD' | 'STAGE' | 'EPHEMERAL' | 'LOCAL_SERVER';\n\n  export const EventLogEntry = zodSchemaEventLogEntry();\n  export type EventLogEntry = {\n    actions: Array<EventLogEntryAction>;\n    application: string;\n    bundle: string;\n    created: string;\n    event_type: string;\n    id: UUID;\n    payload?: string | undefined | null;\n  };\n\n  export const EventLogEntryAction = zodSchemaEventLogEntryAction();\n  export type EventLogEntryAction = {\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpoint_id?: UUID | undefined | null;\n    endpoint_sub_type?: string | undefined | null;\n    endpoint_type: EndpointType;\n    id: UUID;\n    invocation_result: boolean;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    application_id: UUID;\n    description?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const InternalApplicationUserPermission =\n    zodSchemaInternalApplicationUserPermission();\n  export type InternalApplicationUserPermission = {\n    application_display_name: string;\n    application_id: UUID;\n    role: string;\n  };\n\n  export const InternalRoleAccess = zodSchemaInternalRoleAccess();\n  export type InternalRoleAccess = {\n    application_id: UUID;\n    id?: UUID | undefined | null;\n    role: string;\n  };\n\n  export const InternalUserPermissions = zodSchemaInternalUserPermissions();\n  export type InternalUserPermissions = {\n    applications: Array<Application1>;\n    is_admin: boolean;\n    roles: Array<string>;\n  };\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    id?: UUID | undefined | null;\n    invocationResult: boolean;\n    invocationTime: number;\n  };\n\n  export const PageEventLogEntry = zodSchemaPageEventLogEntry();\n  export type PageEventLogEntry = {\n    data: Array<EventLogEntry>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const PageEventType = zodSchemaPageEventType();\n  export type PageEventType = {\n    data: Array<EventType>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const RbacRaw = zodSchemaRbacRaw();\n  export type RbacRaw = {\n    data?:\n      | Array<{\n          [x: string]: unknown;\n        }>\n      | undefined\n      | null;\n    links?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    meta?:\n      | {\n          [x: string]: number;\n        }\n      | undefined\n      | null;\n  };\n\n  export const RenderEmailTemplateRequest =\n    zodSchemaRenderEmailTemplateRequest();\n  export type RenderEmailTemplateRequest = {\n    body_template: string;\n    payload: string;\n    subject_template: string;\n  };\n\n  export const RequestDefaultBehaviorGroupPropertyList =\n    zodSchemaRequestDefaultBehaviorGroupPropertyList();\n  export type RequestDefaultBehaviorGroupPropertyList = {\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const RequestEmailSubscriptionProperties =\n    zodSchemaRequestEmailSubscriptionProperties();\n  export type RequestEmailSubscriptionProperties = {\n    only_admins: boolean;\n  };\n\n  export const ServerInfo = zodSchemaServerInfo();\n  export type ServerInfo = {\n    environment?: Environment | undefined | null;\n  };\n\n  export const Status = zodSchemaStatus();\n  export type Status = 'UP' | 'MAINTENANCE';\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const WebhookProperties = zodSchemaWebhookProperties();\n  export type WebhookProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  export const __Empty = zodSchema__Empty();\n  export type __Empty = string | undefined;\n\n  function zodSchemaAddAccessRequest() {\n      return z\n      .object({\n          application_id: zodSchemaUUID().optional().nullable(),\n          role: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAddApplicationRequest() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          display_name: z.string(),\n          name: z.string(),\n          owner_role: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplication1() {\n      return z\n      .object({\n          display_name: z.string(),\n          id: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroup() {\n      return z\n      .object({\n          actions: z.array(zodSchemaBehaviorGroupAction()).optional().nullable(),\n          bundle: zodSchemaBundle().optional().nullable(),\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          default_behavior: z.boolean().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupAction() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          id: zodSchemaBehaviorGroupActionId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupActionId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          endpointId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCamelProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          extras: z.record(z.string()).optional().nullable(),\n          secret_token: z.string().optional().nullable(),\n          sub_type: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCurrentStatus() {\n      return z\n      .object({\n          end_time: z.string().optional().nullable(),\n          start_time: z.string().optional().nullable(),\n          status: zodSchemaStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'INSTANT', 'DAILY' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookProperties(),\n              zodSchemaEmailSubscriptionProperties(),\n              zodSchemaCamelProperties()\n          ])\n          .optional()\n          .nullable(),\n          sub_type: z.string().optional().nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default', 'camel' ]);\n  }\n\n  function zodSchemaEnvironment() {\n      return z.enum([ 'PROD', 'STAGE', 'EPHEMERAL', 'LOCAL_SERVER' ]);\n  }\n\n  function zodSchemaEventLogEntry() {\n      return z\n      .object({\n          actions: z.array(zodSchemaEventLogEntryAction()),\n          application: z.string(),\n          bundle: z.string(),\n          created: z.string(),\n          event_type: z.string(),\n          id: zodSchemaUUID(),\n          payload: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventLogEntryAction() {\n      return z\n      .object({\n          details: z.record(z.unknown()).optional().nullable(),\n          endpoint_id: zodSchemaUUID().optional().nullable(),\n          endpoint_sub_type: z.string().optional().nullable(),\n          endpoint_type: zodSchemaEndpointType(),\n          id: zodSchemaUUID(),\n          invocation_result: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          application_id: zodSchemaUUID(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaInternalApplicationUserPermission() {\n      return z\n      .object({\n          application_display_name: z.string(),\n          application_id: zodSchemaUUID(),\n          role: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalRoleAccess() {\n      return z\n      .object({\n          application_id: zodSchemaUUID(),\n          id: zodSchemaUUID().optional().nullable(),\n          role: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalUserPermissions() {\n      return z\n      .object({\n          applications: z.array(zodSchemaApplication1()),\n          is_admin: z.boolean(),\n          roles: z.array(z.string())\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          invocationResult: z.boolean(),\n          invocationTime: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventLogEntry() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventLogEntry()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventType() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventType()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRbacRaw() {\n      return z\n      .object({\n          data: z.array(z.record(z.unknown())).optional().nullable(),\n          links: z.record(z.string()).optional().nullable(),\n          meta: z.record(z.number().int()).optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRenderEmailTemplateRequest() {\n      return z\n      .object({\n          body_template: z.string(),\n          payload: z.string(),\n          subject_template: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestDefaultBehaviorGroupPropertyList() {\n      return z\n      .object({\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestEmailSubscriptionProperties() {\n      return z\n      .object({\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaServerInfo() {\n      return z\n      .object({\n          environment: zodSchemaEnvironment().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatus() {\n      return z.enum([ 'UP', 'MAINTENANCE' ]);\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaWebhookProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchema__Empty() {\n      return z.string().max(0).optional();\n  }\n}\n\nexport namespace Operations {\n  // GET /\n  export namespace InternalServiceHttpRoot {\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /access\n  export namespace InternalPermissionServiceGetAccessList {\n    const Response200 = z.array(Schemas.InternalApplicationUserPermission);\n    type Response200 = Array<Schemas.InternalApplicationUserPermission>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './access';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /access\n  export namespace InternalPermissionServiceAddAccess {\n    export interface Params {\n      body: Schemas.AddAccessRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'InternalRoleAccess', 200, Schemas.InternalRoleAccess>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './access';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InternalRoleAccess,\n                    'InternalRoleAccess',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /access/me\n  export namespace InternalPermissionServiceGetPermissions {\n    export type Payload =\n      | ValidatedResponse<\n          'InternalUserPermissions',\n          200,\n          Schemas.InternalUserPermissions\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './access/me';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InternalUserPermissions,\n                    'InternalUserPermissions',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /access/{internalRoleAccessId}\n  export namespace InternalPermissionServiceDeleteAccess {\n    export interface Params {\n      internalRoleAccessId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './access/{internalRoleAccessId}'.replace(\n            '{internalRoleAccessId}',\n            params.internalRoleAccessId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /admin\n  export namespace AdminServiceDebugRbac {\n    const Rhid = z.string();\n    type Rhid = string;\n    export interface Params {\n      rhid?: Rhid;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './admin';\n        const query = {} as Record<string, any>;\n        if (params.rhid !== undefined) {\n            query.rhid = params.rhid;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /admin/status\n  export namespace AdminServiceSetAdminDown {\n    const Status = z.string();\n    type Status = string;\n    export interface Params {\n      status?: Status;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './admin/status';\n        const query = {} as Record<string, any>;\n        if (params.status !== undefined) {\n            query.status = params.status;\n        }\n\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /applications\n  export namespace InternalServiceCreateApplication {\n    export interface Params {\n      body: Schemas.AddApplicationRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Application', 200, Schemas.Application>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Application, 'Application', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /applications/{appId}\n  export namespace InternalServiceGetApplication {\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Application', 200, Schemas.Application>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Application, 'Application', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /applications/{appId}\n  export namespace InternalServiceUpdateApplication {\n    export interface Params {\n      appId: Schemas.UUID;\n      body: Schemas.Application;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /applications/{appId}\n  export namespace InternalServiceDeleteApplication {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /applications/{appId}/eventTypes\n  export namespace InternalServiceGetEventTypes {\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}/eventTypes'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /behaviorGroups/default\n  export namespace InternalServiceGetDefaultBehaviorGroups {\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './behaviorGroups/default';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /behaviorGroups/default\n  export namespace InternalServiceCreateDefaultBehaviorGroup {\n    export interface Params {\n      body: Schemas.BehaviorGroup;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'BehaviorGroup', 200, Schemas.BehaviorGroup>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.BehaviorGroup, 'BehaviorGroup', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /behaviorGroups/default/{behaviorGroupId}/actions\n  // Update the list of actions of a default behavior group.\n  export namespace InternalServiceUpdateDefaultBehaviorGroupActions {\n    const Body = z.array(Schemas.RequestDefaultBehaviorGroupPropertyList);\n    type Body = Array<Schemas.RequestDefaultBehaviorGroupPropertyList>;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default/{behaviorGroupId}/actions'.replace(\n            '{behaviorGroupId}',\n            params.behaviorGroupId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}\n  // Links the default behavior group to the event type.\n  export namespace InternalServiceLinkDefaultBehaviorToEventType {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        './behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}'\n        .replace('{behaviorGroupId}', params.behaviorGroupId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}\n  // Unlinks the default behavior group from the event type.\n  export namespace InternalServiceUnlinkDefaultBehaviorToEventType {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        './behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}'\n        .replace('{behaviorGroupId}', params.behaviorGroupId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /behaviorGroups/default/{id}\n  // Update a default behavior group.\n  export namespace InternalServiceUpdateDefaultBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      id: Schemas.UUID;\n      body: Schemas.BehaviorGroup;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /behaviorGroups/default/{id}\n  // Deletes a default behavior group.\n  export namespace InternalServiceDeleteDefaultBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles\n  export namespace InternalServiceGetBundles {\n    const Response200 = z.array(Schemas.Bundle);\n    type Response200 = Array<Schemas.Bundle>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /bundles\n  export namespace InternalServiceCreateBundle {\n    export interface Params {\n      body: Schemas.Bundle;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Bundle', 200, Schemas.Bundle>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Bundle, 'Bundle', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles/{bundleId}\n  export namespace InternalServiceGetBundle {\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Bundle', 200, Schemas.Bundle>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Bundle, 'Bundle', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /bundles/{bundleId}\n  export namespace InternalServiceUpdateBundle {\n    export interface Params {\n      bundleId: Schemas.UUID;\n      body: Schemas.Bundle;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /bundles/{bundleId}\n  export namespace InternalServiceDeleteBundle {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles/{bundleId}/applications\n  export namespace InternalServiceGetApplications {\n    const Response200 = z.array(Schemas.Application);\n    type Response200 = Array<Schemas.Application>;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}/applications'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /eventTypes\n  export namespace InternalServiceCreateEventType {\n    export interface Params {\n      body: Schemas.EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'EventType', 200, Schemas.EventType>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.EventType, 'EventType', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /eventTypes/{eventTypeId}\n  export namespace InternalServiceUpdateEventType {\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      body: Schemas.EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /eventTypes/{eventTypeId}\n  export namespace InternalServiceDeleteEventType {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /serverInfo\n  export namespace InternalServiceGetServerInfo {\n    export type Payload =\n      | ValidatedResponse<'ServerInfo', 200, Schemas.ServerInfo>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './serverInfo';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.ServerInfo, 'ServerInfo', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /status\n  export namespace InternalServiceSetCurrentStatus {\n    export interface Params {\n      body: Schemas.CurrentStatus;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './status';\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /template-engine/render\n  export namespace TemplateEngineClient$$cdiWrapperRender {\n    export interface Params {\n      body: Schemas.RenderEmailTemplateRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './template-engine/render';\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /template-engine/subscription_type_supported\n  export namespace TemplateEngineClient$$cdiWrapperIsSubscriptionTypeSupported {\n    const ApplicationName = z.string();\n    type ApplicationName = string;\n    const BundleName = z.string();\n    type BundleName = string;\n    const SubscriptionType = Schemas.EmailSubscriptionType;\n    type SubscriptionType = Schemas.EmailSubscriptionType;\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      applicationName: ApplicationName;\n      bundleName: BundleName;\n      subscriptionType: SubscriptionType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './template-engine/subscription_type_supported';\n        const query = {} as Record<string, any>;\n        if (params.applicationName !== undefined) {\n            query.applicationName = params.applicationName;\n        }\n\n        if (params.bundleName !== undefined) {\n            query.bundleName = params.bundleName;\n        }\n\n        if (params.subscriptionType !== undefined) {\n            query.subscriptionType = params.subscriptionType;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /templates/email/render\n  export namespace InternalServiceRenderEmailTemplate {\n    const Response200 = z\n    .object({\n        body: z.string().optional().nullable(),\n        subject: z.string().optional().nullable()\n    })\n    .nonstrict();\n    type Response200 = {\n      body?: string | undefined | null;\n      subject?: string | undefined | null;\n    };\n    const Response400 = z\n    .object({\n        message: z.string().optional().nullable()\n    })\n    .nonstrict();\n    type Response400 = {\n      message?: string | undefined | null;\n    };\n    export interface Params {\n      body: Schemas.RenderEmailTemplateRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', 400, Response400>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/render';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Response400, 'unknown', 400),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /validation/baet\n  export namespace ValidationEndpointValidate {\n    const Application = z.string();\n    type Application = string;\n    const Bundle = z.string();\n    type Bundle = string;\n    const EventType = z.string();\n    type EventType = string;\n    export interface Params {\n      application?: Application;\n      bundle?: Bundle;\n      eventType?: EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './validation/baet';\n        const query = {} as Record<string, any>;\n        if (params.application !== undefined) {\n            query.application = params.application;\n        }\n\n        if (params.bundle !== undefined) {\n            query.bundle = params.bundle;\n        }\n\n        if (params.eventType !== undefined) {\n            query.eventType = params.eventType;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /version\n  export namespace InternalServiceGetVersion {\n    const Response200 = z.string();\n    type Response200 = string;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './version';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n}\n","import '@patternfly/react-core/dist/styles/base.css';\n\nimport { CodeEditor, CodeEditorControl, Language } from '@patternfly/react-code-editor';\nimport { PageSection, Title } from '@patternfly/react-core';\nimport { PlayIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\nimport { useMemo } from 'react';\n\nconst aggregationTemplate = `\n// Here we can initialize the value of the Aggregation result.\nconst result = {\n};\n\n// This function will be called by every action that was sent to notification server\n// to update the result with its values.\nconst aggregate = (action) => {\n\n    return result;\n};\n`.trimLeft();\n\nexport const AggregationPage: React.FunctionComponent<unknown> = () => {\n\n    const onEditorDidMount = React.useCallback((editor, monaco) => {\n        editor.layout();\n        editor.focus();\n        monaco.editor.getModels()[0].updateOptions({ tabSize: 5 });\n    }, []);\n\n    const onChange = React.useCallback((_value) => {\n        // does not do anything yet\n    }, []);\n\n    const controls = useMemo(() => [\n        <CodeEditorControl\n            key=\"test\"\n            icon={ <PlayIcon /> }\n            toolTipText=\"Test aggregation\"\n            onClick={ () => console.log('testing') }\n            isVisible={ true }\n        />\n    ], []);\n\n    return <>\n        <PageSection>\n            <Title headingLevel=\"h1\">Aggregation templates</Title>\n        </PageSection>\n        <PageSection>\n            <CodeEditor\n                isDownloadEnabled\n                isUploadEnabled\n                customControls={ controls }\n                isLineNumbersVisible\n                isLanguageLabelVisible\n                isMinimapVisible={ false }\n                language={ Language.javascript }\n                onEditorDidMount={ onEditorDidMount }\n                onChange={ onChange }\n                code={ aggregationTemplate }\n                height=\"300px\"\n            />\n        </PageSection>\n    </>;\n};\n","import * as React from 'react';\nimport { useCallback, useContext } from 'react';\n\nimport { Schemas } from '../generated/OpenapiInternal';\n\nexport interface PermissionContext {\n    isAdmin: boolean;\n    applications: ReadonlyArray<{\n        id: string;\n        displayName: string;\n    }>;\n    roles: ReadonlyArray<string>;\n    refresh: () => void;\n}\n\nexport const PermissionContext = React.createContext<PermissionContext>({\n    isAdmin: false,\n    applications: [],\n    roles: [],\n    refresh: () => {\n        throw new Error('Invalid use of refresh');\n    }\n});\n\nexport const useUserPermissions = () => {\n    const permission = useContext(PermissionContext);\n\n    const hasPermission = useCallback((appId: Schemas.UUID) => {\n        if (permission.isAdmin) {\n            return true;\n        }\n\n        return permission.applications.find(a => a.id === appId) !== undefined;\n    }, [ permission ]);\n\n    return {\n        ...permission,\n        hasPermission\n    };\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Application } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalServiceGetApplication.Payload) => {\n        if (payload.status === 200) {\n            const applicationTypes: Application = {\n                id: payload.value.id ?? '',\n                displayName: payload.value.display_name,\n                name: payload.value.name,\n                bundleId: payload.value.bundle_id };\n\n            return validatedResponse(\n                'Application',\n                200,\n                applicationTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useApplicationTypes = (applicationId: string) => {\n    const query = useQuery(Operations.InternalServiceGetApplication.actionCreator({\n        appId: applicationId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { EventType } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalServiceGetEventTypes.Payload) => {\n        if (payload.status === 200) {\n            const eventTypes: ReadonlyArray<EventType> = payload.value.map(value => ({\n                id: value.id ?? '',\n                name: value.name,\n                displayName: value.display_name,\n                description: value.description ?? '',\n                applicationId: value.application_id\n            }));\n\n            return validatedResponse(\n                'EventTypes',\n                200,\n                eventTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useEventTypes = (applicationId: string) => {\n    const query = useQuery(Operations.InternalServiceGetEventTypes.actionCreator({\n        appId: applicationId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { Chip, ChipGroup, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { useEventTypes } from '../../services/EventTypes/GetEventTypes';\n\ntype EventTypeListProps = {\n    appId: string;\n}\n\nexport const ListEventTypes: React.FunctionComponent<EventTypeListProps> = (props) => {\n    const getEventTypes = useEventTypes(props.appId);\n\n    if (getEventTypes.loading) {\n        return <Spinner />;\n    }\n\n    if (getEventTypes.payload?.status !== 200) {\n        return <span>Error while loading eventtypes: {getEventTypes.errorObject.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <ChipGroup>\n                { getEventTypes.payload.value.length === 0 ? 'No event types' : '' }\n            </ChipGroup>\n            <ChipGroup>\n                { getEventTypes.payload.value.map(e => (\n                    <Chip isReadOnly key={ e.id }>{ e.displayName}</Chip>\n                ))}\n            </ChipGroup>\n        </React.Fragment>\n    );\n};\n","import { ActionGroup, Button, Form, Modal, ModalVariant } from '@patternfly/react-core';\nimport React from 'react';\n\ninterface ViewTemplateModalProps {\n    showModal: boolean;\n    applicationName: string;\n    onClose: () => void;\n}\n\nexport const ViewTemplateModal: React.FunctionComponent<ViewTemplateModalProps> = (props) => {\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant={ ModalVariant.medium }\n                title={ ` Email Template for ${ props.applicationName }` }\n                isOpen={ props.showModal }\n                onClose={ props.onClose }\n            ><Form isHorizontal>\n                    Viewing modal for existing templates\n                    <ActionGroup>\n                        <Button variant='primary' type='reset'\n                            onClick={ props.onClose }>Close</Button>\n                    </ActionGroup>\n                </Form>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\n","import { Breadcrumb, BreadcrumbItem, Button, PageSection, Title, Toolbar,\n    ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { EyeIcon, PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport {\n    TableComposable,\n    Tbody,\n    Td,  Th,   Thead,\n    Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nimport { useUserPermissions } from '../../app/PermissionContext';\nimport { linkTo } from '../../Routes';\nimport { useApplicationTypes } from '../../services/EventTypes/GetApplication';\nimport { ListEventTypes } from '../EventTypes/ListEventTypes';\nimport { ViewTemplateModal } from './ViewEmailTemplateModal';\n\ntype ApplicationPageParams = {\n    applicationId: string;\n}\n\nexport const EmailTemplateTable: React.FunctionComponent = () => {\n    const { hasPermission } = useUserPermissions();\n\n    const { applicationId } = useParams<ApplicationPageParams>();\n    const applicationTypesQuery = useApplicationTypes(applicationId);\n\n    const [ showViewModal, setShowViewModal ] = React.useState(false);\n    const viewModal = () => {\n        setShowViewModal(true);\n    };\n\n    const onClose = () => {\n        setShowViewModal(false);\n    };\n\n    const application = React.useMemo(() => {\n        if (applicationTypesQuery.payload?.status === 200) {\n            return applicationTypesQuery.payload.value;\n        }\n\n        return undefined;\n    }, [ applicationTypesQuery.payload?.status, applicationTypesQuery.payload?.value ]);\n\n    const columns = [ 'Email Template', 'Event Types' ];\n    const rows = [\n        {\n            displayName: 'email template 1',\n            id: '1',\n            eventType: 'event Type 1'\n        },\n        {\n            displayName: 'email template 2',\n            id: '2',\n            eventType: 'event Type 2'\n\n        },\n        {\n            displayName: 'email template 3',\n            id: '3',\n            eventType: 'event Type 3'\n\n        },\n        {\n            displayName: 'email template 4',\n            id: '4',\n            eventType: 'event Type 4'\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel=\"h1\">\n                    <Breadcrumb>\n                        <BreadcrumbItem target='#'> Email Template for { application?.displayName ?? '' }</BreadcrumbItem>\n                    </Breadcrumb></Title>\n                <TableComposable aria-label=\"Email Template table\">\n                    <Thead>\n                        <Toolbar>\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <Button variant=\"primary\" isDisabled={ !application || !hasPermission(application?.id) }\n                                        component={ (props: any) =>\n                                            <Link { ...props } to={ linkTo.emailTemplates } /> }>Create Email Template</Button>\n                                    <ViewTemplateModal\n                                        showModal={ showViewModal }\n                                        applicationName={ application?.displayName ?? '' }\n                                        onClose={ onClose }\n                                    />\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Tr>\n                            {columns.map((column, columnIndex) => (\n                                <Th key={ columnIndex }>{column}</Th>\n                            ))}\n                        </Tr>\n                    </Thead>\n                    <Tbody>\n                        { rows.map(r => (\n                            <Tr key={ r.id }>\n                                <Td>{r.displayName}</Td>\n                                <Td>\n                                    <ListEventTypes\n                                        appId={ application?.id ?? '' }\n                                    />\n                                </Td>\n                                <Td>\n                                    <Button className='view' type='button' variant='plain' onClick={ viewModal }\n                                    > { <EyeIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='edit' type='button' variant='plain'\n                                        isDisabled> { <PencilAltIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='delete' type='button' variant='plain'\n                                        isDisabled>{ <TrashIcon /> } </Button></Td>\n                            </Tr>\n\n                        ))}\n                    </Tbody>\n                </TableComposable>\n            </PageSection>\n        </React.Fragment>\n\n    );\n};\n\n","import { ActionGroup, Button, Form, FormGroup, HelperText, HelperTextItem, Modal, ModalVariant, TextArea, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { EventType } from '../../types/Notifications';\n\ninterface CreateEditModalProps {\n    isEdit: boolean;\n    showModal: boolean;\n    applicationName?: string;\n    initialEventType?: Partial<EventType>;\n    isLoading: boolean;\n    onClose: () => void;\n    onSubmit: (eventType: Partial<EventType>) => void;\n}\n\nexport const CreateEditModal: React.FunctionComponent<CreateEditModalProps> = (props) => {\n\n    const [ eventType, setEventType ] = React.useState<Partial<EventType>>(props.initialEventType ?? {});\n\n    const handleChange = (value: string, event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>) => {\n        const target = event.target as HTMLInputElement;\n        setEventType(prev => ({ ...prev, [target.name]: target.value }));\n    };\n\n    const onSubmitLocal = React.useCallback(() => {\n        props.onSubmit(eventType);\n    }, [ eventType, props ]);\n\n    React.useEffect(() => {\n        setEventType(props.initialEventType ?? {});\n    }, [ props.initialEventType ]);\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant={ ModalVariant.medium }\n                title={ `${ props.isEdit ? 'Update' : 'Create'} Event Type for ${ props.applicationName }` }\n                isOpen={ props.showModal }\n                onClose={ props.onClose }\n            ><Form isHorizontal>\n                    <FormGroup label='Name' fieldId='name' isRequired\n                        helperText={ props.isEdit ? <HelperText><HelperTextItem variant=\"warning\" hasIcon>\n                                                    If this field is modified it may affect exisiting behavior.\n                        </HelperTextItem></HelperText> : 'This is a short name, only composed of a-z 0-9 and - characters.' }>\n                        <TextInput\n                            type='text'\n                            value={ eventType.name }\n                            onChange={ handleChange }\n                            id='name'\n                            name=\"name\"\n                        /></FormGroup>\n                    <FormGroup label='Display name' fieldId='display-name' isRequired\n                        helperText='This is the name you want to display on the UI'>\n                        <TextInput\n                            type='text'\n                            value={ eventType.displayName }\n                            onChange={ handleChange }\n                            id='display-name'\n                            name=\"displayName\"\n                        /></FormGroup>\n                    <FormGroup label='Description' fieldId='description'\n                        helperText='Optional short description that appears in the UI\n                                                to help admin decide how to notify users.'>\n                        <TextArea\n                            type='text'\n                            value={ eventType.description }\n                            onChange={ handleChange }\n                            id='description'\n                            name=\"description\"\n                        /></FormGroup>\n                    <ActionGroup>\n                        <Button variant='primary' type='submit'\n                            isLoading={ props.isLoading } isDisabled={ props.isLoading }\n                            onClick={ onSubmitLocal }>{ props.isEdit ? 'Update' : 'Submit' }</Button>\n                        <Button variant='link' type='reset'\n                            onClick={ props.onClose }>Cancel</Button>\n                    </ActionGroup>\n                </Form>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\n","import { ActionGroup, Button, Modal, ModalVariant, Spinner, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { EventType } from '../../types/Notifications';\n\ninterface DeleteModalProps {\n    eventTypeName?: string;\n    onDelete: (eventType?: EventType) => Promise<boolean>;\n    bundleName?: string;\n    applicationName?: string;\n    isOpen: boolean;\n    onClose: () => void;\n\n}\nexport const DeleteModal: React.FunctionComponent<DeleteModalProps> = (props) => {\n    const [ errors, setErrors ] = React.useState(true);\n\n    const onDelete = React.useCallback(async () => {\n        const onDeleteImpl = props.onDelete;\n        const response = await onDeleteImpl();\n        if (response) {\n            props.onClose();\n        } else {\n            alert('Could not delete event type, please try again.');\n        }\n    }, [ props ]);\n\n    const handleDeleteChange = (value: string, event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        if (target.value !== props.eventTypeName) {\n            return setErrors(true);\n        } else if (target.value === props.eventTypeName) {\n            return setErrors(false);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Modal variant={ ModalVariant.small } titleIconVariant=\"warning\" isOpen={ props.isOpen }\n                onClose={ props.onClose }\n                title={ `Permanently delete ${ props.eventTypeName }` }>\n                { <b>{ props.eventTypeName }</b> } {`from  ${ props.applicationName }/${ props.bundleName ? props.bundleName :\n                    <Spinner /> } will be deleted. \n                        If an application is currently sending this event, it will no longer be processed.`}\n                <br />\n                <br />\n                        Type <b>{ props.eventTypeName }</b> to confirm:\n                <br />\n                <TextInput type='text' onChange={ handleDeleteChange } id='name' name=\"name\" isRequired />\n                <br />\n                <br />\n                <ActionGroup>\n                    <Button variant='danger' type='button' isDisabled = { errors }\n                        onClick={ onDelete }>Delete</Button>\n                    <Button variant='link' type='button' onClick={ props.onClose }>Cancel</Button>\n                </ActionGroup>\n            </Modal>\n        </React.Fragment>\n    );\n};\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\n\ntype LinkAdapterProps = any & {\n    href: string;\n};\n\nexport const LinkAdapter: React.FunctionComponent<LinkAdapterProps> = (props) => {\n    const { href, ...restProps } = props;\n    return (\n        <Link to={ href } { ...restProps }>{ props.children }</Link>\n    );\n};\n","import { BreadcrumbItem, BreadcrumbItemProps } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { LinkAdapter } from './LinkAdapter';\n\ntype BreadcrumbLinkItemProps = Omit<BreadcrumbItemProps, 'component'>\n\nexport const BreadcrumbLinkItem: React.FunctionComponent<BreadcrumbLinkItemProps> = (props) => {\n    return (\n        <BreadcrumbItem\n            { ...props }\n            component={ LinkAdapter }\n        >\n            { props.children }\n        </BreadcrumbItem>\n    );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport type CreateEventType = {\n    id?: string;\n    displayName: string;\n    description: string;\n    applicationId: string;\n    name: string;\n\n}\n\nconst actionCreator =  (params: CreateEventType) => {\n    if (params.id === undefined) {\n        return Operations.InternalServiceCreateEventType.actionCreator({\n            body: {\n                id: params.id,\n                application_id: params.applicationId,\n                description: params.description,\n                display_name: params.displayName,\n                name: params.name\n\n            }\n        });\n    }\n\n    return Operations.InternalServiceUpdateEventType.actionCreator({\n        eventTypeId: params.id,\n        body: {\n            id: params.id,\n            application_id: params.applicationId,\n            description: params.description,\n            display_name: params.displayName,\n            name: params.name\n\n        }\n    });\n};\n\nexport const useCreateEventType = () => {\n    return useMutation(actionCreator);\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport const deleteEventTypeActionCreator = (eventTypeId: string) => {\n    return Operations.InternalServiceDeleteEventType.actionCreator({\n        eventTypeId\n    });\n};\n\nexport const useDeleteEventType = () => useMutation<boolean>(deleteEventTypeActionCreator);\n","import { Operations } from '../../generated/OpenapiInternal';\n\nexport const getBundleAction = (bundleId: string) => {\n    return Operations.InternalServiceGetBundle.actionCreator({\n        bundleId\n    });\n};\n","import {\n    ActionGroup,\n    Button,\n    Form,\n    FormGroup,\n    FormSelect, FormSelectOption,\n    HelperText,\n    HelperTextItem,\n    Modal,\n    ModalVariant,\n    TextInput\n} from '@patternfly/react-core';\nimport React from 'react';\n\nimport { useUserPermissions } from '../../app/PermissionContext';\nimport { Application, RoleOwnedApplication } from '../../types/Notifications';\n\ninterface CreateEditApplicationModalProps {\n    isEdit: boolean;\n    showModal: boolean;\n    applicationName?: string;\n    bundleName?: string;\n    initialApplication?: Partial<Application>;\n    isLoading: boolean;\n    onClose: () => void;\n    onSubmit: (application: Partial<RoleOwnedApplication>) => void;\n}\n\nexport const CreateEditApplicationModal: React.FunctionComponent<CreateEditApplicationModalProps> = (props) => {\n\n    const permissions = useUserPermissions();\n    const [ application, setApplication ] = React.useState<Partial<RoleOwnedApplication>>({\n        ...props.initialApplication\n    });\n\n    const handleChange = (\n        value: string,\n        event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement> | React.FormEvent<HTMLSelectElement>) => {\n        const target = event.target as HTMLInputElement;\n        setApplication(prev => ({ ...prev, [target.name]: target.value }));\n    };\n\n    const onSubmitLocal = React.useCallback(() => {\n        props.onSubmit(application);\n    }, [ application, props ]);\n\n    React.useEffect(() => {\n        if (application.ownerRole === undefined && permissions.roles.length > 0) {\n            setApplication(prev => ({\n                ...prev,\n                ownerRole: permissions.roles[0]\n            }));\n        }\n    }, [ permissions.roles, application.ownerRole ]);\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant={ ModalVariant.medium }\n                title={ `${ props.isEdit ? `Update ${ props.applicationName }` : 'Create Application'} for ${ props.bundleName }` }\n                isOpen={ props.showModal }\n                onClose={ props.onClose }\n            ><Form isHorizontal>\n                    <FormGroup label='Name' fieldId='name' isRequired\n                        helperText={ props.isEdit ? <HelperText><HelperTextItem variant=\"warning\" hasIcon>\n                                                    If this field is modified it may affect exisiting behavior.\n                        </HelperTextItem></HelperText> : 'This is a short name, only composed of a-z 0-9 and - characters.' }>\n                        <TextInput\n                            type='text'\n                            value={ application.name }\n                            onChange={ handleChange }\n                            id='name'\n                            name=\"name\"\n                        /></FormGroup>\n                    <FormGroup label='Display name' fieldId='display-name' isRequired\n                        helperText='This is the name you want to display on the UI'>\n                        <TextInput\n                            type='text'\n                            value={ application.displayName }\n                            onChange={ handleChange }\n                            id='display-name'\n                            name=\"displayName\"\n                        /></FormGroup>\n                    { !props.isEdit && <FormGroup\n                        fieldId=\"role-name\"\n                        label=\"Role admin\"\n                        isRequired\n                        helperText=\"Role of users who will manage the application\"\n                    >\n                        { permissions.isAdmin ? (\n                            <TextInput\n                                type='text'\n                                onChange={ handleChange }\n                                value={ application.ownerRole }\n                                id='owner-role'\n                                name=\"ownerRole\"\n                            />\n                        ) : (\n                            <FormSelect\n                                value={ application.ownerRole }\n                                onChange={ handleChange }\n                                id='owner-role'\n                                name=\"ownerRole\"\n                            >\n                                { permissions.roles.map(r => <FormSelectOption key={ r } label={ r } value={ r } />) }\n                            </FormSelect>\n                        )}\n                    </FormGroup>}\n                    <ActionGroup>\n                        <Button variant='primary' type='submit'\n                            isLoading={ props.isLoading } isDisabled={ props.isLoading }\n                            onClick={ onSubmitLocal }>{ props.isEdit ? 'Update' : 'Submit' }</Button>\n                        <Button variant='link' type='reset'\n                            onClick={ props.onClose }>Cancel</Button>\n                    </ActionGroup>\n                </Form>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\n","import { ActionGroup, Button, Modal, ModalVariant, Spinner, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { EventType } from '../../types/Notifications';\n\ninterface DeleteApplicationModalProps {\n    onDelete: (eventType?: EventType) => Promise<boolean>;\n    bundleName?: string;\n    applicationName?: string;\n    isOpen: boolean;\n    onClose: () => void;\n\n}\nexport const DeleteApplicationModal: React.FunctionComponent<DeleteApplicationModalProps> = (props) => {\n    const [ errors, setErrors ] = React.useState(true);\n\n    const onDelete = React.useCallback(async () => {\n        const onDeleteImpl = props.onDelete;\n        const response = await onDeleteImpl();\n        if (response) {\n            props.onClose();\n        } else {\n            alert('Could not delete application, please try again.');\n        }\n    }, [ props ]);\n\n    const handleDeleteChange = (value: string, event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        if (target.value !== props.applicationName) {\n            return setErrors(true);\n        } else if (target.value === props.applicationName) {\n            return setErrors(false);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Modal variant={ ModalVariant.small } titleIconVariant=\"warning\" isOpen={ props.isOpen }\n                onClose={ props.onClose }\n                title={ `Permanently delete ${ props.applicationName }` }>\n                { <b>{ props.applicationName }</b> } {`from ${ props.bundleName ? props.bundleName :\n                    <Spinner /> } will be deleted. \n                        By deleting this application all associated event types will be deleted and no longer processed. `}\n                <br />\n                <br />\n                        Type <b>{ props.applicationName }</b> to confirm:\n                <br />\n                <TextInput type='text' onChange={ handleDeleteChange } id='name' name=\"name\" isRequired />\n                <br />\n                <br />\n                <ActionGroup>\n                    <Button variant='danger' type='button' isDisabled = { errors }\n                        onClick={ onDelete }>Delete</Button>\n                    <Button variant='link' type='button' onClick={ props.onClose }>Cancel</Button>\n                </ActionGroup>\n            </Modal>\n        </React.Fragment>\n    );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport type CreateApplication = {\n    id?: string;\n    displayName: string;\n    bundleId: string;\n    name: string;\n    ownerRole?: string;\n}\n\nconst actionCreator =  (params: CreateApplication) => {\n    if (params.id === undefined) {\n        return Operations.InternalServiceCreateApplication.actionCreator({\n            body: {\n                bundle_id: params.bundleId,\n                display_name: params.displayName,\n                name: params.name,\n                owner_role: params.ownerRole\n            }\n        });\n    }\n\n    return Operations.InternalServiceUpdateApplication.actionCreator({\n        appId: params.id,\n        body: {\n            id: params.id,\n            bundle_id: params.bundleId,\n            display_name: params.displayName,\n            name: params.name\n        }\n    });\n};\n\nexport const useCreateApplication = () => {\n    return useMutation(actionCreator);\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport const deleteApplicationActionCreator = (appId: string) => {\n    return Operations.InternalServiceDeleteApplication.actionCreator({\n        appId\n    });\n};\n\nexport const useDeleteApplication = () => useMutation<boolean>(deleteApplicationActionCreator);\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Application } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalServiceGetApplications.Payload) => {\n        if (payload.status === 200) {\n            const applications: ReadonlyArray<Application> = payload.value.map(value => ({\n                id: value.id ?? '',\n                displayName: value.display_name,\n                bundleId: value.bundle_id,\n                name: value.name\n            }));\n\n            return validatedResponse(\n                'Applications',\n                200,\n                applications,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useApplications = (bundleId: string) => {\n    const query = useQuery(Operations.InternalServiceGetApplications.actionCreator({\n        bundleId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Bundle } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalServiceGetBundle.Payload) => {\n        if (payload.status === 200) {\n            const bundleTypes: Bundle = {\n                id: payload.value.id ?? '',\n                displayName: payload.value.display_name,\n                applications: []\n            };\n\n            return validatedResponse(\n                'Bundle',\n                200,\n                bundleTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useBundleTypes = (bundleId: string) => {\n    const query = useQuery(Operations.InternalServiceGetBundle.actionCreator({\n        bundleId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { CodeEditor, Language } from '@patternfly/react-code-editor';\nimport {\n    ActionGroup,\n    Button,\n    PageSection,\n    Split,\n    SplitItem,\n    Title\n} from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { useUserPermissions } from '../app/PermissionContext';\n\nconst defaultSubjectTemplate = `\nImportant email to {user.firstName} from MyCoolApp!\n`.trimLeft();\n\nconst defaultBodyTemplate = `\n<div>Hello {user.firstName} {user.lastName},</div>\n<div>We have some important news for you, MyApp has a notification for you</div>\n<div>As a reminder, current user: {user.username}: is active? {user.isActive}; is admin? {user.isAdmin}</div>\n<div>\n    System with name <strong>{action.context.display_name}</strong> (<strong>{action.context.inventory_id}</strong>) \n    did a check in at {action.context.system_check_in.toUtcFormat()}. \n    It was about {action.context.system_check_in.toTimeAgo()}\n</div>\n<div>This is a loop:</div>\n{#if action.events.size() > 0}\n<ul>\n    {#each action.events}\n        <li>\n            <a href=\"http://google.com?q={it.payload.my_id}\" target=\"_blank\">{it.payload.my_name}</a>\n        </li>\n    {/each}\n</ul>\n<div>Have a nice day!</div>\n{/if}\n`.trimLeft();\n\nconst defaultPayload = JSON.stringify({\n    bundle: 'rhel',\n    application: 'policies',\n    event_type: 'policy-triggered',\n    timestamp: '2021-08-05T16:21:14.243',\n    account_id: '5758117',\n    // eslint-disable-next-line max-len\n    context: '{\"inventory_id\":\"80f7e57d-a16a-4189-82af-1d68a747c8b3\",\"system_check_in\":\"2021-08-05T16:21:12.953036\",\"display_name\":\"cool display name\"}',\n    events: [\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"3df53241-3e09-481b-a322-4892caaaaadc\",\"my_name\":\"Red color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"6c5e8451-a40a-4bb7-ab9a-0cb10a4c577d\",\"my_name\":\"Green color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"b4c6378a-c1fb-4d3e-8e9b-7e5bdfc09dd3\",\"my_name\":\"Blue color\"}'\n        }\n    ]\n}, null, 2);\n\nexport const EmailTemplatePage: React.FunctionComponent = () => {\n    const { isAdmin } = useUserPermissions();\n    const handleBackClick = React.useCallback(() => {\n        history.back();\n    }, []);\n\n    return (\n        <>{ isAdmin &&\n            <><PageSection>\n                <Split>\n                    <SplitItem isFilled>\n                        <Title headingLevel=\"h1\">Create an Email Template</Title>\n                    </SplitItem>\n                </Split>\n            </PageSection><PageSection>\n                <Title headingLevel=\"h2\">Subject template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    code={ defaultSubjectTemplate }\n                    isMinimapVisible={ false }\n                    height=\"50px\" />\n            </PageSection><PageSection>\n                <Title headingLevel=\"h2\">Body template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    code={ defaultBodyTemplate }\n                    isMinimapVisible={ false }\n                    height=\"300px\" />\n            </PageSection><PageSection>\n                <Title headingLevel=\"h2\">Payload</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultPayload }\n                    height=\"300px\"\n                    isLanguageLabelVisible\n                    language={ Language.json } />\n            </PageSection>\n            <PageSection>\n                <ActionGroup>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button variant='primary' type='submit'>Submit</Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button variant='secondary' type='reset' onClick={ handleBackClick }>Back</Button>\n                        </SplitItem>\n                    </Split>\n                </ActionGroup>\n            </PageSection>\n            </>\n        }\n        </>\n    );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport type RenderEmailRequest = {\n    subject: string;\n    body: string;\n    payload: string;\n}\n\nconst actionCreator = (params: RenderEmailRequest) => Operations.InternalServiceRenderEmailTemplate.actionCreator({\n    body: {\n        subject_template: params.subject,\n        body_template: params.body,\n        payload: params.payload\n    }\n});\n\nexport const useRenderEmailRequest = () => {\n    return useMutation(actionCreator);\n};\n","import { CodeEditor, Language } from '@patternfly/react-code-editor';\nimport {\n    HelperText,\n    HelperTextItem,\n    PageSection,\n    Spinner,\n    Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Title\n} from '@patternfly/react-core';\nimport { Button } from '@patternfly/react-core/';\nimport * as React from 'react';\n\nimport { useRenderEmailRequest } from '../services/RenderEmailRequest';\n\nconst defaultSubjectTemplate = `\nImportant email to {user.firstName} from MyCoolApp!\n`.trimLeft();\n\nconst defaultBodyTemplate = `\n<div>Hello {user.firstName} {user.lastName},</div>\n<div>We have some important news for you, MyApp has a notification for you</div>\n<div>As a reminder, current user: {user.username}: is active? {user.isActive}; is admin? {user.isAdmin}</div>\n<div>\n    System with name <strong>{action.context.display_name}</strong> (<strong>{action.context.inventory_id}</strong>) \n    did a check in at {action.context.system_check_in.toUtcFormat()}. \n    It was about {action.context.system_check_in.toTimeAgo()}\n</div>\n<div>This is a loop:</div>\n{#if action.events.size() > 0}\n<ul>\n    {#each action.events}\n        <li>\n            <a href=\"http://google.com?q={it.payload.my_id}\" target=\"_blank\">{it.payload.my_name}</a>\n        </li>\n    {/each}\n</ul>\n<div>Have a nice day!</div>\n{/if}\n`.trimLeft();\n\nconst defaultPayload = JSON.stringify({\n    bundle: 'rhel',\n    application: 'policies',\n    event_type: 'policy-triggered',\n    timestamp: '2021-08-05T16:21:14.243',\n    account_id: '5758117',\n    // eslint-disable-next-line max-len\n    context: '{\"inventory_id\":\"80f7e57d-a16a-4189-82af-1d68a747c8b3\",\"system_check_in\":\"2021-08-05T16:21:12.953036\",\"display_name\":\"cool display name\"}',\n    events: [\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"3df53241-3e09-481b-a322-4892caaaaadc\",\"my_name\":\"Red color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"6c5e8451-a40a-4bb7-ab9a-0cb10a4c577d\",\"my_name\":\"Green color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"b4c6378a-c1fb-4d3e-8e9b-7e5bdfc09dd3\",\"my_name\":\"Blue color\"}'\n        }\n    ]\n}, null, 2);\n\ntype RenderedTemplateProps = {\n    isLoading: true;\n} | {\n   isLoading: false;\n   succeeded: true;\n   subject: string;\n   body: string;\n} | {\n    isLoading: false;\n    succeeded: false;\n    error: string;\n};\n\nconst RenderedTemplate: React.FunctionComponent<RenderedTemplateProps> = props => {\n    if (props.isLoading) {\n        return <Spinner />;\n    }\n\n    if (props.succeeded) {\n        return (\n            <>\n                <StackItem>\n                    <span><strong>Subject:</strong> { props.subject }</span>\n                </StackItem>\n                <StackItem>\n                    <strong>Body:</strong>\n                </StackItem>\n                <StackItem>\n                    <iframe width=\"100%\" srcDoc={ props.body } />\n                </StackItem>\n            </>\n        );\n    }\n\n    return (\n        <StackItem>\n            <HelperText>\n                <HelperTextItem variant=\"error\">{ props.error }</HelperTextItem>\n            </HelperText>\n        </StackItem>\n    );\n};\n\nexport const RenderEmailPage: React.FunctionComponent = () => {\n    const emailTemplate = useRenderEmailRequest();\n    const [ subjectTemplate, setSubjectTemplate ] = React.useState<string | undefined>(defaultSubjectTemplate);\n    const [ bodyTemplate, setBodyTemplate ] = React.useState<string | undefined>(defaultBodyTemplate);\n    const [ payload, setPayload ] = React.useState<string | undefined>(defaultPayload);\n\n    React.useEffect(() => {\n        const mutate = emailTemplate.mutate;\n        mutate({\n            subject: subjectTemplate ?? '',\n            body: bodyTemplate ?? '',\n            payload: payload ?? ''\n        });\n        // We only want to activate this once\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ ]);\n\n    let renderedProps: RenderedTemplateProps;\n\n    if (emailTemplate.loading) {\n        renderedProps = {\n            isLoading: true\n        };\n    } else if (emailTemplate.payload?.status === 200) {\n        renderedProps = {\n            isLoading: false,\n            succeeded: true,\n            subject: emailTemplate.payload.value.subject ?? '',\n            body: emailTemplate.payload.value.body ?? ''\n        };\n    } else if (emailTemplate.payload?.status === 400) {\n        renderedProps = {\n            isLoading: false,\n            succeeded: false,\n            error: emailTemplate.payload.value.message ?? 'Unknown error'\n        };\n    } else {\n        renderedProps = {\n            isLoading: false,\n            succeeded: false,\n            error: 'Unknown error'\n        };\n    }\n\n    const onRender = React.useCallback(() => {\n        const mutate = emailTemplate.mutate;\n        mutate({\n            subject: subjectTemplate ?? '',\n            body: bodyTemplate ?? '',\n            payload: payload ?? ''\n        });\n    }, [ emailTemplate.mutate, subjectTemplate, bodyTemplate, payload ]);\n\n    return (\n        <>\n            <PageSection>\n                <Split>\n                    <SplitItem isFilled>\n                        <Title headingLevel=\"h1\" >Email templates</Title>\n                    </SplitItem>\n                    <SplitItem>\n                        <Button onClick={ onRender }>Render</Button>\n                    </SplitItem>\n                </Split>\n            </PageSection>\n            <PageSection>\n                <Stack>\n                    <StackItem>\n                        <Title headingLevel=\"h2\">Result</Title>\n                    </StackItem>\n                    <RenderedTemplate { ...renderedProps }  />\n                </Stack>\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Subject template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultSubjectTemplate }\n                    height=\"50px\"\n                    onChange={ setSubjectTemplate }\n                />\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Body template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultBodyTemplate }\n                    height=\"300px\"\n                    onChange={ setBodyTemplate }\n                />\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Payload</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultPayload }\n                    height=\"300px\"\n                    isLanguageLabelVisible\n                    language={ Language.json }\n                    onChange={ setPayload }\n                />\n            </PageSection>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\n\nimport { AggregationPage } from './pages/AggregationPage';\nimport { ApplicationPage } from './pages/ApplicationPage';\nimport { BundlePage } from './pages/BundlePage';\nimport { EmailTemplatePage } from './pages/EmailTemplatePage';\nimport { RenderEmailPage } from './pages/RenderEmailPage';\n\ninterface Path {\n    readonly path: string;\n    readonly component: React.ComponentType;\n}\n\nexport const linkTo = {\n    bundle: (bundleId: string) => `/bundle/${bundleId}`,\n    application: (applicationId: string) => `/application/${applicationId}`,\n    aggregation: () => '/aggregation',\n    email: () => '/email',\n    emailTemplates: () => `/emailTemplates`\n};\n\nconst pathRoutes: Path[] = [\n    {\n        path: linkTo.aggregation(),\n        component: AggregationPage\n    },\n    {\n        path: linkTo.application(':applicationId'),\n        component: ApplicationPage\n    },\n    {\n        path: linkTo.bundle(':bundleId'),\n        component: BundlePage\n    },\n    {\n        path: linkTo.email(),\n        component: RenderEmailPage\n    },\n    {\n        path: linkTo.emailTemplates(),\n        component: EmailTemplatePage\n    }\n];\n\nexport const Routes: React.FunctionComponent<unknown> = _props => {\n    return (\n        <Switch>\n            { pathRoutes.map(pathRoute => (\n                <Route\n                    key={ pathRoute.path }\n                    component={ pathRoute.component }\n                    path={ pathRoute.path }\n                />\n            )) }\n            <Redirect to={ linkTo.aggregation() } />\n        </Switch>\n    );\n};\n","import { Breadcrumb, BreadcrumbItem, Button, PageSection, Spinner, Title, Toolbar,\n    ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport {\n    TableComposable,\n    Tbody,\n    Td,  Th,   Thead,\n    Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useParameterizedQuery } from 'react-fetching-library';\nimport { useParams } from 'react-router';\n\nimport { useUserPermissions } from '../app/PermissionContext';\nimport { EmailTemplateTable } from '../components/EmailTemplates/EmailTemplateTable';\nimport { CreateEditModal } from '../components/EventTypes/CreateEditModal';\nimport { DeleteModal } from '../components/EventTypes/DeleteModal';\nimport { BreadcrumbLinkItem } from '../components/Wrappers/BreadCrumbLinkItem';\nimport { linkTo } from '../Routes';\nimport { useCreateEventType } from '../services/EventTypes/CreateEventTypes';\nimport { useDeleteEventType } from '../services/EventTypes/DeleteEventType';\nimport { useApplicationTypes } from '../services/EventTypes/GetApplication';\nimport { getBundleAction  } from '../services/EventTypes/GetBundleAction';\nimport { useEventTypes } from '../services/EventTypes/GetEventTypes';\nimport { EventType } from '../types/Notifications';\n\ntype ApplicationPageParams = {\n    applicationId: string;\n}\n\nexport const ApplicationPage: React.FunctionComponent = () => {\n    const { hasPermission, isAdmin } = useUserPermissions();\n    const { applicationId } = useParams<ApplicationPageParams>();\n    const eventTypesQuery = useEventTypes(applicationId);\n    const applicationTypesQuery = useApplicationTypes(applicationId);\n    const deleteEventTypeMutation = useDeleteEventType();\n    const newEvent = useCreateEventType();\n\n    const columns = [ 'Event Type', 'Name', 'Description', 'Event Type Id' ];\n\n    const [ eventTypes, setEventTypes ] = React.useState<Partial<EventType>>({});\n    const [ showModal, setShowModal ] = React.useState(false);\n    const [ isEdit, setIsEdit ] = React.useState(false);\n    const [ showDeleteModal, setShowDeleteModal ] = React.useState(false);\n\n    const getBundleId = React.useMemo(() => {\n        if (applicationTypesQuery.payload?.type === 'Application') {\n            return applicationTypesQuery.payload.value.bundleId;\n        }\n\n        return undefined;\n    }, [ applicationTypesQuery.payload ]);\n\n    const bundleNameQuery = useParameterizedQuery(getBundleAction);\n\n    React.useEffect(() => {\n        const query = bundleNameQuery.query;\n        if (getBundleId) {\n            query(getBundleId);\n        }\n    }, [ getBundleId, bundleNameQuery.query ]);\n\n    const bundle = useMemo(() => {\n        if (bundleNameQuery.payload?.status === 200) {\n            return bundleNameQuery.payload.value;\n        }\n\n        return undefined;\n    }, [ bundleNameQuery.payload?.status, bundleNameQuery.payload?.value ]);\n\n    const application = useMemo(() => {\n        if (applicationTypesQuery.payload?.status === 200) {\n            return applicationTypesQuery.payload.value;\n        }\n\n        return undefined;\n    }, [ applicationTypesQuery.payload?.status, applicationTypesQuery.payload?.value ]);\n\n    const createEventType = () => {\n        setShowModal(true);\n        setIsEdit(false);\n        setEventTypes({});\n    };\n\n    const handleSubmit = React.useCallback((eventType) => {\n        setShowModal(false);\n        const mutate = newEvent.mutate;\n        mutate({\n            id: eventType.id,\n            displayName: eventType.displayName ?? '',\n            name: eventType.name ?? '',\n            description: eventType.description ?? '',\n            applicationId\n\n        })\n        .then (eventTypesQuery.query);\n\n    }, [ applicationId, eventTypesQuery.query, newEvent.mutate ]);\n\n    const editEventType = (e: EventType) => {\n        setShowModal(true);\n        setIsEdit(true);\n        setEventTypes(e);\n    };\n\n    const handleDelete = React.useCallback(async () => {\n        setShowDeleteModal(false);\n        const deleteEventType = deleteEventTypeMutation.mutate;\n        const response = await deleteEventType(eventTypes.id);\n        if (response.error) {\n            return false;\n        }\n\n        return true;\n    }, [ deleteEventTypeMutation.mutate, eventTypes.id ]);\n\n    const deleteEventTypeModal = (e: EventType) => {\n        setShowDeleteModal(true);\n        setEventTypes(e);\n    };\n\n    const onClose = () => {\n        setShowModal(false);\n        eventTypesQuery.query();\n    };\n\n    const onDeleteClose = () => {\n        setShowDeleteModal(false);\n        eventTypesQuery.query();\n    };\n\n    if (eventTypesQuery.loading) {\n        return <Spinner />;\n    }\n\n    if (eventTypesQuery.payload?.status !== 200) {\n        return <span>Error while loading eventtypes: {eventTypesQuery.errorObject.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel=\"h1\">\n                    <Breadcrumb>\n                        <BreadcrumbItem target='#'> Bundles </BreadcrumbItem>\n                        <BreadcrumbLinkItem to={ linkTo.bundle(getBundleId ?? '') }>\n                            { bundle ? bundle.display_name : <Spinner /> }\n                        </BreadcrumbLinkItem>\n                        <BreadcrumbItem to='#' isActive> { (applicationTypesQuery.loading\n                        || applicationTypesQuery.payload?.status !== 200) ? <Spinner /> : applicationTypesQuery.payload.value.displayName }\n                        </BreadcrumbItem>\n                    </Breadcrumb></Title>\n                <TableComposable\n                    aria-label=\"Event types table\"\n                >\n                    <Thead>\n                        <Toolbar>\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <Button variant='primary' type='button'\n                                        isDisabled={ !application || !hasPermission(application?.id) }\n                                        onClick={ createEventType }> Create Event Type </Button>\n                                    <CreateEditModal\n                                        isEdit={ isEdit }\n                                        initialEventType= { eventTypes }\n                                        showModal={ showModal }\n                                        applicationName={ application?.displayName }\n                                        onClose={ onClose }\n                                        onSubmit={ handleSubmit }\n                                        isLoading={ eventTypesQuery.loading }\n\n                                    />\n                                    <React.Fragment>\n                                        <DeleteModal\n                                            onDelete={ handleDelete }\n                                            isOpen={ showDeleteModal }\n                                            onClose={ onDeleteClose }\n                                            eventTypeName={ eventTypes.name }\n                                            applicationName={ application?.displayName }\n                                            bundleName={ bundle?.display_name }\n\n                                        />\n                                    </React.Fragment>\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Tr>\n                            {columns.map((column, columnIndex) => (\n                                <Th key={ columnIndex }>{column}</Th>\n                            ))}\n                        </Tr>\n                    </Thead>\n                    <Tbody>{ (eventTypesQuery.payload.value.length === 0 ? 'There are no event types found for this application' : '') }</Tbody>\n                    <Tbody>\n                        { eventTypesQuery.payload.value.map(e => (\n                            <Tr key={ e.id }>\n                                <Td>{ e.displayName }</Td>\n                                <Td>{ e.name }</Td>\n                                <Td>{ e.description }</Td>\n                                <Td>{ e.id }</Td>\n                                <Td>\n                                    <Button className='edit' type='button' variant='plain'\n                                        isDisabled={ !application || !hasPermission(application?.id) }\n                                        onClick={ () => editEventType(e) }> { <PencilAltIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='delete' type='button' variant='plain'\n                                        isDisabled={ !application || !hasPermission(application?.id) }\n                                        onClick={ () => deleteEventTypeModal(e) }>{ <TrashIcon /> } </Button></Td>\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </TableComposable>\n            </PageSection>\n            { isAdmin && <EmailTemplateTable /> }\n        </React.Fragment>\n\n    );\n};\n\n","import { Breadcrumb, BreadcrumbItem, Button, PageSection, Spinner,\n    Title, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { useUserPermissions } from '../app/PermissionContext';\nimport { CreateEditApplicationModal } from '../components/Applications/CreateEditApplicationModal';\nimport { DeleteApplicationModal } from '../components/Applications/DeleteApplicationModal';\nimport { ListEventTypes } from '../components/EventTypes/ListEventTypes';\nimport { linkTo } from '../Routes';\nimport { useCreateApplication } from '../services/Applications/CreateApplication';\nimport { useDeleteApplication } from '../services/Applications/DeleteApplication';\nimport { useApplications } from '../services/Applications/GetApplicationById';\nimport { useBundleTypes } from '../services/Applications/GetBundleById';\nimport { Application, RoleOwnedApplication } from '../types/Notifications';\n\ntype BundlePageParams = {\n    bundleId: string;\n}\n\nexport const BundlePage: React.FunctionComponent = () => {\n    const { hasPermission, refresh, isAdmin } = useUserPermissions();\n    const { bundleId } = useParams<BundlePageParams>();\n    const getBundles = useBundleTypes(bundleId);\n    const getApplications = useApplications(bundleId);\n    const newApplication = useCreateApplication();\n    const deleteApplicationMutation = useDeleteApplication();\n\n    const columns = [ 'Application', 'Name', 'Event Types', 'Application Id' ];\n\n    const [ application, setApplication ] = React.useState<Partial<Application>>({});\n    const [ showModal, setShowModal ] = React.useState(false);\n    const [ showDeleteModal, setShowDeleteModal ] = React.useState(false);\n    const [ isEdit, setIsEdit ] = React.useState(false);\n\n    const bundle = React.useMemo(() => {\n        if (getBundles.payload?.status === 200) {\n            return getBundles.payload.value;\n        }\n\n        return undefined;\n    }, [ getBundles.payload?.status, getBundles.payload?.value ]);\n\n    const createApplication = () => {\n        setShowModal(true);\n        setIsEdit(false);\n        setApplication({});\n    };\n\n    const editApplication = (a: Application) => {\n        setShowModal(true);\n        setIsEdit(true);\n        setApplication(a);\n\n    };\n\n    const handleSubmit = React.useCallback((application: Partial<RoleOwnedApplication>) => {\n        setShowModal(false);\n        const mutate = newApplication.mutate;\n        mutate({\n            id: application.id,\n            displayName: application.displayName ?? '',\n            name: application.name ?? '',\n            bundleId,\n            ownerRole: application.ownerRole\n        })\n        .then(r => {\n            if (r.payload?.status === 200 && !isAdmin) {\n                refresh();\n            }\n\n            return r;\n        })\n        .then(getApplications.query);\n\n    }, [ bundleId, getApplications.query, newApplication.mutate, isAdmin, refresh ]);\n\n    const onClose = () => {\n        setShowModal(false);\n        setApplication({});\n        getApplications.query();\n    };\n\n    const handleDelete = React.useCallback(async () => {\n        setShowDeleteModal(false);\n        const deleteApplication = deleteApplicationMutation.mutate;\n        const response = await deleteApplication(application.id);\n        if (response.error) {\n            return false;\n        }\n\n        return true;\n    }, [ application.id, deleteApplicationMutation.mutate ]);\n\n    const deleteApplicationModal = (a: Application) => {\n        setShowDeleteModal(true);\n        setApplication(a);\n    };\n\n    const onDeleteClose = () => {\n        setShowDeleteModal(false);\n        getApplications.query();\n    };\n\n    if (getApplications.loading) {\n        return <Spinner />;\n    }\n\n    if (getApplications.payload?.status !== 200) {\n        return <span>Error while loading applications: {getApplications.errorObject.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel='h1'>\n                    <Breadcrumb>\n                        <BreadcrumbItem target='#'> Bundles </BreadcrumbItem>\n                        <BreadcrumbItem target='#' >{ (getBundles.loading || getBundles.payload?.status !== 200)\n                            ? <Spinner /> : getBundles.payload.value.displayName }\n                        </BreadcrumbItem>\n                    </Breadcrumb>\n                </Title>\n                <TableComposable aria-label=\"Applications table\">\n                    <Thead>\n                        <Toolbar>\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <Button variant='primary' type='button' onClick={ createApplication }> Create Application </Button>\n                                    {showModal && <CreateEditApplicationModal\n                                        isEdit={ isEdit }\n                                        bundleName={ bundle?.displayName }\n                                        initialApplication={ application }\n                                        showModal={ showModal }\n                                        applicationName={ application.displayName }\n                                        onClose={ onClose }\n                                        onSubmit={ handleSubmit }\n                                        isLoading={ getApplications.loading }\n\n                                    />\n                                    }\n                                    <React.Fragment>\n                                        <DeleteApplicationModal\n                                            onDelete={ handleDelete }\n                                            isOpen={ showDeleteModal }\n                                            onClose={ onDeleteClose }\n                                            applicationName={ application.displayName }\n                                            bundleName={ bundle?.displayName }\n\n                                        />\n                                    </React.Fragment>\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Tr>\n                            {columns.map((column, columnIndex) => (\n                                <Th key={ columnIndex }>{column}</Th>\n                            ))}\n                        </Tr>\n                    </Thead>\n                    <Tbody>\n                        { getApplications.payload.value.map(a =>\n                            <Tr key={ a.id }>\n                                <Td>\n                                    <Button variant=\"link\" component={ (props: any) =>\n                                        <Link { ...props } to={ linkTo.application(a.id) } /> }>{ a.displayName }</Button>\n                                </Td>\n                                <Td>{ a.name}</Td>\n                                <Td>\n                                    <ListEventTypes\n                                        appId={ a.id }\n                                    />\n                                </Td>\n                                <Td>{ a.id }</Td>\n                                <Td>\n                                    <Button className='edit' type='button' variant='plain'\n                                        isDisabled={ !hasPermission(a.id) }\n                                        onClick={ () => editApplication(a) }\n                                    > { <PencilAltIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='delete' type='button' variant='plain'\n                                        isDisabled={ !isAdmin }\n                                        onClick={ () => deleteApplicationModal(a) }\n\n                                    >{ <TrashIcon /> } </Button></Td>\n                            </Tr>\n                        )}\n                    </Tbody>\n                </TableComposable>\n            </PageSection>\n        </React.Fragment>\n\n    );\n};\n\n","import { Nav, NavExpandable, NavItem, NavList } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nimport { linkTo } from '../Routes';\nimport { Bundle } from '../types/Notifications';\n\ntype EnhancedNavItemProps = {\n    to: string;\n}\n\nconst EnhancedNavItem: React.FunctionComponent<EnhancedNavItemProps> = props => {\n    const match = useRouteMatch({\n        path: props.to,\n        exact: true\n    });\n\n    return (\n        <NavItem isActive={ !!match }>\n            <Link to={ props.to }>\n                { props.children }\n            </Link>\n        </NavItem>\n    );\n};\n\nexport interface NavigationProps {\n    bundles: ReadonlyArray<Bundle>;\n}\n\nexport const Navigation: React.FunctionComponent<NavigationProps> = props => {\n    return (\n        <Nav>\n            <NavList>\n                <NavExpandable title='Bundles'>\n                    { props.bundles.map(b => (\n                        <EnhancedNavItem key={ b.id } to={ linkTo.bundle(b.id) }>{ b.displayName }\n                        </EnhancedNavItem>\n                    )) }</NavExpandable>\n                <EnhancedNavItem to={ linkTo.email() }>\n                    Email templates\n                </EnhancedNavItem>\n                <EnhancedNavItem to={ linkTo.aggregation() }>\n                    Aggregation\n                </EnhancedNavItem>\n            </NavList>\n        </Nav>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/redhat-logo.f7405300.svg\";","import '@patternfly/react-core/dist/styles/base.css';\nimport './app.css';\n\nimport { Alert, AlertVariant, Brand, Page, PageHeader, PageSection, PageSidebar, Spinner } from '@patternfly/react-core';\nimport React, { useMemo } from 'react';\n\nimport { Routes } from '../Routes';\nimport { useBundles } from '../services/EventTypes/GetBundles';\nimport { usePermissions } from '../services/Permissions';\nimport { useServerInfo } from '../services/ServerInfo';\nimport { Navigation } from './Navigation';\nimport { PermissionContext } from './PermissionContext';\nimport logo from './redhat-logo.svg';\n\ntype Message = {\n    show: false;\n} | {\n    show: true;\n    content: string;\n}\n\nexport const App: React.FunctionComponent<unknown> = () => {\n\n    const [ isNavOpen, setNavOpen ] = React.useState(true);\n\n    const onNavToggle = React.useCallback(() => setNavOpen(prev => !prev), [ setNavOpen ]);\n\n    const bundles = useBundles();\n    const serverInfo = useServerInfo();\n\n    const message = useMemo<Message>(() => {\n        const payload = serverInfo.payload;\n        if (payload?.status === 200) {\n            if (payload.value.environment === 'PROD') {\n                return {\n                    show: true,\n                    content: 'You are viewing the production environment - '\n                    + 'Any change you make here will be applied immediately and could disrupt the service.'\n                };\n            }\n\n            return {\n                show: false\n            };\n        }\n\n        return {\n            show: true,\n            content: 'Could not load the current environment. Please verify the URL before making any change.'\n        };\n    }, [ serverInfo.payload ]);\n    const permissionQuery = usePermissions();\n\n    const appHeader = <PageHeader\n        showNavToggle\n        logo={ <Brand width=\"150px\" src={ logo } alt=\"Red Hat\" /> }\n        logoProps={ { href: '/internal' } }\n        isNavOpen={ isNavOpen }\n        onNavToggle={ onNavToggle }\n    />;\n\n    const permission = React.useMemo<PermissionContext>(() => {\n        const payload = permissionQuery.payload;\n        if (payload?.status === 200) {\n            return {\n                isAdmin: payload.value.is_admin,\n                applications: payload.value.applications.map(a => ({\n                    id: a.id,\n                    displayName: a.display_name\n                })),\n                roles: payload.value.roles,\n                refresh: permissionQuery.query\n            };\n        }\n\n        return {\n            isAdmin: false,\n            applications: [],\n            roles: [],\n            refresh: permissionQuery.query\n        };\n    }, [ permissionQuery.payload, permissionQuery.query ]);\n\n    if (bundles.isLoading || serverInfo.loading || permissionQuery.loading) {\n        return (\n            <Page\n                header={ appHeader }\n            >\n                <PageSection>\n                    <Spinner />\n                </PageSection>\n            </Page>\n        );\n    }\n\n    const appSidebar = <PageSidebar nav={ <Navigation bundles={ bundles.bundles } /> } isNavOpen={ isNavOpen } />;\n\n    return (\n        <PermissionContext.Provider value={ permission }>\n            <Page\n                sidebar={ appSidebar }\n                header={ appHeader }>\n                { message.show && (\n                    <PageSection>\n                        <Alert variant={ AlertVariant.warning } title={ message.content } />\n                    </PageSection>\n                )}\n                <Routes />\n            </Page>\n        </PermissionContext.Provider>\n    );\n};\n","import produce from 'immer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useClient } from 'react-fetching-library';\nimport { useUnmountPromise } from 'react-use';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Bundle } from '../../types/Notifications';\n\nexport const useBundles = () => {\n    const client = useClient();\n    const mounted = useUnmountPromise();\n\n    const [ bundles, setBundles ] = useState<ReadonlyArray<Bundle>>([]);\n\n    const [ isLoading, setLoading ] = useState<boolean>();\n\n    const query = useCallback(async () => {\n        const cQuery = client.query;\n        setLoading(true);\n\n        const bundleResponse = await cQuery(Operations.InternalServiceGetBundles.actionCreator());\n\n        if (bundleResponse.payload?.status === 200) {\n\n            const bundles: ReadonlyArray<Bundle> = bundleResponse.payload.value.map(bundleResponse => ({\n                id: bundleResponse.id ?? '',\n                displayName: bundleResponse.display_name,\n                applications: []\n            }));\n\n            const applicationsPromises = [];\n            for (const bundle of bundleResponse.payload.value) {\n                if (bundle.id) {\n                    applicationsPromises.push(cQuery(Operations.InternalServiceGetApplications.actionCreator({\n                        bundleId: bundle.id\n                    })));\n                }\n            }\n\n            const applicationResponses = await Promise.all(applicationsPromises);\n\n            const reducedBundles = applicationResponses.map(r => r.payload).reduce((bundles, applications) => produce(bundles, draftBundles => {\n                if (applications?.status === 200) {\n                    const draftBundle = draftBundles.find(b => applications.value.length > 0 && b.id === applications.value[0].bundle_id);\n                    if (draftBundle) {\n                        draftBundle.applications = applications.value.map(a => ({\n                            id: a.id ?? '',\n                            displayName: a.display_name,\n                            name: a.name,\n                            bundleId: a.bundle_id\n                        }));\n                    }\n                }\n            }), bundles);\n\n            (await mounted(Promise.resolve(() => setBundles((reducedBundles)))))();\n        }\n\n        setLoading(false);\n    }, [ client.query, mounted ]);\n\n    useEffect(() => {\n        query();\n    }, [ query ]);\n\n    return {\n        bundles,\n        isLoading\n    };\n};\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport const useServerInfo = () => {\n    return useQuery(Operations.InternalServiceGetServerInfo.actionCreator());\n};\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport const usePermissions = () => {\n    return useQuery(Operations.InternalPermissionServiceGetPermissions.actionCreator());\n};\n","import '@patternfly/react-core/dist/styles/base.css';\n\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ClientContextProvider, createClient } from 'react-fetching-library';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app/App';\n\nconst client = createClient({\n    responseInterceptors: [ validateSchemaResponseInterceptor ]\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <ClientContextProvider client={ client }>\n                <App />\n            </ClientContextProvider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}